
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000e0a  00000e9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cf  00800062  00800062  00000ea0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a6  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001155  00000000  00000000  0000462a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f23  00000000  00000000  0000577f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  000076a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b05  00000000  00000000  00007efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b9a  00000000  00000000  00008a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000a59b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e4 c0       	rjmp	.+456    	; 0x1ca <__ctors_end>
   2:	fe c0       	rjmp	.+508    	; 0x200 <__bad_interrupt>
   4:	fd c0       	rjmp	.+506    	; 0x200 <__bad_interrupt>
   6:	a7 c3       	rjmp	.+1870   	; 0x756 <__vector_3>
   8:	fb c0       	rjmp	.+502    	; 0x200 <__bad_interrupt>
   a:	fa c0       	rjmp	.+500    	; 0x200 <__bad_interrupt>
   c:	85 c1       	rjmp	.+778    	; 0x318 <__vector_6>
   e:	f8 c0       	rjmp	.+496    	; 0x200 <__bad_interrupt>
  10:	f7 c0       	rjmp	.+494    	; 0x200 <__bad_interrupt>
  12:	f6 c0       	rjmp	.+492    	; 0x200 <__bad_interrupt>
  14:	f5 c0       	rjmp	.+490    	; 0x200 <__bad_interrupt>
  16:	f4 c0       	rjmp	.+488    	; 0x200 <__bad_interrupt>
  18:	f3 c0       	rjmp	.+486    	; 0x200 <__bad_interrupt>
  1a:	f2 c0       	rjmp	.+484    	; 0x200 <__bad_interrupt>
  1c:	f1 c0       	rjmp	.+482    	; 0x200 <__bad_interrupt>
  1e:	f0 c0       	rjmp	.+480    	; 0x200 <__bad_interrupt>
  20:	ef c0       	rjmp	.+478    	; 0x200 <__bad_interrupt>
  22:	74 c5       	rjmp	.+2792   	; 0xb0c <__vector_17>
  24:	ed c0       	rjmp	.+474    	; 0x200 <__bad_interrupt>
  26:	34 c3       	rjmp	.+1640   	; 0x690 <PodajZnak+0x48>
  28:	1b c3       	rjmp	.+1590   	; 0x660 <PodajZnak+0x18>
  2a:	1d c3       	rjmp	.+1594   	; 0x666 <PodajZnak+0x1e>
  2c:	1f c3       	rjmp	.+1598   	; 0x66c <PodajZnak+0x24>
  2e:	21 c3       	rjmp	.+1602   	; 0x672 <PodajZnak+0x2a>
  30:	23 c3       	rjmp	.+1606   	; 0x678 <PodajZnak+0x30>
  32:	25 c3       	rjmp	.+1610   	; 0x67e <PodajZnak+0x36>
  34:	27 c3       	rjmp	.+1614   	; 0x684 <PodajZnak+0x3c>
  36:	29 c3       	rjmp	.+1618   	; 0x68a <PodajZnak+0x42>
  38:	40 c6       	rjmp	.+3200   	; 0xcba <__vector_17+0x1ae>
  3a:	42 c6       	rjmp	.+3204   	; 0xcc0 <__vector_17+0x1b4>
  3c:	41 c6       	rjmp	.+3202   	; 0xcc0 <__vector_17+0x1b4>
  3e:	40 c6       	rjmp	.+3200   	; 0xcc0 <__vector_17+0x1b4>
  40:	3f c6       	rjmp	.+3198   	; 0xcc0 <__vector_17+0x1b4>
  42:	3e c6       	rjmp	.+3196   	; 0xcc0 <__vector_17+0x1b4>
  44:	3d c6       	rjmp	.+3194   	; 0xcc0 <__vector_17+0x1b4>
  46:	3c c6       	rjmp	.+3192   	; 0xcc0 <__vector_17+0x1b4>
  48:	7f c5       	rjmp	.+2814   	; 0xb48 <__vector_17+0x3c>
  4a:	3a c6       	rjmp	.+3188   	; 0xcc0 <__vector_17+0x1b4>
  4c:	39 c6       	rjmp	.+3186   	; 0xcc0 <__vector_17+0x1b4>
  4e:	38 c6       	rjmp	.+3184   	; 0xcc0 <__vector_17+0x1b4>
  50:	37 c6       	rjmp	.+3182   	; 0xcc0 <__vector_17+0x1b4>
  52:	36 c6       	rjmp	.+3180   	; 0xcc0 <__vector_17+0x1b4>
  54:	35 c6       	rjmp	.+3178   	; 0xcc0 <__vector_17+0x1b4>
  56:	34 c6       	rjmp	.+3176   	; 0xcc0 <__vector_17+0x1b4>
  58:	77 c5       	rjmp	.+2798   	; 0xb48 <__vector_17+0x3c>
  5a:	32 c6       	rjmp	.+3172   	; 0xcc0 <__vector_17+0x1b4>
  5c:	31 c6       	rjmp	.+3170   	; 0xcc0 <__vector_17+0x1b4>
  5e:	30 c6       	rjmp	.+3168   	; 0xcc0 <__vector_17+0x1b4>
  60:	2f c6       	rjmp	.+3166   	; 0xcc0 <__vector_17+0x1b4>
  62:	2e c6       	rjmp	.+3164   	; 0xcc0 <__vector_17+0x1b4>
  64:	2d c6       	rjmp	.+3162   	; 0xcc0 <__vector_17+0x1b4>
  66:	2c c6       	rjmp	.+3160   	; 0xcc0 <__vector_17+0x1b4>
  68:	75 c5       	rjmp	.+2794   	; 0xb54 <__vector_17+0x48>
  6a:	2a c6       	rjmp	.+3156   	; 0xcc0 <__vector_17+0x1b4>
  6c:	29 c6       	rjmp	.+3154   	; 0xcc0 <__vector_17+0x1b4>
  6e:	28 c6       	rjmp	.+3152   	; 0xcc0 <__vector_17+0x1b4>
  70:	27 c6       	rjmp	.+3150   	; 0xcc0 <__vector_17+0x1b4>
  72:	26 c6       	rjmp	.+3148   	; 0xcc0 <__vector_17+0x1b4>
  74:	25 c6       	rjmp	.+3146   	; 0xcc0 <__vector_17+0x1b4>
  76:	24 c6       	rjmp	.+3144   	; 0xcc0 <__vector_17+0x1b4>
  78:	83 c5       	rjmp	.+2822   	; 0xb80 <__vector_17+0x74>
  7a:	22 c6       	rjmp	.+3140   	; 0xcc0 <__vector_17+0x1b4>
  7c:	21 c6       	rjmp	.+3138   	; 0xcc0 <__vector_17+0x1b4>
  7e:	20 c6       	rjmp	.+3136   	; 0xcc0 <__vector_17+0x1b4>
  80:	1f c6       	rjmp	.+3134   	; 0xcc0 <__vector_17+0x1b4>
  82:	1e c6       	rjmp	.+3132   	; 0xcc0 <__vector_17+0x1b4>
  84:	1d c6       	rjmp	.+3130   	; 0xcc0 <__vector_17+0x1b4>
  86:	1c c6       	rjmp	.+3128   	; 0xcc0 <__vector_17+0x1b4>
  88:	65 c5       	rjmp	.+2762   	; 0xb54 <__vector_17+0x48>
  8a:	1a c6       	rjmp	.+3124   	; 0xcc0 <__vector_17+0x1b4>
  8c:	19 c6       	rjmp	.+3122   	; 0xcc0 <__vector_17+0x1b4>
  8e:	18 c6       	rjmp	.+3120   	; 0xcc0 <__vector_17+0x1b4>
  90:	17 c6       	rjmp	.+3118   	; 0xcc0 <__vector_17+0x1b4>
  92:	16 c6       	rjmp	.+3116   	; 0xcc0 <__vector_17+0x1b4>
  94:	15 c6       	rjmp	.+3114   	; 0xcc0 <__vector_17+0x1b4>
  96:	14 c6       	rjmp	.+3112   	; 0xcc0 <__vector_17+0x1b4>
  98:	78 c5       	rjmp	.+2800   	; 0xb8a <__vector_17+0x7e>
  9a:	12 c6       	rjmp	.+3108   	; 0xcc0 <__vector_17+0x1b4>
  9c:	11 c6       	rjmp	.+3106   	; 0xcc0 <__vector_17+0x1b4>
  9e:	10 c6       	rjmp	.+3104   	; 0xcc0 <__vector_17+0x1b4>
  a0:	0f c6       	rjmp	.+3102   	; 0xcc0 <__vector_17+0x1b4>
  a2:	0e c6       	rjmp	.+3100   	; 0xcc0 <__vector_17+0x1b4>
  a4:	0d c6       	rjmp	.+3098   	; 0xcc0 <__vector_17+0x1b4>
  a6:	0c c6       	rjmp	.+3096   	; 0xcc0 <__vector_17+0x1b4>
  a8:	75 c5       	rjmp	.+2794   	; 0xb94 <__vector_17+0x88>
  aa:	0a c6       	rjmp	.+3092   	; 0xcc0 <__vector_17+0x1b4>
  ac:	09 c6       	rjmp	.+3090   	; 0xcc0 <__vector_17+0x1b4>
  ae:	08 c6       	rjmp	.+3088   	; 0xcc0 <__vector_17+0x1b4>
  b0:	07 c6       	rjmp	.+3086   	; 0xcc0 <__vector_17+0x1b4>
  b2:	06 c6       	rjmp	.+3084   	; 0xcc0 <__vector_17+0x1b4>
  b4:	05 c6       	rjmp	.+3082   	; 0xcc0 <__vector_17+0x1b4>
  b6:	04 c6       	rjmp	.+3080   	; 0xcc0 <__vector_17+0x1b4>
  b8:	7d c5       	rjmp	.+2810   	; 0xbb4 <__vector_17+0xa8>
  ba:	02 c6       	rjmp	.+3076   	; 0xcc0 <__vector_17+0x1b4>
  bc:	01 c6       	rjmp	.+3074   	; 0xcc0 <__vector_17+0x1b4>
  be:	00 c6       	rjmp	.+3072   	; 0xcc0 <__vector_17+0x1b4>
  c0:	ff c5       	rjmp	.+3070   	; 0xcc0 <__vector_17+0x1b4>
  c2:	fe c5       	rjmp	.+3068   	; 0xcc0 <__vector_17+0x1b4>
  c4:	fd c5       	rjmp	.+3066   	; 0xcc0 <__vector_17+0x1b4>
  c6:	fc c5       	rjmp	.+3064   	; 0xcc0 <__vector_17+0x1b4>
  c8:	8c c5       	rjmp	.+2840   	; 0xbe2 <__vector_17+0xd6>
  ca:	fa c5       	rjmp	.+3060   	; 0xcc0 <__vector_17+0x1b4>
  cc:	f9 c5       	rjmp	.+3058   	; 0xcc0 <__vector_17+0x1b4>
  ce:	f8 c5       	rjmp	.+3056   	; 0xcc0 <__vector_17+0x1b4>
  d0:	f7 c5       	rjmp	.+3054   	; 0xcc0 <__vector_17+0x1b4>
  d2:	f6 c5       	rjmp	.+3052   	; 0xcc0 <__vector_17+0x1b4>
  d4:	f5 c5       	rjmp	.+3050   	; 0xcc0 <__vector_17+0x1b4>
  d6:	f4 c5       	rjmp	.+3048   	; 0xcc0 <__vector_17+0x1b4>
  d8:	62 c5       	rjmp	.+2756   	; 0xb9e <__vector_17+0x92>
  da:	f2 c5       	rjmp	.+3044   	; 0xcc0 <__vector_17+0x1b4>
  dc:	f1 c5       	rjmp	.+3042   	; 0xcc0 <__vector_17+0x1b4>
  de:	f0 c5       	rjmp	.+3040   	; 0xcc0 <__vector_17+0x1b4>
  e0:	ef c5       	rjmp	.+3038   	; 0xcc0 <__vector_17+0x1b4>
  e2:	ee c5       	rjmp	.+3036   	; 0xcc0 <__vector_17+0x1b4>
  e4:	ed c5       	rjmp	.+3034   	; 0xcc0 <__vector_17+0x1b4>
  e6:	ec c5       	rjmp	.+3032   	; 0xcc0 <__vector_17+0x1b4>
  e8:	71 c5       	rjmp	.+2786   	; 0xbcc <__vector_17+0xc0>
  ea:	ea c5       	rjmp	.+3028   	; 0xcc0 <__vector_17+0x1b4>
  ec:	e9 c5       	rjmp	.+3026   	; 0xcc0 <__vector_17+0x1b4>
  ee:	e8 c5       	rjmp	.+3024   	; 0xcc0 <__vector_17+0x1b4>
  f0:	e7 c5       	rjmp	.+3022   	; 0xcc0 <__vector_17+0x1b4>
  f2:	e6 c5       	rjmp	.+3020   	; 0xcc0 <__vector_17+0x1b4>
  f4:	e5 c5       	rjmp	.+3018   	; 0xcc0 <__vector_17+0x1b4>
  f6:	e4 c5       	rjmp	.+3016   	; 0xcc0 <__vector_17+0x1b4>
  f8:	76 c5       	rjmp	.+2796   	; 0xbe6 <__vector_17+0xda>
  fa:	e2 c5       	rjmp	.+3012   	; 0xcc0 <__vector_17+0x1b4>
  fc:	e1 c5       	rjmp	.+3010   	; 0xcc0 <__vector_17+0x1b4>
  fe:	e0 c5       	rjmp	.+3008   	; 0xcc0 <__vector_17+0x1b4>
 100:	df c5       	rjmp	.+3006   	; 0xcc0 <__vector_17+0x1b4>
 102:	de c5       	rjmp	.+3004   	; 0xcc0 <__vector_17+0x1b4>
 104:	dd c5       	rjmp	.+3002   	; 0xcc0 <__vector_17+0x1b4>
 106:	dc c5       	rjmp	.+3000   	; 0xcc0 <__vector_17+0x1b4>
 108:	6e c5       	rjmp	.+2780   	; 0xbe6 <__vector_17+0xda>
 10a:	da c5       	rjmp	.+2996   	; 0xcc0 <__vector_17+0x1b4>
 10c:	d9 c5       	rjmp	.+2994   	; 0xcc0 <__vector_17+0x1b4>
 10e:	d8 c5       	rjmp	.+2992   	; 0xcc0 <__vector_17+0x1b4>
 110:	d7 c5       	rjmp	.+2990   	; 0xcc0 <__vector_17+0x1b4>
 112:	d6 c5       	rjmp	.+2988   	; 0xcc0 <__vector_17+0x1b4>
 114:	d5 c5       	rjmp	.+2986   	; 0xcc0 <__vector_17+0x1b4>
 116:	d4 c5       	rjmp	.+2984   	; 0xcc0 <__vector_17+0x1b4>
 118:	66 c5       	rjmp	.+2764   	; 0xbe6 <__vector_17+0xda>
 11a:	d2 c5       	rjmp	.+2980   	; 0xcc0 <__vector_17+0x1b4>
 11c:	d1 c5       	rjmp	.+2978   	; 0xcc0 <__vector_17+0x1b4>
 11e:	d0 c5       	rjmp	.+2976   	; 0xcc0 <__vector_17+0x1b4>
 120:	cf c5       	rjmp	.+2974   	; 0xcc0 <__vector_17+0x1b4>
 122:	ce c5       	rjmp	.+2972   	; 0xcc0 <__vector_17+0x1b4>
 124:	cd c5       	rjmp	.+2970   	; 0xcc0 <__vector_17+0x1b4>
 126:	cc c5       	rjmp	.+2968   	; 0xcc0 <__vector_17+0x1b4>
 128:	5e c5       	rjmp	.+2748   	; 0xbe6 <__vector_17+0xda>
 12a:	ca c5       	rjmp	.+2964   	; 0xcc0 <__vector_17+0x1b4>
 12c:	c9 c5       	rjmp	.+2962   	; 0xcc0 <__vector_17+0x1b4>
 12e:	c8 c5       	rjmp	.+2960   	; 0xcc0 <__vector_17+0x1b4>
 130:	c7 c5       	rjmp	.+2958   	; 0xcc0 <__vector_17+0x1b4>
 132:	c6 c5       	rjmp	.+2956   	; 0xcc0 <__vector_17+0x1b4>
 134:	c5 c5       	rjmp	.+2954   	; 0xcc0 <__vector_17+0x1b4>
 136:	c4 c5       	rjmp	.+2952   	; 0xcc0 <__vector_17+0x1b4>
 138:	5e c5       	rjmp	.+2748   	; 0xbf6 <__vector_17+0xea>
 13a:	c2 c5       	rjmp	.+2948   	; 0xcc0 <__vector_17+0x1b4>
 13c:	c1 c5       	rjmp	.+2946   	; 0xcc0 <__vector_17+0x1b4>
 13e:	c0 c5       	rjmp	.+2944   	; 0xcc0 <__vector_17+0x1b4>
 140:	bf c5       	rjmp	.+2942   	; 0xcc0 <__vector_17+0x1b4>
 142:	be c5       	rjmp	.+2940   	; 0xcc0 <__vector_17+0x1b4>
 144:	bd c5       	rjmp	.+2938   	; 0xcc0 <__vector_17+0x1b4>
 146:	bc c5       	rjmp	.+2936   	; 0xcc0 <__vector_17+0x1b4>
 148:	84 c5       	rjmp	.+2824   	; 0xc52 <__vector_17+0x146>
 14a:	ba c5       	rjmp	.+2932   	; 0xcc0 <__vector_17+0x1b4>
 14c:	b9 c5       	rjmp	.+2930   	; 0xcc0 <__vector_17+0x1b4>
 14e:	b8 c5       	rjmp	.+2928   	; 0xcc0 <__vector_17+0x1b4>
 150:	b7 c5       	rjmp	.+2926   	; 0xcc0 <__vector_17+0x1b4>
 152:	b6 c5       	rjmp	.+2924   	; 0xcc0 <__vector_17+0x1b4>
 154:	b5 c5       	rjmp	.+2922   	; 0xcc0 <__vector_17+0x1b4>
 156:	b4 c5       	rjmp	.+2920   	; 0xcc0 <__vector_17+0x1b4>
 158:	4e c5       	rjmp	.+2716   	; 0xbf6 <__vector_17+0xea>
 15a:	b2 c5       	rjmp	.+2916   	; 0xcc0 <__vector_17+0x1b4>
 15c:	b1 c5       	rjmp	.+2914   	; 0xcc0 <__vector_17+0x1b4>
 15e:	b0 c5       	rjmp	.+2912   	; 0xcc0 <__vector_17+0x1b4>
 160:	af c5       	rjmp	.+2910   	; 0xcc0 <__vector_17+0x1b4>
 162:	ae c5       	rjmp	.+2908   	; 0xcc0 <__vector_17+0x1b4>
 164:	ad c5       	rjmp	.+2906   	; 0xcc0 <__vector_17+0x1b4>
 166:	ac c5       	rjmp	.+2904   	; 0xcc0 <__vector_17+0x1b4>
 168:	74 c5       	rjmp	.+2792   	; 0xc52 <__vector_17+0x146>
 16a:	aa c5       	rjmp	.+2900   	; 0xcc0 <__vector_17+0x1b4>
 16c:	a9 c5       	rjmp	.+2898   	; 0xcc0 <__vector_17+0x1b4>
 16e:	a8 c5       	rjmp	.+2896   	; 0xcc0 <__vector_17+0x1b4>
 170:	a7 c5       	rjmp	.+2894   	; 0xcc0 <__vector_17+0x1b4>
 172:	a6 c5       	rjmp	.+2892   	; 0xcc0 <__vector_17+0x1b4>
 174:	a5 c5       	rjmp	.+2890   	; 0xcc0 <__vector_17+0x1b4>
 176:	a4 c5       	rjmp	.+2888   	; 0xcc0 <__vector_17+0x1b4>
 178:	53 c5       	rjmp	.+2726   	; 0xc20 <__vector_17+0x114>
 17a:	a2 c5       	rjmp	.+2884   	; 0xcc0 <__vector_17+0x1b4>
 17c:	a1 c5       	rjmp	.+2882   	; 0xcc0 <__vector_17+0x1b4>
 17e:	a0 c5       	rjmp	.+2880   	; 0xcc0 <__vector_17+0x1b4>
 180:	9f c5       	rjmp	.+2878   	; 0xcc0 <__vector_17+0x1b4>
 182:	9e c5       	rjmp	.+2876   	; 0xcc0 <__vector_17+0x1b4>
 184:	9d c5       	rjmp	.+2874   	; 0xcc0 <__vector_17+0x1b4>
 186:	9c c5       	rjmp	.+2872   	; 0xcc0 <__vector_17+0x1b4>
 188:	67 c5       	rjmp	.+2766   	; 0xc58 <__vector_17+0x14c>
 18a:	9a c5       	rjmp	.+2868   	; 0xcc0 <__vector_17+0x1b4>
 18c:	99 c5       	rjmp	.+2866   	; 0xcc0 <__vector_17+0x1b4>
 18e:	98 c5       	rjmp	.+2864   	; 0xcc0 <__vector_17+0x1b4>
 190:	97 c5       	rjmp	.+2862   	; 0xcc0 <__vector_17+0x1b4>
 192:	96 c5       	rjmp	.+2860   	; 0xcc0 <__vector_17+0x1b4>
 194:	95 c5       	rjmp	.+2858   	; 0xcc0 <__vector_17+0x1b4>
 196:	94 c5       	rjmp	.+2856   	; 0xcc0 <__vector_17+0x1b4>
 198:	5f c5       	rjmp	.+2750   	; 0xc58 <__vector_17+0x14c>
 19a:	92 c5       	rjmp	.+2852   	; 0xcc0 <__vector_17+0x1b4>
 19c:	91 c5       	rjmp	.+2850   	; 0xcc0 <__vector_17+0x1b4>
 19e:	90 c5       	rjmp	.+2848   	; 0xcc0 <__vector_17+0x1b4>
 1a0:	8f c5       	rjmp	.+2846   	; 0xcc0 <__vector_17+0x1b4>
 1a2:	8e c5       	rjmp	.+2844   	; 0xcc0 <__vector_17+0x1b4>
 1a4:	8d c5       	rjmp	.+2842   	; 0xcc0 <__vector_17+0x1b4>
 1a6:	8c c5       	rjmp	.+2840   	; 0xcc0 <__vector_17+0x1b4>
 1a8:	6c c5       	rjmp	.+2776   	; 0xc82 <__vector_17+0x176>
 1aa:	8a c5       	rjmp	.+2836   	; 0xcc0 <__vector_17+0x1b4>
 1ac:	89 c5       	rjmp	.+2834   	; 0xcc0 <__vector_17+0x1b4>
 1ae:	88 c5       	rjmp	.+2832   	; 0xcc0 <__vector_17+0x1b4>
 1b0:	87 c5       	rjmp	.+2830   	; 0xcc0 <__vector_17+0x1b4>
 1b2:	86 c5       	rjmp	.+2828   	; 0xcc0 <__vector_17+0x1b4>
 1b4:	85 c5       	rjmp	.+2826   	; 0xcc0 <__vector_17+0x1b4>
 1b6:	84 c5       	rjmp	.+2824   	; 0xcc0 <__vector_17+0x1b4>
 1b8:	7b c5       	rjmp	.+2806   	; 0xcb0 <__vector_17+0x1a4>
 1ba:	82 c5       	rjmp	.+2820   	; 0xcc0 <__vector_17+0x1b4>
 1bc:	81 c5       	rjmp	.+2818   	; 0xcc0 <__vector_17+0x1b4>
 1be:	80 c5       	rjmp	.+2816   	; 0xcc0 <__vector_17+0x1b4>
 1c0:	7f c5       	rjmp	.+2814   	; 0xcc0 <__vector_17+0x1b4>
 1c2:	7e c5       	rjmp	.+2812   	; 0xcc0 <__vector_17+0x1b4>
 1c4:	7d c5       	rjmp	.+2810   	; 0xcc0 <__vector_17+0x1b4>
 1c6:	7c c5       	rjmp	.+2808   	; 0xcc0 <__vector_17+0x1b4>
 1c8:	73 c5       	rjmp	.+2790   	; 0xcb0 <__vector_17+0x1a4>

000001ca <__ctors_end>:
 1ca:	11 24       	eor	r1, r1
 1cc:	1f be       	out	0x3f, r1	; 63
 1ce:	cf e5       	ldi	r28, 0x5F	; 95
 1d0:	d4 e0       	ldi	r29, 0x04	; 4
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	a0 e6       	ldi	r26, 0x60	; 96
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	ea e0       	ldi	r30, 0x0A	; 10
 1de:	fe e0       	ldi	r31, 0x0E	; 14
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x10>
 1e2:	05 90       	lpm	r0, Z+
 1e4:	0d 92       	st	X+, r0
 1e6:	a2 36       	cpi	r26, 0x62	; 98
 1e8:	b1 07       	cpc	r27, r17
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0xc>

000001ec <__do_clear_bss>:
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	a2 e6       	ldi	r26, 0x62	; 98
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
 1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
 1f6:	a1 33       	cpi	r26, 0x31	; 49
 1f8:	b2 07       	cpc	r27, r18
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>
 1fc:	b2 d0       	rcall	.+356    	; 0x362 <main>
 1fe:	03 c6       	rjmp	.+3078   	; 0xe06 <_exit>

00000200 <__bad_interrupt>:
 200:	ff ce       	rjmp	.-514    	; 0x0 <__vectors>

00000202 <obsluzKropke>:
#include <stdbool.h>


void obsluzKropke(bool kropka)
{
	if(kropka > 0)
 202:	88 23       	and	r24, r24
 204:	21 f0       	breq	.+8      	; 0x20e <obsluzKropke+0xc>
	{
		K_PORT |= (1<<K_PIN);
 206:	82 b3       	in	r24, 0x12	; 18
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	08 95       	ret
	}
	else
	{
		K_PORT &= ~(1<<K_PIN);
 20e:	82 b3       	in	r24, 0x12	; 18
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	82 bb       	out	0x12, r24	; 18
 214:	08 95       	ret

00000216 <LEDSet>:
{
	LED1_DDR  |= (1<<LED1_PIN);
	LED1_PORT   &=~  (1<<LED1_PIN);
	
	LED2_DDR  |= (1<<LED2_PIN);
	LED2_PORT   &=~  (1<<LED2_PIN);
 216:	61 15       	cp	r22, r1
 218:	71 05       	cpc	r23, r1
 21a:	69 f0       	breq	.+26     	; 0x236 <LEDSet+0x20>
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	71 05       	cpc	r23, r1
 220:	99 f4       	brne	.+38     	; 0x248 <LEDSet+0x32>
 222:	88 23       	and	r24, r24
 224:	21 f0       	breq	.+8      	; 0x22e <LEDSet+0x18>
 226:	85 b3       	in	r24, 0x15	; 21
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
 22e:	85 b3       	in	r24, 0x15	; 21
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	85 bb       	out	0x15, r24	; 21
 234:	08 95       	ret
 236:	88 23       	and	r24, r24
 238:	21 f0       	breq	.+8      	; 0x242 <LEDSet+0x2c>
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	85 bb       	out	0x15, r24	; 21
 240:	08 95       	ret
 242:	85 b3       	in	r24, 0x15	; 21
 244:	8e 7f       	andi	r24, 0xFE	; 254
 246:	85 bb       	out	0x15, r24	; 21
 248:	08 95       	ret

0000024a <zmianaTrybuLed>:
}


void zmianaTrybuLed()
{
	PORTC |= (1<<PINC1);
 24a:	85 b3       	in	r24, 0x15	; 21
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	80 e7       	ldi	r24, 0x70	; 112
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <zmianaTrybuLed+0xc>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <zmianaTrybuLed+0x16>
 260:	00 00       	nop
	_delay_ms(100);
	PORTC &= ~(1<<PINC1);
 262:	85 b3       	in	r24, 0x15	; 21
 264:	8d 7f       	andi	r24, 0xFD	; 253
 266:	85 bb       	out	0x15, r24	; 21
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	80 e7       	ldi	r24, 0x70	; 112
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <zmianaTrybuLed+0x24>
 276:	00 c0       	rjmp	.+0      	; 0x278 <zmianaTrybuLed+0x2e>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <wylaczLicznikCzasu>:

void wylaczLicznikCzasu()
{
	

	TCCR1B&=~(1<<CS11);
 27c:	8e b5       	in	r24, 0x2e	; 46
 27e:	8d 7f       	andi	r24, 0xFD	; 253
 280:	8e bd       	out	0x2e, r24	; 46
	TCCR1B&=~(1<<CS10);
 282:	8e b5       	in	r24, 0x2e	; 46
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	8e bd       	out	0x2e, r24	; 46
 288:	08 95       	ret

0000028a <uruchomLicznikCzasu>:
	
	
}
void uruchomLicznikCzasu()
{
	licznikCzasu = 0;
 28a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 28e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 292:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
 296:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
	TCCR1B |= (1<<CS11)|(1<<CS10);
 29a:	8e b5       	in	r24, 0x2e	; 46
 29c:	83 60       	ori	r24, 0x03	; 3
 29e:	8e bd       	out	0x2e, r24	; 46
 2a0:	08 95       	ret

000002a2 <ObsluzPrzycisk>:
void read_rtc(void)
{
	
	uint8_t hour, min, sec;
	rtc_get_time_s(&hour, &min, &sec);
}
 2a2:	9b 99       	sbic	0x13, 3	; 19
 2a4:	2b c0       	rjmp	.+86     	; 0x2fc <ObsluzPrzycisk+0x5a>
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 81       	ld	r18, Z
 2aa:	21 11       	cpse	r18, r1
 2ac:	12 c0       	rjmp	.+36     	; 0x2d2 <ObsluzPrzycisk+0x30>
 2ae:	fb 01       	movw	r30, r22
 2b0:	dc 01       	movw	r26, r24
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	2c 93       	st	X, r18
 2b6:	20 83       	st	Z, r18
 2b8:	e1 df       	rcall	.-62     	; 0x27c <wylaczLicznikCzasu>
 2ba:	ff ef       	ldi	r31, 0xFF	; 255
 2bc:	20 e7       	ldi	r18, 0x70	; 112
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	f1 50       	subi	r31, 0x01	; 1
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <ObsluzPrzycisk+0x1e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <ObsluzPrzycisk+0x28>
 2ca:	00 00       	nop
 2cc:	9b 9b       	sbis	0x13, 3	; 19
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <ObsluzPrzycisk+0x2a>
 2d0:	08 95       	ret
 2d2:	21 30       	cpi	r18, 0x01	; 1
 2d4:	99 f4       	brne	.+38     	; 0x2fc <ObsluzPrzycisk+0x5a>
 2d6:	fb 01       	movw	r30, r22
 2d8:	20 81       	ld	r18, Z
 2da:	21 30       	cpi	r18, 0x01	; 1
 2dc:	79 f4       	brne	.+30     	; 0x2fc <ObsluzPrzycisk+0x5a>
 2de:	fc 01       	movw	r30, r24
 2e0:	10 82       	st	Z, r1
 2e2:	fb 01       	movw	r30, r22
 2e4:	10 82       	st	Z, r1
 2e6:	ff ef       	ldi	r31, 0xFF	; 255
 2e8:	20 e7       	ldi	r18, 0x70	; 112
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	f1 50       	subi	r31, 0x01	; 1
 2ee:	20 40       	sbci	r18, 0x00	; 0
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <ObsluzPrzycisk+0x4a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <ObsluzPrzycisk+0x54>
 2f6:	00 00       	nop
 2f8:	9b 9b       	sbis	0x13, 3	; 19
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <ObsluzPrzycisk+0x56>
 2fc:	08 95       	ret

000002fe <wyzerowanie>:
 2fe:	b4 99       	sbic	0x16, 4	; 22
 300:	0a c0       	rjmp	.+20     	; 0x316 <wyzerowanie+0x18>
 302:	b4 9b       	sbis	0x16, 4	; 22
 304:	fe cf       	rjmp	.-4      	; 0x302 <wyzerowanie+0x4>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flagaZatrzymania>
 30c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <licznikStopera+0x1>
 310:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <licznikStopera>
 314:	ba df       	rcall	.-140    	; 0x28a <uruchomLicznikCzasu>
 316:	08 95       	ret

00000318 <__vector_6>:

ISR(	TIMER1_COMPA_vect	) {
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
	
	licznikCzasu ++;
 32a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 32e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 332:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
 336:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	a1 1d       	adc	r26, r1
 33e:	b1 1d       	adc	r27, r1
 340:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 344:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 348:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
 34c:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
	
}
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <main>:




int main(void){
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <main+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <main+0x8>
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62

	multipleks_init();
 36e:	c2 d1       	rcall	.+900    	; 0x6f4 <multipleks_init>
	twi_init_master();
 370:	b8 d4       	rcall	.+2416   	; 0xce2 <twi_init_master>

	//cyfra[0] = 1;
	//cyfra[1] = 1;
	//cyfra[2] = 1;
	//cyfra[3] = 1;
	OCR1A = 12499;
 372:	83 ed       	ldi	r24, 0xD3	; 211
 374:	90 e3       	ldi	r25, 0x30	; 48
 376:	9b bd       	out	0x2b, r25	; 43
 378:	8a bd       	out	0x2a, r24	; 42

	TIMSK |= (1<<OCIE1A);
 37a:	89 b7       	in	r24, 0x39	; 57
 37c:	80 61       	ori	r24, 0x10	; 16
 37e:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1<<WGM12);
 380:	8e b5       	in	r24, 0x2e	; 46
 382:	88 60       	ori	r24, 0x08	; 8
 384:	8e bd       	out	0x2e, r24	; 46
	
	
	
	
	sei();
 386:	78 94       	sei
	Wyswietlacz.z1=1;
 388:	e0 ee       	ldi	r30, 0xE0	; 224
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	91 83       	std	Z+1, r25	; 0x01
 392:	80 83       	st	Z, r24
	Wyswietlacz.z2=2;
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	93 83       	std	Z+3, r25	; 0x03
 39a:	82 83       	std	Z+2, r24	; 0x02
	Wyswietlacz.z3=3;
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	95 83       	std	Z+5, r25	; 0x05
 3a2:	84 83       	std	Z+4, r24	; 0x04
	Wyswietlacz.z4=4;
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	97 83       	std	Z+7, r25	; 0x07
 3aa:	86 83       	std	Z+6, r24	; 0x06

P1_init();
 3ac:	5b d2       	rcall	.+1206   	; 0x864 <P1_init>
P2_init();
 3ae:	61 d2       	rcall	.+1218   	; 0x872 <P2_init>
P3_init();
 3b0:	67 d2       	rcall	.+1230   	; 0x880 <P3_init>
P4_init();
 3b2:	6d d2       	rcall	.+1242   	; 0x88e <P4_init>
	
	
	
	DDRC|=(1<<PINC0);
 3b4:	84 b3       	in	r24, 0x14	; 20
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	84 bb       	out	0x14, r24	; 20
	
	DDRD|=(1<<PIND0);
 3ba:	81 b3       	in	r24, 0x11	; 17
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	81 bb       	out	0x11, r24	; 17


	uint8_t flagaPrzycisku=0;
 3c0:	19 82       	std	Y+1, r1	; 0x01

	
	
	uint8_t hour, min, sec;
	
	rtc_get_time_s(&hour, &min, &sec);
 3c2:	ae 01       	movw	r20, r28
 3c4:	4c 5f       	subi	r20, 0xFC	; 252
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	be 01       	movw	r22, r28
 3ca:	6d 5f       	subi	r22, 0xFD	; 253
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	ce 01       	movw	r24, r28
 3d0:	02 96       	adiw	r24, 0x02	; 2
 3d2:	8b d2       	rcall	.+1302   	; 0x8ea <rtc_get_time_s>
	
	
	
	while(1) {
		
		LEDSet(false, LED2_PIN);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	1d df       	rcall	.-454    	; 0x216 <LEDSet>
		
		
		
		switch (tryb)
 3dc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <tryb>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <main+0x84>
 3e4:	42 c0       	rjmp	.+132    	; 0x46a <__stack+0xb>
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <main+0x8e>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	09 f4       	brne	.+2      	; 0x3ee <main+0x8c>
 3ec:	b5 c0       	rjmp	.+362    	; 0x558 <__stack+0xf9>
 3ee:	2a c1       	rjmp	.+596    	; 0x644 <__stack+0x1e5>
		{
			case 0:
			
			
			rtc_get_time_s(&hour, &min, &sec);
 3f0:	ae 01       	movw	r20, r28
 3f2:	4c 5f       	subi	r20, 0xFC	; 252
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	be 01       	movw	r22, r28
 3f8:	6d 5f       	subi	r22, 0xFD	; 253
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	ce 01       	movw	r24, r28
 3fe:	02 96       	adiw	r24, 0x02	; 2
 400:	74 d2       	rcall	.+1256   	; 0x8ea <rtc_get_time_s>
			if(sec % 2 )
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	80 ff       	sbrs	r24, 0
 406:	04 c0       	rjmp	.+8      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
			{
				Wyswietlacz.k2 = 1;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <Wyswietlacz+0x9>
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
				
				
			}
			else
			{
				Wyswietlacz.k2 = 0;
 410:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <Wyswietlacz+0x9>
			}
			//min
			Wyswietlacz.z1 = hour/10;
 414:	3a 81       	ldd	r19, Y+2	; 0x02
 416:	2d ec       	ldi	r18, 0xCD	; 205
 418:	32 9f       	mul	r19, r18
 41a:	41 2d       	mov	r20, r1
 41c:	11 24       	eor	r1, r1
 41e:	46 95       	lsr	r20
 420:	46 95       	lsr	r20
 422:	46 95       	lsr	r20
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	e0 ee       	ldi	r30, 0xE0	; 224
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	51 83       	std	Z+1, r21	; 0x01
 42c:	40 83       	st	Z, r20
			
			Wyswietlacz.z2 = (hour-(Wyswietlacz.z1*10));
 42e:	66 ef       	ldi	r22, 0xF6	; 246
 430:	64 03       	mulsu	r22, r20
 432:	c0 01       	movw	r24, r0
 434:	65 9f       	mul	r22, r21
 436:	90 0d       	add	r25, r0
 438:	11 24       	eor	r1, r1
 43a:	83 0f       	add	r24, r19
 43c:	91 1d       	adc	r25, r1
 43e:	93 83       	std	Z+3, r25	; 0x03
 440:	82 83       	std	Z+2, r24	; 0x02

			Wyswietlacz.z3 = min/10;
 442:	4b 81       	ldd	r20, Y+3	; 0x03
 444:	42 9f       	mul	r20, r18
 446:	21 2d       	mov	r18, r1
 448:	11 24       	eor	r1, r1
 44a:	26 95       	lsr	r18
 44c:	26 95       	lsr	r18
 44e:	26 95       	lsr	r18
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	35 83       	std	Z+5, r19	; 0x05
 454:	24 83       	std	Z+4, r18	; 0x04
			
			Wyswietlacz.z4 = (min-(Wyswietlacz.z3*10));
 456:	62 03       	mulsu	r22, r18
 458:	c0 01       	movw	r24, r0
 45a:	63 9f       	mul	r22, r19
 45c:	90 0d       	add	r25, r0
 45e:	11 24       	eor	r1, r1
 460:	84 0f       	add	r24, r20
 462:	91 1d       	adc	r25, r1
 464:	97 83       	std	Z+7, r25	; 0x07
 466:	86 83       	std	Z+6, r24	; 0x06
			
			
			break;
 468:	ed c0       	rjmp	.+474    	; 0x644 <__stack+0x1e5>
			case 1: //tryb 2
			
			ObsluzPrzycisk(&flagaPrzycisku, &flagaZatrzymania);
 46a:	66 e6       	ldi	r22, 0x66	; 102
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	ce 01       	movw	r24, r28
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	17 df       	rcall	.-466    	; 0x2a2 <ObsluzPrzycisk>
			wyzerowanie();
 474:	44 df       	rcall	.-376    	; 0x2fe <wyzerowanie>
			licznikStopera = licznikCzasu/10;
 476:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 47a:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 47e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
 482:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
 486:	2a e0       	ldi	r18, 0x0A	; 10
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	8d d4       	rcall	.+2330   	; 0xdaa <__udivmodsi4>
 490:	69 01       	movw	r12, r18
 492:	7a 01       	movw	r14, r20
 494:	a9 01       	movw	r20, r18
 496:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <licznikStopera+0x1>
 49a:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <licznikStopera>
			if(licznikStopera > 100)
 49e:	25 36       	cpi	r18, 0x65	; 101
 4a0:	31 05       	cpc	r19, r1
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <__stack+0x4d>
			{
				Wyswietlacz.k2 = 1;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <Wyswietlacz+0x9>
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__stack+0x51>
			}
			else
			{
				Wyswietlacz.k2 = 0;
 4ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <Wyswietlacz+0x9>
			}

			Wyswietlacz.z1 = licznikStopera/1000;
 4b0:	96 01       	movw	r18, r12
 4b2:	36 95       	lsr	r19
 4b4:	27 95       	ror	r18
 4b6:	36 95       	lsr	r19
 4b8:	27 95       	ror	r18
 4ba:	36 95       	lsr	r19
 4bc:	27 95       	ror	r18
 4be:	a5 ec       	ldi	r26, 0xC5	; 197
 4c0:	b0 e2       	ldi	r27, 0x20	; 32
 4c2:	95 d4       	rcall	.+2346   	; 0xdee <__umulhisi3>
 4c4:	92 95       	swap	r25
 4c6:	82 95       	swap	r24
 4c8:	8f 70       	andi	r24, 0x0F	; 15
 4ca:	89 27       	eor	r24, r25
 4cc:	9f 70       	andi	r25, 0x0F	; 15
 4ce:	89 27       	eor	r24, r25
 4d0:	e0 ee       	ldi	r30, 0xE0	; 224
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	91 83       	std	Z+1, r25	; 0x01
 4d6:	80 83       	st	Z, r24

			Wyswietlacz.z2 = (licznikStopera-(Wyswietlacz.z1*1000))/100;
 4d8:	28 e1       	ldi	r18, 0x18	; 24
 4da:	3c ef       	ldi	r19, 0xFC	; 252
 4dc:	82 9f       	mul	r24, r18
 4de:	80 01       	movw	r16, r0
 4e0:	83 9f       	mul	r24, r19
 4e2:	10 0d       	add	r17, r0
 4e4:	92 9f       	mul	r25, r18
 4e6:	10 0d       	add	r17, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	98 01       	movw	r18, r16
 4ec:	2c 0d       	add	r18, r12
 4ee:	3d 1d       	adc	r19, r13
 4f0:	36 95       	lsr	r19
 4f2:	27 95       	ror	r18
 4f4:	36 95       	lsr	r19
 4f6:	27 95       	ror	r18
 4f8:	ab e7       	ldi	r26, 0x7B	; 123
 4fa:	b4 e1       	ldi	r27, 0x14	; 20
 4fc:	78 d4       	rcall	.+2288   	; 0xdee <__umulhisi3>
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	93 83       	std	Z+3, r25	; 0x03
 504:	82 83       	std	Z+2, r24	; 0x02
			
			Wyswietlacz.z3 = (licznikStopera-(Wyswietlacz.z1*1000)-(Wyswietlacz.z2*100))/10;
 506:	ac e9       	ldi	r26, 0x9C	; 156
 508:	6a 2f       	mov	r22, r26
 50a:	9c 01       	movw	r18, r24
 50c:	62 03       	mulsu	r22, r18
 50e:	50 01       	movw	r10, r0
 510:	63 9f       	mul	r22, r19
 512:	b0 0c       	add	r11, r0
 514:	11 24       	eor	r1, r1
 516:	0a 0d       	add	r16, r10
 518:	1b 1d       	adc	r17, r11
 51a:	c0 0e       	add	r12, r16
 51c:	d1 1e       	adc	r13, r17
 51e:	96 01       	movw	r18, r12
 520:	ad ec       	ldi	r26, 0xCD	; 205
 522:	bc ec       	ldi	r27, 0xCC	; 204
 524:	64 d4       	rcall	.+2248   	; 0xdee <__umulhisi3>
 526:	96 95       	lsr	r25
 528:	87 95       	ror	r24
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	96 95       	lsr	r25
 530:	87 95       	ror	r24
 532:	95 83       	std	Z+5, r25	; 0x05
 534:	84 83       	std	Z+4, r24	; 0x04

			Wyswietlacz.z4 = (licznikStopera-(Wyswietlacz.z1*1000)-(Wyswietlacz.z2*100)-(Wyswietlacz.z3*10));
 536:	66 ef       	ldi	r22, 0xF6	; 246
 538:	8c 01       	movw	r16, r24
 53a:	60 03       	mulsu	r22, r16
 53c:	90 01       	movw	r18, r0
 53e:	61 9f       	mul	r22, r17
 540:	30 0d       	add	r19, r0
 542:	11 24       	eor	r1, r1
 544:	c2 0e       	add	r12, r18
 546:	d3 1e       	adc	r13, r19
 548:	d7 82       	std	Z+7, r13	; 0x07
 54a:	c6 82       	std	Z+6, r12	; 0x06


			if(licznikStopera == 9999) wylaczLicznikCzasu();
 54c:	4f 30       	cpi	r20, 0x0F	; 15
 54e:	57 42       	sbci	r21, 0x27	; 39
 550:	09 f0       	breq	.+2      	; 0x554 <__stack+0xf5>
 552:	78 c0       	rjmp	.+240    	; 0x644 <__stack+0x1e5>
 554:	93 de       	rcall	.-730    	; 0x27c <wylaczLicznikCzasu>
 556:	76 c0       	rjmp	.+236    	; 0x644 <__stack+0x1e5>
			
			break;
			case 2:
				switch (flagaMinutnika)
 558:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flagaMinutnika>
 55c:	88 23       	and	r24, r24
 55e:	19 f0       	breq	.+6      	; 0x566 <__stack+0x107>
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	21 f0       	breq	.+8      	; 0x56c <__stack+0x10d>
 564:	1e c0       	rjmp	.+60     	; 0x5a2 <__stack+0x143>
				{
					case 0:
					
					MinutnikZmianaWartosciWGore();
 566:	67 d1       	rcall	.+718    	; 0x836 <MinutnikZmianaWartosciWGore>
					MinutnikPrzyciskRozpoczynajacyOdliczanie();
 568:	50 d1       	rcall	.+672    	; 0x80a <MinutnikPrzyciskRozpoczynajacyOdliczanie>
					
					break;
 56a:	1b c0       	rjmp	.+54     	; 0x5a2 <__stack+0x143>
					
					case 1:
				
					MinutnikWyzerowanie();
 56c:	56 d1       	rcall	.+684    	; 0x81a <MinutnikWyzerowanie>

					licznikMinutnika=licznikMinutnikaStartowy-(licznikCzasu/10);
 56e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 572:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 576:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
 57a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
 57e:	2a e0       	ldi	r18, 0x0A	; 10
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	11 d4       	rcall	.+2082   	; 0xdaa <__udivmodsi4>
 588:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <licznikMinutnikaStartowy>
 58c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <licznikMinutnikaStartowy+0x1>
 590:	82 1b       	sub	r24, r18
 592:	93 0b       	sbc	r25, r19
 594:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <licznikMinutnika+0x1>
 598:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <licznikMinutnika>
				

					if(licznikMinutnika == 0) wylaczLicznikCzasu();
 59c:	89 2b       	or	r24, r25
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__stack+0x143>
 5a0:	6d de       	rcall	.-806    	; 0x27c <wylaczLicznikCzasu>
					break;
				}
				
			Wyswietlacz.z1 = licznikMinutnika/1000;
 5a2:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <licznikMinutnika>
 5a6:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <licznikMinutnika+0x1>
 5aa:	9a 01       	movw	r18, r20
 5ac:	36 95       	lsr	r19
 5ae:	27 95       	ror	r18
 5b0:	36 95       	lsr	r19
 5b2:	27 95       	ror	r18
 5b4:	36 95       	lsr	r19
 5b6:	27 95       	ror	r18
 5b8:	a5 ec       	ldi	r26, 0xC5	; 197
 5ba:	b0 e2       	ldi	r27, 0x20	; 32
 5bc:	18 d4       	rcall	.+2096   	; 0xdee <__umulhisi3>
 5be:	92 95       	swap	r25
 5c0:	82 95       	swap	r24
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	89 27       	eor	r24, r25
 5c6:	9f 70       	andi	r25, 0x0F	; 15
 5c8:	89 27       	eor	r24, r25
 5ca:	e0 ee       	ldi	r30, 0xE0	; 224
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	91 83       	std	Z+1, r25	; 0x01
 5d0:	80 83       	st	Z, r24

			Wyswietlacz.z2 = (licznikMinutnika-(Wyswietlacz.z1*1000))/100;
 5d2:	28 e1       	ldi	r18, 0x18	; 24
 5d4:	3c ef       	ldi	r19, 0xFC	; 252
 5d6:	82 9f       	mul	r24, r18
 5d8:	70 01       	movw	r14, r0
 5da:	83 9f       	mul	r24, r19
 5dc:	f0 0c       	add	r15, r0
 5de:	92 9f       	mul	r25, r18
 5e0:	f0 0c       	add	r15, r0
 5e2:	11 24       	eor	r1, r1
 5e4:	9a 01       	movw	r18, r20
 5e6:	2e 0d       	add	r18, r14
 5e8:	3f 1d       	adc	r19, r15
 5ea:	36 95       	lsr	r19
 5ec:	27 95       	ror	r18
 5ee:	36 95       	lsr	r19
 5f0:	27 95       	ror	r18
 5f2:	ab e7       	ldi	r26, 0x7B	; 123
 5f4:	b4 e1       	ldi	r27, 0x14	; 20
 5f6:	fb d3       	rcall	.+2038   	; 0xdee <__umulhisi3>
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	93 83       	std	Z+3, r25	; 0x03
 5fe:	82 83       	std	Z+2, r24	; 0x02
			
			Wyswietlacz.z3 = (licznikMinutnika-(Wyswietlacz.z1*1000)-(Wyswietlacz.z2*100))/10;
 600:	6c e9       	ldi	r22, 0x9C	; 156
 602:	8c 01       	movw	r16, r24
 604:	60 03       	mulsu	r22, r16
 606:	90 01       	movw	r18, r0
 608:	61 9f       	mul	r22, r17
 60a:	30 0d       	add	r19, r0
 60c:	11 24       	eor	r1, r1
 60e:	e2 0e       	add	r14, r18
 610:	f3 1e       	adc	r15, r19
 612:	4e 0d       	add	r20, r14
 614:	5f 1d       	adc	r21, r15
 616:	9a 01       	movw	r18, r20
 618:	ad ec       	ldi	r26, 0xCD	; 205
 61a:	bc ec       	ldi	r27, 0xCC	; 204
 61c:	e8 d3       	rcall	.+2000   	; 0xdee <__umulhisi3>
 61e:	96 95       	lsr	r25
 620:	87 95       	ror	r24
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	95 83       	std	Z+5, r25	; 0x05
 62c:	84 83       	std	Z+4, r24	; 0x04

			Wyswietlacz.z4 = (licznikMinutnika-(Wyswietlacz.z1*1000)-(Wyswietlacz.z2*100)-(Wyswietlacz.z3*10));
 62e:	66 ef       	ldi	r22, 0xF6	; 246
 630:	8c 01       	movw	r16, r24
 632:	60 03       	mulsu	r22, r16
 634:	90 01       	movw	r18, r0
 636:	61 9f       	mul	r22, r17
 638:	30 0d       	add	r19, r0
 63a:	11 24       	eor	r1, r1
 63c:	42 0f       	add	r20, r18
 63e:	53 1f       	adc	r21, r19
 640:	57 83       	std	Z+7, r21	; 0x07
 642:	46 83       	std	Z+6, r20	; 0x06
			default:
			/* Your code here */
			break;
		}

		ObsluzPrzyciskZmianyTrybu();
 644:	2b d1       	rcall	.+598    	; 0x89c <ObsluzPrzyciskZmianyTrybu>
	}
 646:	c6 ce       	rjmp	.-628    	; 0x3d4 <main+0x72>

00000648 <PodajZnak>:


unsigned int PodajZnak(uint8_t znak)
{

	switch (znak)
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	fc 01       	movw	r30, r24
 64c:	31 97       	sbiw	r30, 0x01	; 1
 64e:	e9 30       	cpi	r30, 0x09	; 9
 650:	f1 05       	cpc	r31, r1
 652:	18 f4       	brcc	.+6      	; 0x65a <PodajZnak+0x12>
 654:	ed 5e       	subi	r30, 0xED	; 237
 656:	ff 4f       	sbci	r31, 0xFF	; 255
 658:	09 94       	ijmp
	{
		case 0:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
 65a:	8c ef       	ldi	r24, 0xFC	; 252
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	08 95       	ret
		case 1:
		return (SEG_B|SEG_C) ;
		case 2:
		return (SEG_A|SEG_B|SEG_G|SEG_E|SEG_D);
 660:	8a ed       	ldi	r24, 0xDA	; 218
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	08 95       	ret
		case 3:
		return (SEG_A|SEG_B|SEG_G|SEG_C|SEG_D);
 666:	82 ef       	ldi	r24, 0xF2	; 242
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	08 95       	ret
		case 4:
		return (SEG_F|SEG_G|SEG_B|SEG_C);
 66c:	86 e6       	ldi	r24, 0x66	; 102
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	08 95       	ret
		case 5:
		return(SEG_A|SEG_F|SEG_G|SEG_C|SEG_D);
 672:	86 eb       	ldi	r24, 0xB6	; 182
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	08 95       	ret
		case 6:
		return (SEG_A|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G);
 678:	8e eb       	ldi	r24, 0xBE	; 190
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	08 95       	ret
		case 7:
		return (SEG_A|SEG_B|SEG_C);
 67e:	80 ee       	ldi	r24, 0xE0	; 224
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	08 95       	ret
		case 8:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G);
 684:	8e ef       	ldi	r24, 0xFE	; 254
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	08 95       	ret
		case 9:
		return(SEG_A|SEG_B|SEG_C|SEG_D|SEG_F|SEG_G);
 68a:	86 ef       	ldi	r24, 0xF6	; 246
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	08 95       	ret
	switch (znak)
	{
		case 0:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
		case 1:
		return (SEG_B|SEG_C) ;
 690:	80 e6       	ldi	r24, 0x60	; 96
 692:	90 e0       	ldi	r25, 0x00	; 0
		
		default:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
	}
	
}
 694:	08 95       	ret

00000696 <wyswietl>:

void wyswietl(uint8_t segment, uint8_t cyfra, bool kropka)
{
 696:	cf 93       	push	r28
 698:	c4 2f       	mov	r28, r20

	KATODY_PORT=0;
 69a:	18 ba       	out	0x18, r1	; 24

	switch (segment)
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	89 f0       	breq	.+34     	; 0x6c2 <wyswietl+0x2c>
 6a0:	18 f4       	brcc	.+6      	; 0x6a8 <wyswietl+0x12>
 6a2:	81 30       	cpi	r24, 0x01	; 1
 6a4:	31 f0       	breq	.+12     	; 0x6b2 <wyswietl+0x1c>
 6a6:	24 c0       	rjmp	.+72     	; 0x6f0 <wyswietl+0x5a>
 6a8:	83 30       	cpi	r24, 0x03	; 3
 6aa:	99 f0       	breq	.+38     	; 0x6d2 <wyswietl+0x3c>
 6ac:	84 30       	cpi	r24, 0x04	; 4
 6ae:	c9 f0       	breq	.+50     	; 0x6e2 <wyswietl+0x4c>
 6b0:	1f c0       	rjmp	.+62     	; 0x6f0 <wyswietl+0x5a>
	{
		case 1:
		
		SEGMENTY_PORT =	PodajZnak(cyfra) ;//(SEG_A|SEG_B|SEG_G|SEG_C|SEG_D);
 6b2:	86 2f       	mov	r24, r22
 6b4:	c9 df       	rcall	.-110    	; 0x648 <PodajZnak>
 6b6:	82 bb       	out	0x12, r24	; 18
		obsluzKropke(kropka);
 6b8:	8c 2f       	mov	r24, r28
 6ba:	a3 dd       	rcall	.-1210   	; 0x202 <obsluzKropke>
		KATODY_PORT=KATODA_1;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	88 bb       	out	0x18, r24	; 24
		
		
		break;
 6c0:	17 c0       	rjmp	.+46     	; 0x6f0 <wyswietl+0x5a>
		case 2:
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 6c2:	86 2f       	mov	r24, r22
 6c4:	c1 df       	rcall	.-126    	; 0x648 <PodajZnak>
 6c6:	82 bb       	out	0x12, r24	; 18
		obsluzKropke(kropka);
 6c8:	8c 2f       	mov	r24, r28
 6ca:	9b dd       	rcall	.-1226   	; 0x202 <obsluzKropke>
		KATODY_PORT=KATODA_2;
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	88 bb       	out	0x18, r24	; 24
		
		break;
 6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <wyswietl+0x5a>
		case 3:
		
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 6d2:	86 2f       	mov	r24, r22
 6d4:	b9 df       	rcall	.-142    	; 0x648 <PodajZnak>
 6d6:	82 bb       	out	0x12, r24	; 18
		obsluzKropke(kropka);
 6d8:	8c 2f       	mov	r24, r28
 6da:	93 dd       	rcall	.-1242   	; 0x202 <obsluzKropke>
		KATODY_PORT=KATODA_3;
 6dc:	84 e0       	ldi	r24, 0x04	; 4
 6de:	88 bb       	out	0x18, r24	; 24
		
		break;
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <wyswietl+0x5a>
		case 4:
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 6e2:	86 2f       	mov	r24, r22
 6e4:	b1 df       	rcall	.-158    	; 0x648 <PodajZnak>
 6e6:	82 bb       	out	0x12, r24	; 18
		obsluzKropke(kropka);
 6e8:	8c 2f       	mov	r24, r28
 6ea:	8b dd       	rcall	.-1258   	; 0x202 <obsluzKropke>
		KATODY_PORT=KATODA_4;
 6ec:	88 e0       	ldi	r24, 0x08	; 8
 6ee:	88 bb       	out	0x18, r24	; 24
		
		default:
		/* Your code here */
		break;
	}
}
 6f0:	cf 91       	pop	r28
 6f2:	08 95       	ret

000006f4 <multipleks_init>:
void multipleks_init( void )	{
		SEGMENTY_DDR = 0xff;
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	81 bb       	out	0x11, r24	; 17
		SEGMENTY_PORT = 0xff;
 6f8:	82 bb       	out	0x12, r24	; 18

		KATODY_DDR |= KATODA_1 | KATODA_2 | KATODA_3 | KATODA_4;
 6fa:	97 b3       	in	r25, 0x17	; 23
 6fc:	9f 60       	ori	r25, 0x0F	; 15
 6fe:	97 bb       	out	0x17, r25	; 23
		KATODY_PORT = 0x00;
 700:	18 ba       	out	0x18, r1	; 24
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	39 e6       	ldi	r19, 0x69	; 105
 706:	98 e1       	ldi	r25, 0x18	; 24
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	30 40       	sbci	r19, 0x00	; 0
 70c:	90 40       	sbci	r25, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <multipleks_init+0x14>
 710:	00 c0       	rjmp	.+0      	; 0x712 <multipleks_init+0x1e>
 712:	00 00       	nop

		_delay_ms (1000);
		KATODY_PORT = 0xff;
 714:	88 bb       	out	0x18, r24	; 24
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	39 e6       	ldi	r19, 0x69	; 105
 71a:	88 e1       	ldi	r24, 0x18	; 24
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	30 40       	sbci	r19, 0x00	; 0
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <multipleks_init+0x28>
 724:	00 c0       	rjmp	.+0      	; 0x726 <multipleks_init+0x32>
 726:	00 00       	nop
		_delay_ms (1000);
		KATODY_PORT = 0x00;
 728:	18 ba       	out	0x18, r1	; 24
 72a:	9f ef       	ldi	r25, 0xFF	; 255
 72c:	29 e6       	ldi	r18, 0x69	; 105
 72e:	38 e1       	ldi	r19, 0x18	; 24
 730:	91 50       	subi	r25, 0x01	; 1
 732:	20 40       	sbci	r18, 0x00	; 0
 734:	30 40       	sbci	r19, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <multipleks_init+0x3c>
 738:	00 c0       	rjmp	.+0      	; 0x73a <multipleks_init+0x46>
 73a:	00 00       	nop
		_delay_ms (1000);
		SEGMENTY_PORT = 0;
 73c:	12 ba       	out	0x12, r1	; 18

		TCCR2 |= (1<<WGM21);
 73e:	85 b5       	in	r24, 0x25	; 37
 740:	88 60       	ori	r24, 0x08	; 8
 742:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= (1<<CS22)|(1<<CS21);
 744:	85 b5       	in	r24, 0x25	; 37
 746:	86 60       	ori	r24, 0x06	; 6
 748:	85 bd       	out	0x25, r24	; 37
		OCR2 = 155;
 74a:	8b e9       	ldi	r24, 0x9B	; 155
 74c:	83 bd       	out	0x23, r24	; 35
		TIMSK |= (1<<OCIE2);
 74e:	89 b7       	in	r24, 0x39	; 57
 750:	80 68       	ori	r24, 0x80	; 128
 752:	89 bf       	out	0x39, r24	; 57
 754:	08 95       	ret

00000756 <__vector_3>:
}

ISR(	TIMER2_COMP_vect	) {
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	ef 93       	push	r30
 776:	ff 93       	push	r31

	//static uint8_t licznik;

switch (numerZnaku)
 778:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 77c:	82 30       	cpi	r24, 0x02	; 2
 77e:	89 f0       	breq	.+34     	; 0x7a2 <__vector_3+0x4c>
 780:	18 f4       	brcc	.+6      	; 0x788 <__vector_3+0x32>
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	31 f0       	breq	.+12     	; 0x792 <__vector_3+0x3c>
 786:	24 c0       	rjmp	.+72     	; 0x7d0 <__vector_3+0x7a>
 788:	83 30       	cpi	r24, 0x03	; 3
 78a:	99 f0       	breq	.+38     	; 0x7b2 <__vector_3+0x5c>
 78c:	84 30       	cpi	r24, 0x04	; 4
 78e:	c9 f0       	breq	.+50     	; 0x7c2 <__vector_3+0x6c>
 790:	1f c0       	rjmp	.+62     	; 0x7d0 <__vector_3+0x7a>
{
	case 1:
	wyswietl(numerZnaku,Wyswietlacz.z1, Wyswietlacz.k1);
 792:	e0 ee       	ldi	r30, 0xE0	; 224
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	60 81       	ld	r22, Z
 798:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 79c:	40 85       	ldd	r20, Z+8	; 0x08
 79e:	7b df       	rcall	.-266    	; 0x696 <wyswietl>
	break;
 7a0:	17 c0       	rjmp	.+46     	; 0x7d0 <__vector_3+0x7a>
		case 2:
		wyswietl(numerZnaku,Wyswietlacz.z2, Wyswietlacz.k2);
 7a2:	e0 ee       	ldi	r30, 0xE0	; 224
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	62 81       	ldd	r22, Z+2	; 0x02
 7a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7ac:	41 85       	ldd	r20, Z+9	; 0x09
 7ae:	73 df       	rcall	.-282    	; 0x696 <wyswietl>
		break;
 7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <__vector_3+0x7a>
			case 3:
			wyswietl(numerZnaku,Wyswietlacz.z3, Wyswietlacz.k3);
 7b2:	e0 ee       	ldi	r30, 0xE0	; 224
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	64 81       	ldd	r22, Z+4	; 0x04
 7b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7bc:	42 85       	ldd	r20, Z+10	; 0x0a
 7be:	6b df       	rcall	.-298    	; 0x696 <wyswietl>
			break;
 7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <__vector_3+0x7a>
				case 4:
				wyswietl(numerZnaku,Wyswietlacz.z4, Wyswietlacz.k4);
 7c2:	e0 ee       	ldi	r30, 0xE0	; 224
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	66 81       	ldd	r22, Z+6	; 0x06
 7c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7cc:	43 85       	ldd	r20, Z+11	; 0x0b
 7ce:	63 df       	rcall	.-314    	; 0x696 <wyswietl>
	/* Your code here */
	break;
}
	

	numerZnaku++;
 7d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if( numerZnaku > 4 ) numerZnaku = 1;
 7da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7de:	85 30       	cpi	r24, 0x05	; 5
 7e0:	18 f0       	brcs	.+6      	; 0x7e8 <__vector_3+0x92>
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
   


}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <MinutnikPrzyciskRozpoczynajacyOdliczanie>:
uint16_t licznikMinutnikaStartowy = 0;
uint8_t flagaMinutnika = 0;

void MinutnikPrzyciskRozpoczynajacyOdliczanie()
{
	if(!(PINC & (1<<PINC3)))
 80a:	9b 99       	sbic	0x13, 3	; 19
 80c:	05 c0       	rjmp	.+10     	; 0x818 <MinutnikPrzyciskRozpoczynajacyOdliczanie+0xe>
	{
		while(!(PINC & (1<<PINC3))){}
 80e:	9b 9b       	sbis	0x13, 3	; 19
 810:	fe cf       	rjmp	.-4      	; 0x80e <MinutnikPrzyciskRozpoczynajacyOdliczanie+0x4>
		flagaMinutnika=1;
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flagaMinutnika>
 818:	08 95       	ret

0000081a <MinutnikWyzerowanie>:
	}
}

void MinutnikWyzerowanie()
{
	if(!(PINB & (1<<PINB4)))
 81a:	b4 99       	sbic	0x16, 4	; 22
 81c:	0b c0       	rjmp	.+22     	; 0x834 <MinutnikWyzerowanie+0x1a>
	{
		while(!(PINB & (1<<PINB4))){}
 81e:	b4 9b       	sbis	0x16, 4	; 22
 820:	fe cf       	rjmp	.-4      	; 0x81e <MinutnikWyzerowanie+0x4>
		licznikMinutnikaStartowy=licznikMinutnika;
 822:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <licznikMinutnika>
 826:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <licznikMinutnika+0x1>
 82a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <licznikMinutnikaStartowy+0x1>
 82e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <licznikMinutnikaStartowy>
		uruchomLicznikCzasu();
 832:	2b dd       	rcall	.-1450   	; 0x28a <uruchomLicznikCzasu>
 834:	08 95       	ret

00000836 <MinutnikZmianaWartosciWGore>:
	}
}

void MinutnikZmianaWartosciWGore()
{
	if(!(PINB & (1<<PINB4)))
 836:	b4 99       	sbic	0x16, 4	; 22
 838:	14 c0       	rjmp	.+40     	; 0x862 <MinutnikZmianaWartosciWGore+0x2c>
 83a:	2f ef       	ldi	r18, 0xFF	; 255
 83c:	80 e7       	ldi	r24, 0x70	; 112
 83e:	92 e0       	ldi	r25, 0x02	; 2
 840:	21 50       	subi	r18, 0x01	; 1
 842:	80 40       	sbci	r24, 0x00	; 0
 844:	90 40       	sbci	r25, 0x00	; 0
 846:	e1 f7       	brne	.-8      	; 0x840 <MinutnikZmianaWartosciWGore+0xa>
 848:	00 c0       	rjmp	.+0      	; 0x84a <MinutnikZmianaWartosciWGore+0x14>
 84a:	00 00       	nop
	{
		_delay_ms(100);
		
		if(!(PINB & (1<<PINB4))) licznikMinutnika++;
 84c:	b4 99       	sbic	0x16, 4	; 22
 84e:	09 c0       	rjmp	.+18     	; 0x862 <MinutnikZmianaWartosciWGore+0x2c>
 850:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <licznikMinutnika>
 854:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <licznikMinutnika+0x1>
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <licznikMinutnika+0x1>
 85e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <licznikMinutnika>
 862:	08 95       	ret

00000864 <P1_init>:
#include "main.h"
#include "LED.h"
#include "Stoper.h"
void P1_init()
{
	P1_DDR&=~(1<<P1_PIN);
 864:	87 b3       	in	r24, 0x17	; 23
 866:	8f 7d       	andi	r24, 0xDF	; 223
 868:	87 bb       	out	0x17, r24	; 23
	P1_PORT|=(1<<P1_PIN);
 86a:	88 b3       	in	r24, 0x18	; 24
 86c:	80 62       	ori	r24, 0x20	; 32
 86e:	88 bb       	out	0x18, r24	; 24
 870:	08 95       	ret

00000872 <P2_init>:



void P2_init()
{
	P2_DDR&=~(1<<P2_PIN);
 872:	87 b3       	in	r24, 0x17	; 23
 874:	8f 7e       	andi	r24, 0xEF	; 239
 876:	87 bb       	out	0x17, r24	; 23
	P2_PORT|=(1<<P2_PIN);
 878:	88 b3       	in	r24, 0x18	; 24
 87a:	80 61       	ori	r24, 0x10	; 16
 87c:	88 bb       	out	0x18, r24	; 24
 87e:	08 95       	ret

00000880 <P3_init>:



void P3_init()
{
	P3_DDR&=~(1<<P3_PIN);
 880:	84 b3       	in	r24, 0x14	; 20
 882:	8b 7f       	andi	r24, 0xFB	; 251
 884:	84 bb       	out	0x14, r24	; 20
	P3_PORT|=(1<<P3_PIN);
 886:	85 b3       	in	r24, 0x15	; 21
 888:	84 60       	ori	r24, 0x04	; 4
 88a:	85 bb       	out	0x15, r24	; 21
 88c:	08 95       	ret

0000088e <P4_init>:



void P4_init()
{
	P4_DDR&=~(1<<P4_PIN);
 88e:	84 b3       	in	r24, 0x14	; 20
 890:	87 7f       	andi	r24, 0xF7	; 247
 892:	84 bb       	out	0x14, r24	; 20
	P4_PORT|=(1<<P4_PIN);
 894:	85 b3       	in	r24, 0x15	; 21
 896:	88 60       	ori	r24, 0x08	; 8
 898:	85 bb       	out	0x15, r24	; 21
 89a:	08 95       	ret

0000089c <ObsluzPrzyciskZmianyTrybu>:


void ObsluzPrzyciskZmianyTrybu()
{
	
	if(P3_STAN)
 89c:	9a 99       	sbic	0x13, 2	; 19
 89e:	19 c0       	rjmp	.+50     	; 0x8d2 <ObsluzPrzyciskZmianyTrybu+0x36>
	{
		LEDSet(true, LED2_PIN);
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	b7 dc       	rcall	.-1682   	; 0x216 <LEDSet>
		zmianaTrybuLed();
 8a8:	d0 dc       	rcall	.-1632   	; 0x24a <zmianaTrybuLed>
		tryb++;
 8aa:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <tryb>
 8ae:	8f 5f       	subi	r24, 0xFF	; 255
 8b0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <tryb>
		
		flagaZatrzymania = 1;
 8b4:	91 e0       	ldi	r25, 0x01	; 1
 8b6:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <flagaZatrzymania>
		licznikStopera = 0;
 8ba:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <licznikStopera+0x1>
 8be:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <licznikStopera>
		
		
		if(tryb == 3)
 8c2:	83 30       	cpi	r24, 0x03	; 3
 8c4:	11 f4       	brne	.+4      	; 0x8ca <ObsluzPrzyciskZmianyTrybu+0x2e>
		tryb = 0;
 8c6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <tryb>
		LEDSet(false, LED2_PIN);
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	a2 dc       	rcall	.-1724   	; 0x216 <LEDSet>
 8d2:	08 95       	ret

000008d4 <bcd2dec>:
		_tm.twelveHour = _tm.hour - 12;
		_tm.am = 0;
	}

	return &_tm;
}
 8d4:	98 2f       	mov	r25, r24
 8d6:	92 95       	swap	r25
 8d8:	9f 70       	andi	r25, 0x0F	; 15
 8da:	99 0f       	add	r25, r25
 8dc:	29 2f       	mov	r18, r25
 8de:	22 0f       	add	r18, r18
 8e0:	22 0f       	add	r18, r18
 8e2:	92 0f       	add	r25, r18
 8e4:	8f 70       	andi	r24, 0x0F	; 15
 8e6:	89 0f       	add	r24, r25
 8e8:	08 95       	ret

000008ea <rtc_get_time_s>:

void rtc_get_time_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
{
 8ea:	8f 92       	push	r8
 8ec:	9f 92       	push	r9
 8ee:	af 92       	push	r10
 8f0:	bf 92       	push	r11
 8f2:	cf 92       	push	r12
 8f4:	df 92       	push	r13
 8f6:	ef 92       	push	r14
 8f8:	ff 92       	push	r15
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
 904:	29 97       	sbiw	r28, 0x09	; 9
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
 910:	6c 01       	movw	r12, r24
 912:	5b 01       	movw	r10, r22
 914:	4a 01       	movw	r8, r20
	uint8_t rtc[9];

	// read 7 bytes starting from register 0
	// sec, min, hour, day-of-week, date, month, year
	twi_begin_transmission(RTC_ADDR);
 916:	88 e6       	ldi	r24, 0x68	; 104
 918:	fa d1       	rcall	.+1012   	; 0xd0e <twi_begin_transmission>
	twi_send_byte(0x0);
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	11 d2       	rcall	.+1058   	; 0xd40 <twi_send_byte>
	twi_end_transmission();
 91e:	01 d2       	rcall	.+1026   	; 0xd22 <twi_end_transmission>
	
	twi_request_from(RTC_ADDR, 7);
 920:	67 e0       	ldi	r22, 0x07	; 7
 922:	88 e6       	ldi	r24, 0x68	; 104
 924:	e8 d1       	rcall	.+976    	; 0xcf6 <twi_request_from>
	
	for(uint8_t i=0; i<7; i++) {
 926:	10 e0       	ldi	r17, 0x00	; 0
 928:	0b c0       	rjmp	.+22     	; 0x940 <rtc_get_time_s+0x56>
		rtc[i] = twi_receive();
 92a:	e1 2e       	mov	r14, r17
 92c:	f1 2c       	mov	r15, r1
 92e:	2c d2       	rcall	.+1112   	; 0xd88 <twi_receive>
 930:	e1 e0       	ldi	r30, 0x01	; 1
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	ec 0f       	add	r30, r28
 936:	fd 1f       	adc	r31, r29
 938:	ee 0d       	add	r30, r14
 93a:	ff 1d       	adc	r31, r15
 93c:	80 83       	st	Z, r24
	twi_send_byte(0x0);
	twi_end_transmission();
	
	twi_request_from(RTC_ADDR, 7);
	
	for(uint8_t i=0; i<7; i++) {
 93e:	1f 5f       	subi	r17, 0xFF	; 255
 940:	17 30       	cpi	r17, 0x07	; 7
 942:	98 f3       	brcs	.-26     	; 0x92a <rtc_get_time_s+0x40>
		rtc[i] = twi_receive();
	}
	
	twi_end_transmission();
 944:	ee d1       	rcall	.+988    	; 0xd22 <twi_end_transmission>
	
	if (sec)  *sec =  bcd2dec(rtc[0]);
 946:	81 14       	cp	r8, r1
 948:	91 04       	cpc	r9, r1
 94a:	21 f0       	breq	.+8      	; 0x954 <rtc_get_time_s+0x6a>
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	c2 df       	rcall	.-124    	; 0x8d4 <bcd2dec>
 950:	f4 01       	movw	r30, r8
 952:	80 83       	st	Z, r24
	if (min)  *min =  bcd2dec(rtc[1]);
 954:	a1 14       	cp	r10, r1
 956:	b1 04       	cpc	r11, r1
 958:	21 f0       	breq	.+8      	; 0x962 <rtc_get_time_s+0x78>
 95a:	8a 81       	ldd	r24, Y+2	; 0x02
 95c:	bb df       	rcall	.-138    	; 0x8d4 <bcd2dec>
 95e:	f5 01       	movw	r30, r10
 960:	80 83       	st	Z, r24
	if (hour) *hour = bcd2dec(rtc[2]);
 962:	c1 14       	cp	r12, r1
 964:	d1 04       	cpc	r13, r1
 966:	21 f0       	breq	.+8      	; 0x970 <rtc_get_time_s+0x86>
 968:	8b 81       	ldd	r24, Y+3	; 0x03
 96a:	b4 df       	rcall	.-152    	; 0x8d4 <bcd2dec>
 96c:	f6 01       	movw	r30, r12
 96e:	80 83       	st	Z, r24
}
 970:	29 96       	adiw	r28, 0x09	; 9
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	1f 91       	pop	r17
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	df 90       	pop	r13
 988:	cf 90       	pop	r12
 98a:	bf 90       	pop	r11
 98c:	af 90       	pop	r10
 98e:	9f 90       	pop	r9
 990:	8f 90       	pop	r8
 992:	08 95       	ret

00000994 <twi_init>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
 994:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
 998:	82 b3       	in	r24, 0x12	; 18
 99a:	81 60       	ori	r24, 0x01	; 1
 99c:	82 bb       	out	0x12, r24	; 18
 99e:	82 b3       	in	r24, 0x12	; 18
 9a0:	82 60       	ori	r24, 0x02	; 2
 9a2:	82 bb       	out	0x12, r24	; 18
 9a4:	81 b1       	in	r24, 0x01	; 1
 9a6:	8e 7f       	andi	r24, 0xFE	; 254
 9a8:	81 b9       	out	0x01, r24	; 1
 9aa:	81 b1       	in	r24, 0x01	; 1
 9ac:	8d 7f       	andi	r24, 0xFD	; 253
 9ae:	81 b9       	out	0x01, r24	; 1
 9b0:	84 e2       	ldi	r24, 0x24	; 36
 9b2:	80 b9       	out	0x00, r24	; 0
 9b4:	85 e4       	ldi	r24, 0x45	; 69
 9b6:	86 bf       	out	0x36, r24	; 54
 9b8:	08 95       	ret

000009ba <twi_readFrom>:
 9ba:	41 32       	cpi	r20, 0x21	; 33
 9bc:	90 f5       	brcc	.+100    	; 0xa22 <twi_readFrom+0x68>
 9be:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <twi_state>
 9c2:	91 11       	cpse	r25, r1
 9c4:	fc cf       	rjmp	.-8      	; 0x9be <twi_readFrom+0x4>
 9c6:	91 e0       	ldi	r25, 0x01	; 1
 9c8:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <twi_state>
 9cc:	9f ef       	ldi	r25, 0xFF	; 255
 9ce:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <twi_error>
 9d2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <twi_masterBufferIndex>
 9d6:	94 0f       	add	r25, r20
 9d8:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <twi_masterBufferLength>
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	81 60       	ori	r24, 0x01	; 1
 9e4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <twi_slarw>
 9e8:	85 ee       	ldi	r24, 0xE5	; 229
 9ea:	86 bf       	out	0x36, r24	; 54
 9ec:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <twi_state>
 9f0:	81 30       	cpi	r24, 0x01	; 1
 9f2:	e1 f3       	breq	.-8      	; 0x9ec <twi_readFrom+0x32>
 9f4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 9f8:	84 17       	cp	r24, r20
 9fa:	10 f4       	brcc	.+4      	; 0xa00 <twi_readFrom+0x46>
 9fc:	40 91 b3 00 	lds	r20, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0b c0       	rjmp	.+22     	; 0xa1a <twi_readFrom+0x60>
 a04:	29 2f       	mov	r18, r25
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	fb 01       	movw	r30, r22
 a0a:	e2 0f       	add	r30, r18
 a0c:	f3 1f       	adc	r31, r19
 a0e:	d9 01       	movw	r26, r18
 a10:	ac 54       	subi	r26, 0x4C	; 76
 a12:	bf 4f       	sbci	r27, 0xFF	; 255
 a14:	2c 91       	ld	r18, X
 a16:	20 83       	st	Z, r18
 a18:	9f 5f       	subi	r25, 0xFF	; 255
 a1a:	94 17       	cp	r25, r20
 a1c:	98 f3       	brcs	.-26     	; 0xa04 <twi_readFrom+0x4a>
 a1e:	84 2f       	mov	r24, r20
 a20:	08 95       	ret
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	08 95       	ret

00000a26 <twi_writeTo>:
 a26:	41 32       	cpi	r20, 0x21	; 33
 a28:	b8 f5       	brcc	.+110    	; 0xa98 <twi_writeTo+0x72>
 a2a:	50 91 d9 00 	lds	r21, 0x00D9	; 0x8000d9 <twi_state>
 a2e:	51 11       	cpse	r21, r1
 a30:	fc cf       	rjmp	.-8      	; 0xa2a <twi_writeTo+0x4>
 a32:	92 e0       	ldi	r25, 0x02	; 2
 a34:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <twi_state>
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <twi_error>
 a3e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <twi_masterBufferIndex>
 a42:	40 93 b2 00 	sts	0x00B2, r20	; 0x8000b2 <twi_masterBufferLength>
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0a c0       	rjmp	.+20     	; 0xa5e <twi_writeTo+0x38>
 a4a:	e9 2f       	mov	r30, r25
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	db 01       	movw	r26, r22
 a50:	ae 0f       	add	r26, r30
 a52:	bf 1f       	adc	r27, r31
 a54:	3c 91       	ld	r19, X
 a56:	ec 54       	subi	r30, 0x4C	; 76
 a58:	ff 4f       	sbci	r31, 0xFF	; 255
 a5a:	30 83       	st	Z, r19
 a5c:	9f 5f       	subi	r25, 0xFF	; 255
 a5e:	94 17       	cp	r25, r20
 a60:	a0 f3       	brcs	.-24     	; 0xa4a <twi_writeTo+0x24>
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	88 0f       	add	r24, r24
 a66:	99 1f       	adc	r25, r25
 a68:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <twi_slarw>
 a6c:	85 ee       	ldi	r24, 0xE5	; 229
 a6e:	86 bf       	out	0x36, r24	; 54
 a70:	22 23       	and	r18, r18
 a72:	21 f0       	breq	.+8      	; 0xa7c <twi_writeTo+0x56>
 a74:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <twi_state>
 a78:	82 30       	cpi	r24, 0x02	; 2
 a7a:	d1 f3       	breq	.-12     	; 0xa70 <twi_writeTo+0x4a>
 a7c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <twi_error>
 a80:	8f 3f       	cpi	r24, 0xFF	; 255
 a82:	79 f0       	breq	.+30     	; 0xaa2 <twi_writeTo+0x7c>
 a84:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <twi_error>
 a88:	80 32       	cpi	r24, 0x20	; 32
 a8a:	41 f0       	breq	.+16     	; 0xa9c <twi_writeTo+0x76>
 a8c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <twi_error>
 a90:	80 33       	cpi	r24, 0x30	; 48
 a92:	31 f4       	brne	.+12     	; 0xaa0 <twi_writeTo+0x7a>
 a94:	53 e0       	ldi	r21, 0x03	; 3
 a96:	05 c0       	rjmp	.+10     	; 0xaa2 <twi_writeTo+0x7c>
 a98:	51 e0       	ldi	r21, 0x01	; 1
 a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <twi_writeTo+0x7c>
 a9c:	52 e0       	ldi	r21, 0x02	; 2
 a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <twi_writeTo+0x7c>
 aa0:	54 e0       	ldi	r21, 0x04	; 4
 aa2:	85 2f       	mov	r24, r21
 aa4:	08 95       	ret

00000aa6 <twi_transmit>:
 aa6:	dc 01       	movw	r26, r24
 aa8:	61 32       	cpi	r22, 0x21	; 33
 aaa:	b8 f4       	brcc	.+46     	; 0xada <twi_transmit+0x34>
 aac:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <twi_state>
 ab0:	84 30       	cpi	r24, 0x04	; 4
 ab2:	a9 f4       	brne	.+42     	; 0xade <twi_transmit+0x38>
 ab4:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <twi_txBufferLength>
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0b c0       	rjmp	.+22     	; 0xad2 <twi_transmit+0x2c>
 abc:	29 2f       	mov	r18, r25
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	fd 01       	movw	r30, r26
 ac2:	e2 0f       	add	r30, r18
 ac4:	f3 1f       	adc	r31, r19
 ac6:	40 81       	ld	r20, Z
 ac8:	f9 01       	movw	r30, r18
 aca:	ee 56       	subi	r30, 0x6E	; 110
 acc:	ff 4f       	sbci	r31, 0xFF	; 255
 ace:	40 83       	st	Z, r20
 ad0:	9f 5f       	subi	r25, 0xFF	; 255
 ad2:	96 17       	cp	r25, r22
 ad4:	98 f3       	brcs	.-26     	; 0xabc <twi_transmit+0x16>
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	08 95       	ret
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	08 95       	ret
 ade:	82 e0       	ldi	r24, 0x02	; 2
 ae0:	08 95       	ret

00000ae2 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
 ae2:	88 23       	and	r24, r24
 ae4:	19 f0       	breq	.+6      	; 0xaec <twi_reply+0xa>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 ae6:	85 ec       	ldi	r24, 0xC5	; 197
 ae8:	86 bf       	out	0x36, r24	; 54
 aea:	08 95       	ret
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 aec:	85 e8       	ldi	r24, 0x85	; 133
 aee:	86 bf       	out	0x36, r24	; 54
 af0:	08 95       	ret

00000af2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 af2:	85 ed       	ldi	r24, 0xD5	; 213
 af4:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 af6:	06 b6       	in	r0, 0x36	; 54
 af8:	04 fc       	sbrc	r0, 4
 afa:	fd cf       	rjmp	.-6      	; 0xaf6 <twi_stop+0x4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 afc:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
 b00:	08 95       	ret

00000b02 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 b02:	85 ec       	ldi	r24, 0xC5	; 197
 b04:	86 bf       	out	0x36, r24	; 54

  // update twi state
  twi_state = TWI_READY;
 b06:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
 b0a:	08 95       	ret

00000b0c <__vector_17>:
}

SIGNAL(TWI_vect)
{
 b0c:	1f 92       	push	r1
 b0e:	0f 92       	push	r0
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	2f 93       	push	r18
 b18:	3f 93       	push	r19
 b1a:	4f 93       	push	r20
 b1c:	5f 93       	push	r21
 b1e:	6f 93       	push	r22
 b20:	7f 93       	push	r23
 b22:	8f 93       	push	r24
 b24:	9f 93       	push	r25
 b26:	af 93       	push	r26
 b28:	bf 93       	push	r27
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31
  switch(TW_STATUS){
 b2e:	81 b1       	in	r24, 0x01	; 1
 b30:	e8 2f       	mov	r30, r24
 b32:	e8 7f       	andi	r30, 0xF8	; 248
 b34:	8e 2f       	mov	r24, r30
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	89 3c       	cpi	r24, 0xC9	; 201
 b3a:	91 05       	cpc	r25, r1
 b3c:	08 f0       	brcs	.+2      	; 0xb40 <__vector_17+0x34>
 b3e:	c0 c0       	rjmp	.+384    	; 0xcc0 <__vector_17+0x1b4>
 b40:	fc 01       	movw	r30, r24
 b42:	e4 5e       	subi	r30, 0xE4	; 228
 b44:	ff 4f       	sbci	r31, 0xFF	; 255
 b46:	09 94       	ijmp
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 b48:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <twi_slarw>
 b4c:	83 b9       	out	0x03, r24	; 3
      twi_reply(1);
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	c8 df       	rcall	.-112    	; 0xae2 <twi_reply>
      break;
 b52:	b6 c0       	rjmp	.+364    	; 0xcc0 <__vector_17+0x1b4>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 b54:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 b58:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <twi_masterBufferLength>
 b5c:	98 17       	cp	r25, r24
 b5e:	70 f4       	brcc	.+28     	; 0xb7c <__vector_17+0x70>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 b60:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	8e 0f       	add	r24, r30
 b68:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <twi_masterBufferIndex>
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	ec 54       	subi	r30, 0x4C	; 76
 b70:	ff 4f       	sbci	r31, 0xFF	; 255
 b72:	80 81       	ld	r24, Z
 b74:	83 b9       	out	0x03, r24	; 3
        twi_reply(1);
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	b4 df       	rcall	.-152    	; 0xae2 <twi_reply>
 b7a:	a2 c0       	rjmp	.+324    	; 0xcc0 <__vector_17+0x1b4>
      }else{
        twi_stop();
 b7c:	ba df       	rcall	.-140    	; 0xaf2 <twi_stop>
 b7e:	a0 c0       	rjmp	.+320    	; 0xcc0 <__vector_17+0x1b4>
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <twi_error>
      twi_stop();
 b86:	b5 df       	rcall	.-150    	; 0xaf2 <twi_stop>
      break;
 b88:	9b c0       	rjmp	.+310    	; 0xcc0 <__vector_17+0x1b4>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 b8a:	80 e3       	ldi	r24, 0x30	; 48
 b8c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <twi_error>
      twi_stop();
 b90:	b0 df       	rcall	.-160    	; 0xaf2 <twi_stop>
      break;
 b92:	96 c0       	rjmp	.+300    	; 0xcc0 <__vector_17+0x1b4>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 b94:	88 e3       	ldi	r24, 0x38	; 56
 b96:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <twi_error>
      twi_releaseBus();
 b9a:	b3 df       	rcall	.-154    	; 0xb02 <twi_releaseBus>
      break;
 b9c:	91 c0       	rjmp	.+290    	; 0xcc0 <__vector_17+0x1b4>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 b9e:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	8e 0f       	add	r24, r30
 ba6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <twi_masterBufferIndex>
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	83 b1       	in	r24, 0x03	; 3
 bae:	ec 54       	subi	r30, 0x4C	; 76
 bb0:	ff 4f       	sbci	r31, 0xFF	; 255
 bb2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 bb4:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 bb8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <twi_masterBufferLength>
 bbc:	98 17       	cp	r25, r24
 bbe:	18 f4       	brcc	.+6      	; 0xbc6 <__vector_17+0xba>
        twi_reply(1);
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	8f df       	rcall	.-226    	; 0xae2 <twi_reply>
 bc4:	7d c0       	rjmp	.+250    	; 0xcc0 <__vector_17+0x1b4>
      }else{
        twi_reply(0);
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	8c df       	rcall	.-232    	; 0xae2 <twi_reply>
 bca:	7a c0       	rjmp	.+244    	; 0xcc0 <__vector_17+0x1b4>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 bcc:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	8e 0f       	add	r24, r30
 bd4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <twi_masterBufferIndex>
 bd8:	f0 e0       	ldi	r31, 0x00	; 0
 bda:	83 b1       	in	r24, 0x03	; 3
 bdc:	ec 54       	subi	r30, 0x4C	; 76
 bde:	ff 4f       	sbci	r31, 0xFF	; 255
 be0:	80 83       	st	Z, r24
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 be2:	87 df       	rcall	.-242    	; 0xaf2 <twi_stop>
      break;
 be4:	6d c0       	rjmp	.+218    	; 0xcc0 <__vector_17+0x1b4>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 be6:	83 e0       	ldi	r24, 0x03	; 3
 be8:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 bec:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <twi_rxBufferIndex>
      twi_reply(1);
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	77 df       	rcall	.-274    	; 0xae2 <twi_reply>
      break;
 bf4:	65 c0       	rjmp	.+202    	; 0xcc0 <__vector_17+0x1b4>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 bf6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <twi_rxBufferIndex>
 bfa:	80 32       	cpi	r24, 0x20	; 32
 bfc:	70 f4       	brcc	.+28     	; 0xc1a <__vector_17+0x10e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 bfe:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <twi_rxBufferIndex>
 c02:	81 e0       	ldi	r24, 0x01	; 1
 c04:	8e 0f       	add	r24, r30
 c06:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <twi_rxBufferIndex>
 c0a:	f0 e0       	ldi	r31, 0x00	; 0
 c0c:	83 b1       	in	r24, 0x03	; 3
 c0e:	e0 59       	subi	r30, 0x90	; 144
 c10:	ff 4f       	sbci	r31, 0xFF	; 255
 c12:	80 83       	st	Z, r24
        twi_reply(1);
 c14:	81 e0       	ldi	r24, 0x01	; 1
 c16:	65 df       	rcall	.-310    	; 0xae2 <twi_reply>
 c18:	53 c0       	rjmp	.+166    	; 0xcc0 <__vector_17+0x1b4>
      }else{
        // otherwise nack
        twi_reply(0);
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	62 df       	rcall	.-316    	; 0xae2 <twi_reply>
 c1e:	50 c0       	rjmp	.+160    	; 0xcc0 <__vector_17+0x1b4>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 c20:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <twi_rxBufferIndex>
 c24:	80 32       	cpi	r24, 0x20	; 32
 c26:	30 f4       	brcc	.+12     	; 0xc34 <__vector_17+0x128>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 c28:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <twi_rxBufferIndex>
 c2c:	f0 e0       	ldi	r31, 0x00	; 0
 c2e:	e0 59       	subi	r30, 0x90	; 144
 c30:	ff 4f       	sbci	r31, 0xFF	; 255
 c32:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
 c34:	5e df       	rcall	.-324    	; 0xaf2 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 c36:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <twi_rxBufferIndex>
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <twi_onSlaveReceive>
 c40:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <twi_onSlaveReceive+0x1>
 c44:	80 e7       	ldi	r24, 0x70	; 112
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 c4a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 c4e:	59 df       	rcall	.-334    	; 0xb02 <twi_releaseBus>
      break;
 c50:	37 c0       	rjmp	.+110    	; 0xcc0 <__vector_17+0x1b4>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	46 df       	rcall	.-372    	; 0xae2 <twi_reply>
      break;
 c56:	34 c0       	rjmp	.+104    	; 0xcc0 <__vector_17+0x1b4>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 c58:	84 e0       	ldi	r24, 0x04	; 4
 c5a:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 c5e:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 c62:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 c66:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <twi_onSlaveTransmit>
 c6a:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <twi_onSlaveTransmit+0x1>
 c6e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 c70:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <twi_txBufferLength>
 c74:	81 11       	cpse	r24, r1
 c76:	05 c0       	rjmp	.+10     	; 0xc82 <__vector_17+0x176>
        twi_txBufferLength = 1;
 c78:	81 e0       	ldi	r24, 0x01	; 1
 c7a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 c7e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 c82:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <twi_txBufferIndex>
 c86:	81 e0       	ldi	r24, 0x01	; 1
 c88:	8e 0f       	add	r24, r30
 c8a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <twi_txBufferIndex>
 c8e:	f0 e0       	ldi	r31, 0x00	; 0
 c90:	ee 56       	subi	r30, 0x6E	; 110
 c92:	ff 4f       	sbci	r31, 0xFF	; 255
 c94:	80 81       	ld	r24, Z
 c96:	83 b9       	out	0x03, r24	; 3
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 c98:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <twi_txBufferIndex>
 c9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <twi_txBufferLength>
 ca0:	98 17       	cp	r25, r24
 ca2:	18 f4       	brcc	.+6      	; 0xcaa <__vector_17+0x19e>
        twi_reply(1);
 ca4:	81 e0       	ldi	r24, 0x01	; 1
 ca6:	1d df       	rcall	.-454    	; 0xae2 <twi_reply>
 ca8:	0b c0       	rjmp	.+22     	; 0xcc0 <__vector_17+0x1b4>
      }else{
        twi_reply(0);
 caa:	80 e0       	ldi	r24, 0x00	; 0
 cac:	1a df       	rcall	.-460    	; 0xae2 <twi_reply>
 cae:	08 c0       	rjmp	.+16     	; 0xcc0 <__vector_17+0x1b4>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
 cb0:	81 e0       	ldi	r24, 0x01	; 1
 cb2:	17 df       	rcall	.-466    	; 0xae2 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
 cb4:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
      break;
 cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <__vector_17+0x1b4>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 cba:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <twi_error>
      twi_stop();
 cbe:	19 df       	rcall	.-462    	; 0xaf2 <twi_stop>
      break;
  }
}
 cc0:	ff 91       	pop	r31
 cc2:	ef 91       	pop	r30
 cc4:	bf 91       	pop	r27
 cc6:	af 91       	pop	r26
 cc8:	9f 91       	pop	r25
 cca:	8f 91       	pop	r24
 ccc:	7f 91       	pop	r23
 cce:	6f 91       	pop	r22
 cd0:	5f 91       	pop	r21
 cd2:	4f 91       	pop	r20
 cd4:	3f 91       	pop	r19
 cd6:	2f 91       	pop	r18
 cd8:	0f 90       	pop	r0
 cda:	0f be       	out	0x3f, r0	; 63
 cdc:	0f 90       	pop	r0
 cde:	1f 90       	pop	r1
 ce0:	18 95       	reti

00000ce2 <twi_init_master>:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t twi_available(void)
{
  return rxBufferLength - rxBufferIndex;
}
 ce2:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <rxBufferIndex>
 ce6:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <rxBufferLength>
 cea:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txBufferIndex>
 cee:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txBufferLength>
 cf2:	50 de       	rcall	.-864    	; 0x994 <twi_init>
 cf4:	08 95       	ret

00000cf6 <twi_request_from>:
 cf6:	46 2f       	mov	r20, r22
 cf8:	61 32       	cpi	r22, 0x21	; 33
 cfa:	08 f0       	brcs	.+2      	; 0xcfe <twi_request_from+0x8>
 cfc:	40 e2       	ldi	r20, 0x20	; 32
 cfe:	6f ee       	ldi	r22, 0xEF	; 239
 d00:	70 e0       	ldi	r23, 0x00	; 0
 d02:	5b de       	rcall	.-842    	; 0x9ba <twi_readFrom>
 d04:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <rxBufferIndex>
 d08:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <rxBufferLength>
 d0c:	08 95       	ret

00000d0e <twi_begin_transmission>:
 d0e:	91 e0       	ldi	r25, 0x01	; 1
 d10:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <transmitting>
 d14:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <txAddress>
 d18:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txBufferIndex>
 d1c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txBufferLength>
 d20:	08 95       	ret

00000d22 <twi_end_transmission>:
 d22:	21 e0       	ldi	r18, 0x01	; 1
 d24:	40 91 db 00 	lds	r20, 0x00DB	; 0x8000db <txBufferLength>
 d28:	6f e0       	ldi	r22, 0x0F	; 15
 d2a:	71 e0       	ldi	r23, 0x01	; 1
 d2c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <txAddress>
 d30:	7a de       	rcall	.-780    	; 0xa26 <twi_writeTo>
 d32:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txBufferIndex>
 d36:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txBufferLength>
 d3a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <transmitting>
 d3e:	08 95       	ret

00000d40 <twi_send_byte>:
 d40:	cf 93       	push	r28
 d42:	df 93       	push	r29
 d44:	1f 92       	push	r1
 d46:	cd b7       	in	r28, 0x3d	; 61
 d48:	de b7       	in	r29, 0x3e	; 62
 d4a:	89 83       	std	Y+1, r24	; 0x01
 d4c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <transmitting>
 d50:	88 23       	and	r24, r24
 d52:	91 f0       	breq	.+36     	; 0xd78 <twi_send_byte+0x38>
 d54:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <txBufferLength>
 d58:	80 32       	cpi	r24, 0x20	; 32
 d5a:	90 f4       	brcc	.+36     	; 0xd80 <twi_send_byte+0x40>
 d5c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txBufferIndex>
 d60:	e8 2f       	mov	r30, r24
 d62:	f0 e0       	ldi	r31, 0x00	; 0
 d64:	e1 5f       	subi	r30, 0xF1	; 241
 d66:	fe 4f       	sbci	r31, 0xFE	; 254
 d68:	99 81       	ldd	r25, Y+1	; 0x01
 d6a:	90 83       	st	Z, r25
 d6c:	8f 5f       	subi	r24, 0xFF	; 255
 d6e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <txBufferIndex>
 d72:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <txBufferLength>
 d76:	04 c0       	rjmp	.+8      	; 0xd80 <twi_send_byte+0x40>
 d78:	61 e0       	ldi	r22, 0x01	; 1
 d7a:	ce 01       	movw	r24, r28
 d7c:	01 96       	adiw	r24, 0x01	; 1
 d7e:	93 de       	rcall	.-730    	; 0xaa6 <twi_transmit>
 d80:	0f 90       	pop	r0
 d82:	df 91       	pop	r29
 d84:	cf 91       	pop	r28
 d86:	08 95       	ret

00000d88 <twi_receive>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 d88:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <rxBufferIndex>
 d8c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <rxBufferLength>
 d90:	98 17       	cp	r25, r24
 d92:	48 f4       	brcc	.+18     	; 0xda6 <twi_receive+0x1e>
    value = rxBuffer[rxBufferIndex];
 d94:	e9 2f       	mov	r30, r25
 d96:	f0 e0       	ldi	r31, 0x00	; 0
 d98:	e1 51       	subi	r30, 0x11	; 17
 d9a:	ff 4f       	sbci	r31, 0xFF	; 255
 d9c:	80 81       	ld	r24, Z
    ++rxBufferIndex;
 d9e:	9f 5f       	subi	r25, 0xFF	; 255
 da0:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <rxBufferIndex>
 da4:	08 95       	ret
// or after requestFrom(address, numBytes)
uint8_t twi_receive(void)
{
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
 da6:	80 e0       	ldi	r24, 0x00	; 0
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
 da8:	08 95       	ret

00000daa <__udivmodsi4>:
 daa:	a1 e2       	ldi	r26, 0x21	; 33
 dac:	1a 2e       	mov	r1, r26
 dae:	aa 1b       	sub	r26, r26
 db0:	bb 1b       	sub	r27, r27
 db2:	fd 01       	movw	r30, r26
 db4:	0d c0       	rjmp	.+26     	; 0xdd0 <__udivmodsi4_ep>

00000db6 <__udivmodsi4_loop>:
 db6:	aa 1f       	adc	r26, r26
 db8:	bb 1f       	adc	r27, r27
 dba:	ee 1f       	adc	r30, r30
 dbc:	ff 1f       	adc	r31, r31
 dbe:	a2 17       	cp	r26, r18
 dc0:	b3 07       	cpc	r27, r19
 dc2:	e4 07       	cpc	r30, r20
 dc4:	f5 07       	cpc	r31, r21
 dc6:	20 f0       	brcs	.+8      	; 0xdd0 <__udivmodsi4_ep>
 dc8:	a2 1b       	sub	r26, r18
 dca:	b3 0b       	sbc	r27, r19
 dcc:	e4 0b       	sbc	r30, r20
 dce:	f5 0b       	sbc	r31, r21

00000dd0 <__udivmodsi4_ep>:
 dd0:	66 1f       	adc	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	99 1f       	adc	r25, r25
 dd8:	1a 94       	dec	r1
 dda:	69 f7       	brne	.-38     	; 0xdb6 <__udivmodsi4_loop>
 ddc:	60 95       	com	r22
 dde:	70 95       	com	r23
 de0:	80 95       	com	r24
 de2:	90 95       	com	r25
 de4:	9b 01       	movw	r18, r22
 de6:	ac 01       	movw	r20, r24
 de8:	bd 01       	movw	r22, r26
 dea:	cf 01       	movw	r24, r30
 dec:	08 95       	ret

00000dee <__umulhisi3>:
 dee:	a2 9f       	mul	r26, r18
 df0:	b0 01       	movw	r22, r0
 df2:	b3 9f       	mul	r27, r19
 df4:	c0 01       	movw	r24, r0
 df6:	a3 9f       	mul	r26, r19
 df8:	01 d0       	rcall	.+2      	; 0xdfc <__umulhisi3+0xe>
 dfa:	b2 9f       	mul	r27, r18
 dfc:	70 0d       	add	r23, r0
 dfe:	81 1d       	adc	r24, r1
 e00:	11 24       	eor	r1, r1
 e02:	91 1d       	adc	r25, r1
 e04:	08 95       	ret

00000e06 <_exit>:
 e06:	f8 94       	cli

00000e08 <__stop_program>:
 e08:	ff cf       	rjmp	.-2      	; 0xe08 <__stop_program>
