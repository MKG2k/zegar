
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000dd8  00000e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  00800062  00800062  00000e6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000324a  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001081  00000000  00000000  000044ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e93  00000000  00000000  0000552f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  000073c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af9  00000000  00000000  00007c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ad0  00000000  00000000  0000872d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e4 c0       	rjmp	.+456    	; 0x1ca <__ctors_end>
   2:	fe c0       	rjmp	.+508    	; 0x200 <__bad_interrupt>
   4:	fd c0       	rjmp	.+506    	; 0x200 <__bad_interrupt>
   6:	b2 c3       	rjmp	.+1892   	; 0x76c <__vector_3>
   8:	fb c0       	rjmp	.+502    	; 0x200 <__bad_interrupt>
   a:	fa c0       	rjmp	.+500    	; 0x200 <__bad_interrupt>
   c:	a3 c1       	rjmp	.+838    	; 0x354 <__vector_6>
   e:	f8 c0       	rjmp	.+496    	; 0x200 <__bad_interrupt>
  10:	f7 c0       	rjmp	.+494    	; 0x200 <__bad_interrupt>
  12:	f6 c0       	rjmp	.+492    	; 0x200 <__bad_interrupt>
  14:	f5 c0       	rjmp	.+490    	; 0x200 <__bad_interrupt>
  16:	f4 c0       	rjmp	.+488    	; 0x200 <__bad_interrupt>
  18:	f3 c0       	rjmp	.+486    	; 0x200 <__bad_interrupt>
  1a:	f2 c0       	rjmp	.+484    	; 0x200 <__bad_interrupt>
  1c:	f1 c0       	rjmp	.+482    	; 0x200 <__bad_interrupt>
  1e:	f0 c0       	rjmp	.+480    	; 0x200 <__bad_interrupt>
  20:	ef c0       	rjmp	.+478    	; 0x200 <__bad_interrupt>
  22:	5b c5       	rjmp	.+2742   	; 0xada <__vector_17>
  24:	ed c0       	rjmp	.+474    	; 0x200 <__bad_interrupt>
  26:	49 c3       	rjmp	.+1682   	; 0x6ba <PodajZnak+0x48>
  28:	30 c3       	rjmp	.+1632   	; 0x68a <PodajZnak+0x18>
  2a:	32 c3       	rjmp	.+1636   	; 0x690 <PodajZnak+0x1e>
  2c:	34 c3       	rjmp	.+1640   	; 0x696 <PodajZnak+0x24>
  2e:	36 c3       	rjmp	.+1644   	; 0x69c <PodajZnak+0x2a>
  30:	38 c3       	rjmp	.+1648   	; 0x6a2 <PodajZnak+0x30>
  32:	3a c3       	rjmp	.+1652   	; 0x6a8 <PodajZnak+0x36>
  34:	3c c3       	rjmp	.+1656   	; 0x6ae <PodajZnak+0x3c>
  36:	3e c3       	rjmp	.+1660   	; 0x6b4 <PodajZnak+0x42>
  38:	27 c6       	rjmp	.+3150   	; 0xc88 <__vector_17+0x1ae>
  3a:	29 c6       	rjmp	.+3154   	; 0xc8e <__vector_17+0x1b4>
  3c:	28 c6       	rjmp	.+3152   	; 0xc8e <__vector_17+0x1b4>
  3e:	27 c6       	rjmp	.+3150   	; 0xc8e <__vector_17+0x1b4>
  40:	26 c6       	rjmp	.+3148   	; 0xc8e <__vector_17+0x1b4>
  42:	25 c6       	rjmp	.+3146   	; 0xc8e <__vector_17+0x1b4>
  44:	24 c6       	rjmp	.+3144   	; 0xc8e <__vector_17+0x1b4>
  46:	23 c6       	rjmp	.+3142   	; 0xc8e <__vector_17+0x1b4>
  48:	66 c5       	rjmp	.+2764   	; 0xb16 <__vector_17+0x3c>
  4a:	21 c6       	rjmp	.+3138   	; 0xc8e <__vector_17+0x1b4>
  4c:	20 c6       	rjmp	.+3136   	; 0xc8e <__vector_17+0x1b4>
  4e:	1f c6       	rjmp	.+3134   	; 0xc8e <__vector_17+0x1b4>
  50:	1e c6       	rjmp	.+3132   	; 0xc8e <__vector_17+0x1b4>
  52:	1d c6       	rjmp	.+3130   	; 0xc8e <__vector_17+0x1b4>
  54:	1c c6       	rjmp	.+3128   	; 0xc8e <__vector_17+0x1b4>
  56:	1b c6       	rjmp	.+3126   	; 0xc8e <__vector_17+0x1b4>
  58:	5e c5       	rjmp	.+2748   	; 0xb16 <__vector_17+0x3c>
  5a:	19 c6       	rjmp	.+3122   	; 0xc8e <__vector_17+0x1b4>
  5c:	18 c6       	rjmp	.+3120   	; 0xc8e <__vector_17+0x1b4>
  5e:	17 c6       	rjmp	.+3118   	; 0xc8e <__vector_17+0x1b4>
  60:	16 c6       	rjmp	.+3116   	; 0xc8e <__vector_17+0x1b4>
  62:	15 c6       	rjmp	.+3114   	; 0xc8e <__vector_17+0x1b4>
  64:	14 c6       	rjmp	.+3112   	; 0xc8e <__vector_17+0x1b4>
  66:	13 c6       	rjmp	.+3110   	; 0xc8e <__vector_17+0x1b4>
  68:	5c c5       	rjmp	.+2744   	; 0xb22 <__vector_17+0x48>
  6a:	11 c6       	rjmp	.+3106   	; 0xc8e <__vector_17+0x1b4>
  6c:	10 c6       	rjmp	.+3104   	; 0xc8e <__vector_17+0x1b4>
  6e:	0f c6       	rjmp	.+3102   	; 0xc8e <__vector_17+0x1b4>
  70:	0e c6       	rjmp	.+3100   	; 0xc8e <__vector_17+0x1b4>
  72:	0d c6       	rjmp	.+3098   	; 0xc8e <__vector_17+0x1b4>
  74:	0c c6       	rjmp	.+3096   	; 0xc8e <__vector_17+0x1b4>
  76:	0b c6       	rjmp	.+3094   	; 0xc8e <__vector_17+0x1b4>
  78:	6a c5       	rjmp	.+2772   	; 0xb4e <__vector_17+0x74>
  7a:	09 c6       	rjmp	.+3090   	; 0xc8e <__vector_17+0x1b4>
  7c:	08 c6       	rjmp	.+3088   	; 0xc8e <__vector_17+0x1b4>
  7e:	07 c6       	rjmp	.+3086   	; 0xc8e <__vector_17+0x1b4>
  80:	06 c6       	rjmp	.+3084   	; 0xc8e <__vector_17+0x1b4>
  82:	05 c6       	rjmp	.+3082   	; 0xc8e <__vector_17+0x1b4>
  84:	04 c6       	rjmp	.+3080   	; 0xc8e <__vector_17+0x1b4>
  86:	03 c6       	rjmp	.+3078   	; 0xc8e <__vector_17+0x1b4>
  88:	4c c5       	rjmp	.+2712   	; 0xb22 <__vector_17+0x48>
  8a:	01 c6       	rjmp	.+3074   	; 0xc8e <__vector_17+0x1b4>
  8c:	00 c6       	rjmp	.+3072   	; 0xc8e <__vector_17+0x1b4>
  8e:	ff c5       	rjmp	.+3070   	; 0xc8e <__vector_17+0x1b4>
  90:	fe c5       	rjmp	.+3068   	; 0xc8e <__vector_17+0x1b4>
  92:	fd c5       	rjmp	.+3066   	; 0xc8e <__vector_17+0x1b4>
  94:	fc c5       	rjmp	.+3064   	; 0xc8e <__vector_17+0x1b4>
  96:	fb c5       	rjmp	.+3062   	; 0xc8e <__vector_17+0x1b4>
  98:	5f c5       	rjmp	.+2750   	; 0xb58 <__vector_17+0x7e>
  9a:	f9 c5       	rjmp	.+3058   	; 0xc8e <__vector_17+0x1b4>
  9c:	f8 c5       	rjmp	.+3056   	; 0xc8e <__vector_17+0x1b4>
  9e:	f7 c5       	rjmp	.+3054   	; 0xc8e <__vector_17+0x1b4>
  a0:	f6 c5       	rjmp	.+3052   	; 0xc8e <__vector_17+0x1b4>
  a2:	f5 c5       	rjmp	.+3050   	; 0xc8e <__vector_17+0x1b4>
  a4:	f4 c5       	rjmp	.+3048   	; 0xc8e <__vector_17+0x1b4>
  a6:	f3 c5       	rjmp	.+3046   	; 0xc8e <__vector_17+0x1b4>
  a8:	5c c5       	rjmp	.+2744   	; 0xb62 <__vector_17+0x88>
  aa:	f1 c5       	rjmp	.+3042   	; 0xc8e <__vector_17+0x1b4>
  ac:	f0 c5       	rjmp	.+3040   	; 0xc8e <__vector_17+0x1b4>
  ae:	ef c5       	rjmp	.+3038   	; 0xc8e <__vector_17+0x1b4>
  b0:	ee c5       	rjmp	.+3036   	; 0xc8e <__vector_17+0x1b4>
  b2:	ed c5       	rjmp	.+3034   	; 0xc8e <__vector_17+0x1b4>
  b4:	ec c5       	rjmp	.+3032   	; 0xc8e <__vector_17+0x1b4>
  b6:	eb c5       	rjmp	.+3030   	; 0xc8e <__vector_17+0x1b4>
  b8:	64 c5       	rjmp	.+2760   	; 0xb82 <__vector_17+0xa8>
  ba:	e9 c5       	rjmp	.+3026   	; 0xc8e <__vector_17+0x1b4>
  bc:	e8 c5       	rjmp	.+3024   	; 0xc8e <__vector_17+0x1b4>
  be:	e7 c5       	rjmp	.+3022   	; 0xc8e <__vector_17+0x1b4>
  c0:	e6 c5       	rjmp	.+3020   	; 0xc8e <__vector_17+0x1b4>
  c2:	e5 c5       	rjmp	.+3018   	; 0xc8e <__vector_17+0x1b4>
  c4:	e4 c5       	rjmp	.+3016   	; 0xc8e <__vector_17+0x1b4>
  c6:	e3 c5       	rjmp	.+3014   	; 0xc8e <__vector_17+0x1b4>
  c8:	73 c5       	rjmp	.+2790   	; 0xbb0 <__vector_17+0xd6>
  ca:	e1 c5       	rjmp	.+3010   	; 0xc8e <__vector_17+0x1b4>
  cc:	e0 c5       	rjmp	.+3008   	; 0xc8e <__vector_17+0x1b4>
  ce:	df c5       	rjmp	.+3006   	; 0xc8e <__vector_17+0x1b4>
  d0:	de c5       	rjmp	.+3004   	; 0xc8e <__vector_17+0x1b4>
  d2:	dd c5       	rjmp	.+3002   	; 0xc8e <__vector_17+0x1b4>
  d4:	dc c5       	rjmp	.+3000   	; 0xc8e <__vector_17+0x1b4>
  d6:	db c5       	rjmp	.+2998   	; 0xc8e <__vector_17+0x1b4>
  d8:	49 c5       	rjmp	.+2706   	; 0xb6c <__vector_17+0x92>
  da:	d9 c5       	rjmp	.+2994   	; 0xc8e <__vector_17+0x1b4>
  dc:	d8 c5       	rjmp	.+2992   	; 0xc8e <__vector_17+0x1b4>
  de:	d7 c5       	rjmp	.+2990   	; 0xc8e <__vector_17+0x1b4>
  e0:	d6 c5       	rjmp	.+2988   	; 0xc8e <__vector_17+0x1b4>
  e2:	d5 c5       	rjmp	.+2986   	; 0xc8e <__vector_17+0x1b4>
  e4:	d4 c5       	rjmp	.+2984   	; 0xc8e <__vector_17+0x1b4>
  e6:	d3 c5       	rjmp	.+2982   	; 0xc8e <__vector_17+0x1b4>
  e8:	58 c5       	rjmp	.+2736   	; 0xb9a <__vector_17+0xc0>
  ea:	d1 c5       	rjmp	.+2978   	; 0xc8e <__vector_17+0x1b4>
  ec:	d0 c5       	rjmp	.+2976   	; 0xc8e <__vector_17+0x1b4>
  ee:	cf c5       	rjmp	.+2974   	; 0xc8e <__vector_17+0x1b4>
  f0:	ce c5       	rjmp	.+2972   	; 0xc8e <__vector_17+0x1b4>
  f2:	cd c5       	rjmp	.+2970   	; 0xc8e <__vector_17+0x1b4>
  f4:	cc c5       	rjmp	.+2968   	; 0xc8e <__vector_17+0x1b4>
  f6:	cb c5       	rjmp	.+2966   	; 0xc8e <__vector_17+0x1b4>
  f8:	5d c5       	rjmp	.+2746   	; 0xbb4 <__vector_17+0xda>
  fa:	c9 c5       	rjmp	.+2962   	; 0xc8e <__vector_17+0x1b4>
  fc:	c8 c5       	rjmp	.+2960   	; 0xc8e <__vector_17+0x1b4>
  fe:	c7 c5       	rjmp	.+2958   	; 0xc8e <__vector_17+0x1b4>
 100:	c6 c5       	rjmp	.+2956   	; 0xc8e <__vector_17+0x1b4>
 102:	c5 c5       	rjmp	.+2954   	; 0xc8e <__vector_17+0x1b4>
 104:	c4 c5       	rjmp	.+2952   	; 0xc8e <__vector_17+0x1b4>
 106:	c3 c5       	rjmp	.+2950   	; 0xc8e <__vector_17+0x1b4>
 108:	55 c5       	rjmp	.+2730   	; 0xbb4 <__vector_17+0xda>
 10a:	c1 c5       	rjmp	.+2946   	; 0xc8e <__vector_17+0x1b4>
 10c:	c0 c5       	rjmp	.+2944   	; 0xc8e <__vector_17+0x1b4>
 10e:	bf c5       	rjmp	.+2942   	; 0xc8e <__vector_17+0x1b4>
 110:	be c5       	rjmp	.+2940   	; 0xc8e <__vector_17+0x1b4>
 112:	bd c5       	rjmp	.+2938   	; 0xc8e <__vector_17+0x1b4>
 114:	bc c5       	rjmp	.+2936   	; 0xc8e <__vector_17+0x1b4>
 116:	bb c5       	rjmp	.+2934   	; 0xc8e <__vector_17+0x1b4>
 118:	4d c5       	rjmp	.+2714   	; 0xbb4 <__vector_17+0xda>
 11a:	b9 c5       	rjmp	.+2930   	; 0xc8e <__vector_17+0x1b4>
 11c:	b8 c5       	rjmp	.+2928   	; 0xc8e <__vector_17+0x1b4>
 11e:	b7 c5       	rjmp	.+2926   	; 0xc8e <__vector_17+0x1b4>
 120:	b6 c5       	rjmp	.+2924   	; 0xc8e <__vector_17+0x1b4>
 122:	b5 c5       	rjmp	.+2922   	; 0xc8e <__vector_17+0x1b4>
 124:	b4 c5       	rjmp	.+2920   	; 0xc8e <__vector_17+0x1b4>
 126:	b3 c5       	rjmp	.+2918   	; 0xc8e <__vector_17+0x1b4>
 128:	45 c5       	rjmp	.+2698   	; 0xbb4 <__vector_17+0xda>
 12a:	b1 c5       	rjmp	.+2914   	; 0xc8e <__vector_17+0x1b4>
 12c:	b0 c5       	rjmp	.+2912   	; 0xc8e <__vector_17+0x1b4>
 12e:	af c5       	rjmp	.+2910   	; 0xc8e <__vector_17+0x1b4>
 130:	ae c5       	rjmp	.+2908   	; 0xc8e <__vector_17+0x1b4>
 132:	ad c5       	rjmp	.+2906   	; 0xc8e <__vector_17+0x1b4>
 134:	ac c5       	rjmp	.+2904   	; 0xc8e <__vector_17+0x1b4>
 136:	ab c5       	rjmp	.+2902   	; 0xc8e <__vector_17+0x1b4>
 138:	45 c5       	rjmp	.+2698   	; 0xbc4 <__vector_17+0xea>
 13a:	a9 c5       	rjmp	.+2898   	; 0xc8e <__vector_17+0x1b4>
 13c:	a8 c5       	rjmp	.+2896   	; 0xc8e <__vector_17+0x1b4>
 13e:	a7 c5       	rjmp	.+2894   	; 0xc8e <__vector_17+0x1b4>
 140:	a6 c5       	rjmp	.+2892   	; 0xc8e <__vector_17+0x1b4>
 142:	a5 c5       	rjmp	.+2890   	; 0xc8e <__vector_17+0x1b4>
 144:	a4 c5       	rjmp	.+2888   	; 0xc8e <__vector_17+0x1b4>
 146:	a3 c5       	rjmp	.+2886   	; 0xc8e <__vector_17+0x1b4>
 148:	6b c5       	rjmp	.+2774   	; 0xc20 <__vector_17+0x146>
 14a:	a1 c5       	rjmp	.+2882   	; 0xc8e <__vector_17+0x1b4>
 14c:	a0 c5       	rjmp	.+2880   	; 0xc8e <__vector_17+0x1b4>
 14e:	9f c5       	rjmp	.+2878   	; 0xc8e <__vector_17+0x1b4>
 150:	9e c5       	rjmp	.+2876   	; 0xc8e <__vector_17+0x1b4>
 152:	9d c5       	rjmp	.+2874   	; 0xc8e <__vector_17+0x1b4>
 154:	9c c5       	rjmp	.+2872   	; 0xc8e <__vector_17+0x1b4>
 156:	9b c5       	rjmp	.+2870   	; 0xc8e <__vector_17+0x1b4>
 158:	35 c5       	rjmp	.+2666   	; 0xbc4 <__vector_17+0xea>
 15a:	99 c5       	rjmp	.+2866   	; 0xc8e <__vector_17+0x1b4>
 15c:	98 c5       	rjmp	.+2864   	; 0xc8e <__vector_17+0x1b4>
 15e:	97 c5       	rjmp	.+2862   	; 0xc8e <__vector_17+0x1b4>
 160:	96 c5       	rjmp	.+2860   	; 0xc8e <__vector_17+0x1b4>
 162:	95 c5       	rjmp	.+2858   	; 0xc8e <__vector_17+0x1b4>
 164:	94 c5       	rjmp	.+2856   	; 0xc8e <__vector_17+0x1b4>
 166:	93 c5       	rjmp	.+2854   	; 0xc8e <__vector_17+0x1b4>
 168:	5b c5       	rjmp	.+2742   	; 0xc20 <__vector_17+0x146>
 16a:	91 c5       	rjmp	.+2850   	; 0xc8e <__vector_17+0x1b4>
 16c:	90 c5       	rjmp	.+2848   	; 0xc8e <__vector_17+0x1b4>
 16e:	8f c5       	rjmp	.+2846   	; 0xc8e <__vector_17+0x1b4>
 170:	8e c5       	rjmp	.+2844   	; 0xc8e <__vector_17+0x1b4>
 172:	8d c5       	rjmp	.+2842   	; 0xc8e <__vector_17+0x1b4>
 174:	8c c5       	rjmp	.+2840   	; 0xc8e <__vector_17+0x1b4>
 176:	8b c5       	rjmp	.+2838   	; 0xc8e <__vector_17+0x1b4>
 178:	3a c5       	rjmp	.+2676   	; 0xbee <__vector_17+0x114>
 17a:	89 c5       	rjmp	.+2834   	; 0xc8e <__vector_17+0x1b4>
 17c:	88 c5       	rjmp	.+2832   	; 0xc8e <__vector_17+0x1b4>
 17e:	87 c5       	rjmp	.+2830   	; 0xc8e <__vector_17+0x1b4>
 180:	86 c5       	rjmp	.+2828   	; 0xc8e <__vector_17+0x1b4>
 182:	85 c5       	rjmp	.+2826   	; 0xc8e <__vector_17+0x1b4>
 184:	84 c5       	rjmp	.+2824   	; 0xc8e <__vector_17+0x1b4>
 186:	83 c5       	rjmp	.+2822   	; 0xc8e <__vector_17+0x1b4>
 188:	4e c5       	rjmp	.+2716   	; 0xc26 <__vector_17+0x14c>
 18a:	81 c5       	rjmp	.+2818   	; 0xc8e <__vector_17+0x1b4>
 18c:	80 c5       	rjmp	.+2816   	; 0xc8e <__vector_17+0x1b4>
 18e:	7f c5       	rjmp	.+2814   	; 0xc8e <__vector_17+0x1b4>
 190:	7e c5       	rjmp	.+2812   	; 0xc8e <__vector_17+0x1b4>
 192:	7d c5       	rjmp	.+2810   	; 0xc8e <__vector_17+0x1b4>
 194:	7c c5       	rjmp	.+2808   	; 0xc8e <__vector_17+0x1b4>
 196:	7b c5       	rjmp	.+2806   	; 0xc8e <__vector_17+0x1b4>
 198:	46 c5       	rjmp	.+2700   	; 0xc26 <__vector_17+0x14c>
 19a:	79 c5       	rjmp	.+2802   	; 0xc8e <__vector_17+0x1b4>
 19c:	78 c5       	rjmp	.+2800   	; 0xc8e <__vector_17+0x1b4>
 19e:	77 c5       	rjmp	.+2798   	; 0xc8e <__vector_17+0x1b4>
 1a0:	76 c5       	rjmp	.+2796   	; 0xc8e <__vector_17+0x1b4>
 1a2:	75 c5       	rjmp	.+2794   	; 0xc8e <__vector_17+0x1b4>
 1a4:	74 c5       	rjmp	.+2792   	; 0xc8e <__vector_17+0x1b4>
 1a6:	73 c5       	rjmp	.+2790   	; 0xc8e <__vector_17+0x1b4>
 1a8:	53 c5       	rjmp	.+2726   	; 0xc50 <__vector_17+0x176>
 1aa:	71 c5       	rjmp	.+2786   	; 0xc8e <__vector_17+0x1b4>
 1ac:	70 c5       	rjmp	.+2784   	; 0xc8e <__vector_17+0x1b4>
 1ae:	6f c5       	rjmp	.+2782   	; 0xc8e <__vector_17+0x1b4>
 1b0:	6e c5       	rjmp	.+2780   	; 0xc8e <__vector_17+0x1b4>
 1b2:	6d c5       	rjmp	.+2778   	; 0xc8e <__vector_17+0x1b4>
 1b4:	6c c5       	rjmp	.+2776   	; 0xc8e <__vector_17+0x1b4>
 1b6:	6b c5       	rjmp	.+2774   	; 0xc8e <__vector_17+0x1b4>
 1b8:	62 c5       	rjmp	.+2756   	; 0xc7e <__vector_17+0x1a4>
 1ba:	69 c5       	rjmp	.+2770   	; 0xc8e <__vector_17+0x1b4>
 1bc:	68 c5       	rjmp	.+2768   	; 0xc8e <__vector_17+0x1b4>
 1be:	67 c5       	rjmp	.+2766   	; 0xc8e <__vector_17+0x1b4>
 1c0:	66 c5       	rjmp	.+2764   	; 0xc8e <__vector_17+0x1b4>
 1c2:	65 c5       	rjmp	.+2762   	; 0xc8e <__vector_17+0x1b4>
 1c4:	64 c5       	rjmp	.+2760   	; 0xc8e <__vector_17+0x1b4>
 1c6:	63 c5       	rjmp	.+2758   	; 0xc8e <__vector_17+0x1b4>
 1c8:	5a c5       	rjmp	.+2740   	; 0xc7e <__vector_17+0x1a4>

000001ca <__ctors_end>:
 1ca:	11 24       	eor	r1, r1
 1cc:	1f be       	out	0x3f, r1	; 63
 1ce:	cf e5       	ldi	r28, 0x5F	; 95
 1d0:	d4 e0       	ldi	r29, 0x04	; 4
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	a0 e6       	ldi	r26, 0x60	; 96
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e8 ed       	ldi	r30, 0xD8	; 216
 1de:	fd e0       	ldi	r31, 0x0D	; 13
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x10>
 1e2:	05 90       	lpm	r0, Z+
 1e4:	0d 92       	st	X+, r0
 1e6:	a2 36       	cpi	r26, 0x62	; 98
 1e8:	b1 07       	cpc	r27, r17
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0xc>

000001ec <__do_clear_bss>:
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	a2 e6       	ldi	r26, 0x62	; 98
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
 1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
 1f6:	aa 32       	cpi	r26, 0x2A	; 42
 1f8:	b2 07       	cpc	r27, r18
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>
 1fc:	d0 d0       	rcall	.+416    	; 0x39e <main>
 1fe:	ea c5       	rjmp	.+3028   	; 0xdd4 <_exit>

00000200 <__bad_interrupt>:
 200:	ff ce       	rjmp	.-514    	; 0x0 <__vectors>

00000202 <obsluzKropke>:

volatile uint8_t kropka;

void obsluzKropke()
{
	if(kropka > 0)
 202:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <kropka>
 206:	88 23       	and	r24, r24
 208:	21 f0       	breq	.+8      	; 0x212 <obsluzKropke+0x10>
	{
		K1_PORT |= (1<<K1_PIN);
 20a:	82 b3       	in	r24, 0x12	; 18
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	82 bb       	out	0x12, r24	; 18
 210:	08 95       	ret
	}
	else
	{
		K1_PORT &= ~(1<<K1_PIN);
 212:	82 b3       	in	r24, 0x12	; 18
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	82 bb       	out	0x12, r24	; 18
 218:	08 95       	ret

0000021a <LEDSet>:
#include "LED.h"

void LEDSet(bool v, int ledNo)
{
	
	switch (ledNo)
 21a:	61 15       	cp	r22, r1
 21c:	71 05       	cpc	r23, r1
 21e:	69 f0       	breq	.+26     	; 0x23a <LEDSet+0x20>
 220:	61 30       	cpi	r22, 0x01	; 1
 222:	71 05       	cpc	r23, r1
 224:	99 f4       	brne	.+38     	; 0x24c <LEDSet+0x32>
	{		
		case LED1_PIN:
			if(v == true)
 226:	88 23       	and	r24, r24
 228:	21 f0       	breq	.+8      	; 0x232 <LEDSet+0x18>
			{
				LED1_SET;
 22a:	85 b3       	in	r24, 0x15	; 21
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	85 bb       	out	0x15, r24	; 21
 230:	08 95       	ret
			}
			else
			{
				LED1_CLR;
 232:	85 b3       	in	r24, 0x15	; 21
 234:	8d 7f       	andi	r24, 0xFD	; 253
 236:	85 bb       	out	0x15, r24	; 21
 238:	08 95       	ret
			}
		break;
		case LED2_PIN:
			if(v == true)
 23a:	88 23       	and	r24, r24
 23c:	21 f0       	breq	.+8      	; 0x246 <LEDSet+0x2c>
			{
				LED2_SET;
 23e:	85 b3       	in	r24, 0x15	; 21
 240:	81 60       	ori	r24, 0x01	; 1
 242:	85 bb       	out	0x15, r24	; 21
 244:	08 95       	ret
			}
			else
			{
				LED2_CLR;
 246:	85 b3       	in	r24, 0x15	; 21
 248:	8e 7f       	andi	r24, 0xFE	; 254
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	08 95       	ret

0000024e <wylaczLicznikCzasu>:

void wylaczLicznikCzasu()
{
	

	TCCR1B&=~(1<<CS11);
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	8d 7f       	andi	r24, 0xFD	; 253
 252:	8e bd       	out	0x2e, r24	; 46
	TCCR1B&=~(1<<CS10);
 254:	8e b5       	in	r24, 0x2e	; 46
 256:	8e 7f       	andi	r24, 0xFE	; 254
 258:	8e bd       	out	0x2e, r24	; 46
 25a:	08 95       	ret

0000025c <uruchomLicznikCzasu>:
	
	
}
void uruchomLicznikCzasu()
{
	licznikCzasu = 0;
 25c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 260:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 264:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
 268:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
	TCCR1B |= (1<<CS11)|(1<<CS10);
 26c:	8e b5       	in	r24, 0x2e	; 46
 26e:	83 60       	ori	r24, 0x03	; 3
 270:	8e bd       	out	0x2e, r24	; 46
 272:	08 95       	ret

00000274 <zmianaTrybuLed>:
void read_rtc(void)
{
	
	uint8_t hour, min, sec;
	rtc_get_time_s(&hour, &min, &sec);
}
 274:	85 b3       	in	r24, 0x15	; 21
 276:	82 60       	ori	r24, 0x02	; 2
 278:	85 bb       	out	0x15, r24	; 21
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	80 e7       	ldi	r24, 0x70	; 112
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <zmianaTrybuLed+0xc>
 288:	00 c0       	rjmp	.+0      	; 0x28a <zmianaTrybuLed+0x16>
 28a:	00 00       	nop
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	85 bb       	out	0x15, r24	; 21
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	80 e7       	ldi	r24, 0x70	; 112
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <zmianaTrybuLed+0x24>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <zmianaTrybuLed+0x2e>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <ObsluzPrzycisk>:
 2a6:	9b 99       	sbic	0x13, 3	; 19
 2a8:	2b c0       	rjmp	.+86     	; 0x300 <ObsluzPrzycisk+0x5a>
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 81       	ld	r18, Z
 2ae:	21 11       	cpse	r18, r1
 2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <ObsluzPrzycisk+0x30>
 2b2:	fb 01       	movw	r30, r22
 2b4:	dc 01       	movw	r26, r24
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	2c 93       	st	X, r18
 2ba:	20 83       	st	Z, r18
 2bc:	c8 df       	rcall	.-112    	; 0x24e <wylaczLicznikCzasu>
 2be:	ff ef       	ldi	r31, 0xFF	; 255
 2c0:	20 e7       	ldi	r18, 0x70	; 112
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	f1 50       	subi	r31, 0x01	; 1
 2c6:	20 40       	sbci	r18, 0x00	; 0
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <ObsluzPrzycisk+0x1e>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <ObsluzPrzycisk+0x28>
 2ce:	00 00       	nop
 2d0:	9b 9b       	sbis	0x13, 3	; 19
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <ObsluzPrzycisk+0x2a>
 2d4:	08 95       	ret
 2d6:	21 30       	cpi	r18, 0x01	; 1
 2d8:	99 f4       	brne	.+38     	; 0x300 <ObsluzPrzycisk+0x5a>
 2da:	fb 01       	movw	r30, r22
 2dc:	20 81       	ld	r18, Z
 2de:	21 30       	cpi	r18, 0x01	; 1
 2e0:	79 f4       	brne	.+30     	; 0x300 <ObsluzPrzycisk+0x5a>
 2e2:	fc 01       	movw	r30, r24
 2e4:	10 82       	st	Z, r1
 2e6:	fb 01       	movw	r30, r22
 2e8:	10 82       	st	Z, r1
 2ea:	ff ef       	ldi	r31, 0xFF	; 255
 2ec:	20 e7       	ldi	r18, 0x70	; 112
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	f1 50       	subi	r31, 0x01	; 1
 2f2:	20 40       	sbci	r18, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <ObsluzPrzycisk+0x4a>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <ObsluzPrzycisk+0x54>
 2fa:	00 00       	nop
 2fc:	9b 9b       	sbis	0x13, 3	; 19
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <ObsluzPrzycisk+0x56>
 300:	08 95       	ret

00000302 <ObsluzPrzyciskZmianyTrybu>:
 302:	9a 99       	sbic	0x13, 2	; 19
 304:	19 c0       	rjmp	.+50     	; 0x338 <ObsluzPrzyciskZmianyTrybu+0x36>
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	86 df       	rcall	.-244    	; 0x21a <LEDSet>
 30e:	b2 df       	rcall	.-156    	; 0x274 <zmianaTrybuLed>
 310:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <tryb>
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <tryb>
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <flagaZatrzymania>
 320:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <licznikStopera+0x1>
 324:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <licznikStopera>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	11 f4       	brne	.+4      	; 0x330 <ObsluzPrzyciskZmianyTrybu+0x2e>
 32c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <tryb>
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	71 df       	rcall	.-286    	; 0x21a <LEDSet>
 338:	08 95       	ret

0000033a <wyzerowanie>:
 33a:	b4 99       	sbic	0x16, 4	; 22
 33c:	0a c0       	rjmp	.+20     	; 0x352 <wyzerowanie+0x18>
 33e:	b4 9b       	sbis	0x16, 4	; 22
 340:	fe cf       	rjmp	.-4      	; 0x33e <wyzerowanie+0x4>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flagaZatrzymania>
 348:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <licznikStopera+0x1>
 34c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <licznikStopera>
 350:	85 df       	rcall	.-246    	; 0x25c <uruchomLicznikCzasu>
 352:	08 95       	ret

00000354 <__vector_6>:

ISR(	TIMER1_COMPA_vect	) {
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
	
	licznikCzasu ++;
 366:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 36a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 36e:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
 372:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	a1 1d       	adc	r26, r1
 37a:	b1 1d       	adc	r27, r1
 37c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 380:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 384:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
 388:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
	
}
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <main>:




int main(void){
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <main+0x6>
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <main+0x8>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62

	multipleks_init();
 3aa:	af d1       	rcall	.+862    	; 0x70a <multipleks_init>
	twi_init_master();
 3ac:	81 d4       	rcall	.+2306   	; 0xcb0 <twi_init_master>

	//cyfra[0] = 1;
	//cyfra[1] = 1;
	//cyfra[2] = 1;
	//cyfra[3] = 1;
	OCR1A = 12499;
 3ae:	83 ed       	ldi	r24, 0xD3	; 211
 3b0:	90 e3       	ldi	r25, 0x30	; 48
 3b2:	9b bd       	out	0x2b, r25	; 43
 3b4:	8a bd       	out	0x2a, r24	; 42

	TIMSK |= (1<<OCIE1A);
 3b6:	89 b7       	in	r24, 0x39	; 57
 3b8:	80 61       	ori	r24, 0x10	; 16
 3ba:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1<<WGM12);
 3bc:	8e b5       	in	r24, 0x2e	; 46
 3be:	88 60       	ori	r24, 0x08	; 8
 3c0:	8e bd       	out	0x2e, r24	; 46
	
	
	
	
	sei();
 3c2:	78 94       	sei
	z1=1;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <z1>
	z2=2;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <z2>
	z3=3;
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <z3>
	z4=4;
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <z4>

P1_init();
 3dc:	46 d2       	rcall	.+1164   	; 0x86a <P1_init>
P2_init();
 3de:	4c d2       	rcall	.+1176   	; 0x878 <P2_init>
P3_init();
 3e0:	52 d2       	rcall	.+1188   	; 0x886 <P3_init>
P4_init();
 3e2:	58 d2       	rcall	.+1200   	; 0x894 <P4_init>
	
	DDRC|=(1<<PINC0);
 3e4:	84 b3       	in	r24, 0x14	; 20
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	84 bb       	out	0x14, r24	; 20
	
	DDRD|=(1<<PIND0);
 3ea:	81 b3       	in	r24, 0x11	; 17
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	81 bb       	out	0x11, r24	; 17


	uint8_t flagaPrzycisku=0;
 3f0:	19 82       	std	Y+1, r1	; 0x01

	
	
	uint8_t hour, min, sec;
	
	rtc_get_time_s(&hour, &min, &sec);
 3f2:	ae 01       	movw	r20, r28
 3f4:	4c 5f       	subi	r20, 0xFC	; 252
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
 3f8:	be 01       	movw	r22, r28
 3fa:	6d 5f       	subi	r22, 0xFD	; 253
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	ce 01       	movw	r24, r28
 400:	02 96       	adiw	r24, 0x02	; 2
 402:	5a d2       	rcall	.+1204   	; 0x8b8 <rtc_get_time_s>
	
	
	
	while(1) {
		
		LEDSet(false, LED2_PIN);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	07 df       	rcall	.-498    	; 0x21a <LEDSet>
		
		
		
		switch (tryb)
 40c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <tryb>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	d9 f1       	breq	.+118    	; 0x48a <__stack+0x2b>
 414:	20 f0       	brcs	.+8      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	09 f4       	brne	.+2      	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 41a:	b1 c0       	rjmp	.+354    	; 0x57e <__stack+0x11f>
 41c:	28 c1       	rjmp	.+592    	; 0x66e <__stack+0x20f>
		{
			case 0:
			
			
			rtc_get_time_s(&hour, &min, &sec);
 41e:	ae 01       	movw	r20, r28
 420:	4c 5f       	subi	r20, 0xFC	; 252
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	be 01       	movw	r22, r28
 426:	6d 5f       	subi	r22, 0xFD	; 253
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	ce 01       	movw	r24, r28
 42c:	02 96       	adiw	r24, 0x02	; 2
 42e:	44 d2       	rcall	.+1160   	; 0x8b8 <rtc_get_time_s>
			if(sec % 2 )
 430:	8c 81       	ldd	r24, Y+4	; 0x04
 432:	80 ff       	sbrs	r24, 0
 434:	04 c0       	rjmp	.+8      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
			{
				kropka = 1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <kropka>
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__DATA_REGION_LENGTH__+0x42>
				
				
			}
			else
			{
				kropka = 0;
 43e:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <kropka>
			}
			//min
			z1 = hour/10;
 442:	2a 81       	ldd	r18, Y+2	; 0x02
 444:	8d ec       	ldi	r24, 0xCD	; 205
 446:	28 9f       	mul	r18, r24
 448:	91 2d       	mov	r25, r1
 44a:	11 24       	eor	r1, r1
 44c:	96 95       	lsr	r25
 44e:	96 95       	lsr	r25
 450:	96 95       	lsr	r25
 452:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <z1>
			
			z2 = (hour-(z1*10));
 456:	99 0f       	add	r25, r25
 458:	39 2f       	mov	r19, r25
 45a:	33 0f       	add	r19, r19
 45c:	33 0f       	add	r19, r19
 45e:	93 0f       	add	r25, r19
 460:	29 1b       	sub	r18, r25
 462:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <z2>

			z3 = min/10;
 466:	9b 81       	ldd	r25, Y+3	; 0x03
 468:	98 9f       	mul	r25, r24
 46a:	81 2d       	mov	r24, r1
 46c:	11 24       	eor	r1, r1
 46e:	86 95       	lsr	r24
 470:	86 95       	lsr	r24
 472:	86 95       	lsr	r24
 474:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <z3>
			
			z4 = (min-(z3*10));
 478:	88 0f       	add	r24, r24
 47a:	28 2f       	mov	r18, r24
 47c:	22 0f       	add	r18, r18
 47e:	22 0f       	add	r18, r18
 480:	82 0f       	add	r24, r18
 482:	98 1b       	sub	r25, r24
 484:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <z4>
			
			
			break;
 488:	f2 c0       	rjmp	.+484    	; 0x66e <__stack+0x20f>
			case 1: //tryb 2
			
			ObsluzPrzycisk(&flagaPrzycisku, &flagaZatrzymania);
 48a:	66 e6       	ldi	r22, 0x66	; 102
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	09 df       	rcall	.-494    	; 0x2a6 <ObsluzPrzycisk>
			wyzerowanie();
 494:	52 df       	rcall	.-348    	; 0x33a <wyzerowanie>
			licznikStopera = licznikCzasu/10;
 496:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 49a:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 49e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
 4a2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
 4a6:	2a e0       	ldi	r18, 0x0A	; 10
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	64 d4       	rcall	.+2248   	; 0xd78 <__udivmodsi4>
 4b0:	69 01       	movw	r12, r18
 4b2:	7a 01       	movw	r14, r20
 4b4:	f9 01       	movw	r30, r18
 4b6:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <licznikStopera+0x1>
 4ba:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <licznikStopera>
			if(licznikStopera > 100)
 4be:	25 36       	cpi	r18, 0x65	; 101
 4c0:	31 05       	cpc	r19, r1
 4c2:	20 f0       	brcs	.+8      	; 0x4cc <__stack+0x6d>
			{
				kropka = 1;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <kropka>
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__stack+0x71>
			}
			else
			{
				kropka = 0;
 4cc:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <kropka>
			}

			z1 = licznikStopera/1000;
 4d0:	96 01       	movw	r18, r12
 4d2:	36 95       	lsr	r19
 4d4:	27 95       	ror	r18
 4d6:	36 95       	lsr	r19
 4d8:	27 95       	ror	r18
 4da:	36 95       	lsr	r19
 4dc:	27 95       	ror	r18
 4de:	a5 ec       	ldi	r26, 0xC5	; 197
 4e0:	b0 e2       	ldi	r27, 0x20	; 32
 4e2:	6c d4       	rcall	.+2264   	; 0xdbc <__umulhisi3>
 4e4:	5c 01       	movw	r10, r24
 4e6:	b6 94       	lsr	r11
 4e8:	a7 94       	ror	r10
 4ea:	b6 94       	lsr	r11
 4ec:	a7 94       	ror	r10
 4ee:	b6 94       	lsr	r11
 4f0:	a7 94       	ror	r10
 4f2:	b6 94       	lsr	r11
 4f4:	a7 94       	ror	r10
 4f6:	a0 92 e3 00 	sts	0x00E3, r10	; 0x8000e3 <z1>

			z2 = (licznikStopera-(z1*1000))/100;
 4fa:	88 e1       	ldi	r24, 0x18	; 24
 4fc:	9c ef       	ldi	r25, 0xFC	; 252
 4fe:	a8 9e       	mul	r10, r24
 500:	80 01       	movw	r16, r0
 502:	a9 9e       	mul	r10, r25
 504:	10 0d       	add	r17, r0
 506:	b8 9e       	mul	r11, r24
 508:	10 0d       	add	r17, r0
 50a:	11 24       	eor	r1, r1
 50c:	98 01       	movw	r18, r16
 50e:	2c 0d       	add	r18, r12
 510:	3d 1d       	adc	r19, r13
 512:	36 95       	lsr	r19
 514:	27 95       	ror	r18
 516:	36 95       	lsr	r19
 518:	27 95       	ror	r18
 51a:	ab e7       	ldi	r26, 0x7B	; 123
 51c:	b4 e1       	ldi	r27, 0x14	; 20
 51e:	4e d4       	rcall	.+2204   	; 0xdbc <__umulhisi3>
 520:	4c 01       	movw	r8, r24
 522:	96 94       	lsr	r9
 524:	87 94       	ror	r8
 526:	80 92 e2 00 	sts	0x00E2, r8	; 0x8000e2 <z2>
			
			z3 = (licznikStopera-(z1*1000)-(z2*100))/10;
 52a:	4c e9       	ldi	r20, 0x9C	; 156
 52c:	58 2d       	mov	r21, r8
 52e:	45 03       	mulsu	r20, r21
 530:	90 01       	movw	r18, r0
 532:	11 24       	eor	r1, r1
 534:	20 0f       	add	r18, r16
 536:	31 1f       	adc	r19, r17
 538:	2c 0d       	add	r18, r12
 53a:	3d 1d       	adc	r19, r13
 53c:	ad ec       	ldi	r26, 0xCD	; 205
 53e:	bc ec       	ldi	r27, 0xCC	; 204
 540:	3d d4       	rcall	.+2170   	; 0xdbc <__umulhisi3>
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <z3>

			z4 = (licznikStopera-(z1*1000)-(z2*100)-(z3*10));
 552:	48 9d       	mul	r20, r8
 554:	40 2d       	mov	r20, r0
 556:	11 24       	eor	r1, r1
 558:	68 e1       	ldi	r22, 0x18	; 24
 55a:	a6 9e       	mul	r10, r22
 55c:	40 0d       	add	r20, r0
 55e:	11 24       	eor	r1, r1
 560:	c4 0e       	add	r12, r20
 562:	88 0f       	add	r24, r24
 564:	98 2f       	mov	r25, r24
 566:	99 0f       	add	r25, r25
 568:	99 0f       	add	r25, r25
 56a:	89 0f       	add	r24, r25
 56c:	c8 1a       	sub	r12, r24
 56e:	c0 92 e4 00 	sts	0x00E4, r12	; 0x8000e4 <z4>


			if(licznikStopera == 9999) wylaczLicznikCzasu();
 572:	ef 30       	cpi	r30, 0x0F	; 15
 574:	f7 42       	sbci	r31, 0x27	; 39
 576:	09 f0       	breq	.+2      	; 0x57a <__stack+0x11b>
 578:	7a c0       	rjmp	.+244    	; 0x66e <__stack+0x20f>
 57a:	69 de       	rcall	.-814    	; 0x24e <wylaczLicznikCzasu>
 57c:	78 c0       	rjmp	.+240    	; 0x66e <__stack+0x20f>
			
			break;
			case 2:
				switch (flagaMinutnika)
 57e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flagaMinutnika>
 582:	88 23       	and	r24, r24
 584:	19 f0       	breq	.+6      	; 0x58c <__stack+0x12d>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	21 f0       	breq	.+8      	; 0x592 <__stack+0x133>
 58a:	1e c0       	rjmp	.+60     	; 0x5c8 <__stack+0x169>
				{
					case 0:
					
					MinutnikZmianaWartosciWGore();
 58c:	57 d1       	rcall	.+686    	; 0x83c <MinutnikZmianaWartosciWGore>
					MinutnikPrzyciskRozpoczynajacyOdliczanie();
 58e:	40 d1       	rcall	.+640    	; 0x810 <MinutnikPrzyciskRozpoczynajacyOdliczanie>
					
					break;
 590:	1b c0       	rjmp	.+54     	; 0x5c8 <__stack+0x169>
					
					case 1:
				
					MinutnikWyzerowanie();
 592:	46 d1       	rcall	.+652    	; 0x820 <MinutnikWyzerowanie>

					licznikMinutnika=licznikMinutnikaStartowy-(licznikCzasu/10);
 594:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 598:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 59c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
 5a0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
 5a4:	2a e0       	ldi	r18, 0x0A	; 10
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	e5 d3       	rcall	.+1994   	; 0xd78 <__udivmodsi4>
 5ae:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <licznikMinutnikaStartowy>
 5b2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <licznikMinutnikaStartowy+0x1>
 5b6:	82 1b       	sub	r24, r18
 5b8:	93 0b       	sbc	r25, r19
 5ba:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <licznikMinutnika+0x1>
 5be:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <licznikMinutnika>
				

					if(licznikMinutnika == 0) wylaczLicznikCzasu();
 5c2:	89 2b       	or	r24, r25
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <__stack+0x169>
 5c6:	43 de       	rcall	.-890    	; 0x24e <wylaczLicznikCzasu>
					break;
				}
				
			z1 = licznikMinutnika/1000;
 5c8:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <licznikMinutnika>
 5cc:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <licznikMinutnika+0x1>
 5d0:	9a 01       	movw	r18, r20
 5d2:	36 95       	lsr	r19
 5d4:	27 95       	ror	r18
 5d6:	36 95       	lsr	r19
 5d8:	27 95       	ror	r18
 5da:	36 95       	lsr	r19
 5dc:	27 95       	ror	r18
 5de:	a5 ec       	ldi	r26, 0xC5	; 197
 5e0:	b0 e2       	ldi	r27, 0x20	; 32
 5e2:	ec d3       	rcall	.+2008   	; 0xdbc <__umulhisi3>
 5e4:	8c 01       	movw	r16, r24
 5e6:	12 95       	swap	r17
 5e8:	02 95       	swap	r16
 5ea:	0f 70       	andi	r16, 0x0F	; 15
 5ec:	01 27       	eor	r16, r17
 5ee:	1f 70       	andi	r17, 0x0F	; 15
 5f0:	01 27       	eor	r16, r17
 5f2:	00 93 e3 00 	sts	0x00E3, r16	; 0x8000e3 <z1>

			z2 = (licznikMinutnika-(z1*1000))/100;
 5f6:	88 e1       	ldi	r24, 0x18	; 24
 5f8:	9c ef       	ldi	r25, 0xFC	; 252
 5fa:	08 9f       	mul	r16, r24
 5fc:	f0 01       	movw	r30, r0
 5fe:	09 9f       	mul	r16, r25
 600:	f0 0d       	add	r31, r0
 602:	18 9f       	mul	r17, r24
 604:	f0 0d       	add	r31, r0
 606:	11 24       	eor	r1, r1
 608:	9a 01       	movw	r18, r20
 60a:	2e 0f       	add	r18, r30
 60c:	3f 1f       	adc	r19, r31
 60e:	36 95       	lsr	r19
 610:	27 95       	ror	r18
 612:	36 95       	lsr	r19
 614:	27 95       	ror	r18
 616:	ab e7       	ldi	r26, 0x7B	; 123
 618:	b4 e1       	ldi	r27, 0x14	; 20
 61a:	d0 d3       	rcall	.+1952   	; 0xdbc <__umulhisi3>
 61c:	7c 01       	movw	r14, r24
 61e:	f6 94       	lsr	r15
 620:	e7 94       	ror	r14
 622:	e0 92 e2 00 	sts	0x00E2, r14	; 0x8000e2 <z2>
			
			z3 = (licznikMinutnika-(z1*1000)-(z2*100))/10;
 626:	1c e9       	ldi	r17, 0x9C	; 156
 628:	6e 2d       	mov	r22, r14
 62a:	16 03       	mulsu	r17, r22
 62c:	90 01       	movw	r18, r0
 62e:	11 24       	eor	r1, r1
 630:	2e 0f       	add	r18, r30
 632:	3f 1f       	adc	r19, r31
 634:	24 0f       	add	r18, r20
 636:	35 1f       	adc	r19, r21
 638:	ad ec       	ldi	r26, 0xCD	; 205
 63a:	bc ec       	ldi	r27, 0xCC	; 204
 63c:	bf d3       	rcall	.+1918   	; 0xdbc <__umulhisi3>
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <z3>

			z4 = (licznikMinutnika-(z1*1000)-(z2*100)-(z3*10));
 64e:	1e 9d       	mul	r17, r14
 650:	10 2d       	mov	r17, r0
 652:	11 24       	eor	r1, r1
 654:	28 e1       	ldi	r18, 0x18	; 24
 656:	02 9f       	mul	r16, r18
 658:	10 0d       	add	r17, r0
 65a:	11 24       	eor	r1, r1
 65c:	41 0f       	add	r20, r17
 65e:	88 0f       	add	r24, r24
 660:	98 2f       	mov	r25, r24
 662:	99 0f       	add	r25, r25
 664:	99 0f       	add	r25, r25
 666:	89 0f       	add	r24, r25
 668:	48 1b       	sub	r20, r24
 66a:	40 93 e4 00 	sts	0x00E4, r20	; 0x8000e4 <z4>
			default:
			/* Your code here */
			break;
		}

		ObsluzPrzyciskZmianyTrybu();
 66e:	49 de       	rcall	.-878    	; 0x302 <ObsluzPrzyciskZmianyTrybu>
	}
 670:	c9 ce       	rjmp	.-622    	; 0x404 <__DATA_REGION_LENGTH__+0x4>

00000672 <PodajZnak>:
void obsluzKropke();

unsigned int PodajZnak(uint8_t znak)
{

	switch (znak)
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	fc 01       	movw	r30, r24
 676:	31 97       	sbiw	r30, 0x01	; 1
 678:	e9 30       	cpi	r30, 0x09	; 9
 67a:	f1 05       	cpc	r31, r1
 67c:	18 f4       	brcc	.+6      	; 0x684 <PodajZnak+0x12>
 67e:	ed 5e       	subi	r30, 0xED	; 237
 680:	ff 4f       	sbci	r31, 0xFF	; 255
 682:	09 94       	ijmp
	{
		case 0:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
 684:	8c ef       	ldi	r24, 0xFC	; 252
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	08 95       	ret
		case 1:
		return (SEG_B|SEG_C) ;
		case 2:
		return (SEG_A|SEG_B|SEG_G|SEG_E|SEG_D);
 68a:	8a ed       	ldi	r24, 0xDA	; 218
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	08 95       	ret
		case 3:
		return (SEG_A|SEG_B|SEG_G|SEG_C|SEG_D);
 690:	82 ef       	ldi	r24, 0xF2	; 242
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	08 95       	ret
		case 4:
		return (SEG_F|SEG_G|SEG_B|SEG_C);
 696:	86 e6       	ldi	r24, 0x66	; 102
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	08 95       	ret
		case 5:
		return(SEG_A|SEG_F|SEG_G|SEG_C|SEG_D);
 69c:	86 eb       	ldi	r24, 0xB6	; 182
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	08 95       	ret
		case 6:
		return (SEG_A|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G);
 6a2:	8e eb       	ldi	r24, 0xBE	; 190
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	08 95       	ret
		case 7:
		return (SEG_A|SEG_B|SEG_C);
 6a8:	80 ee       	ldi	r24, 0xE0	; 224
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	08 95       	ret
		case 8:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G);
 6ae:	8e ef       	ldi	r24, 0xFE	; 254
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	08 95       	ret
		case 9:
		return(SEG_A|SEG_B|SEG_C|SEG_D|SEG_F|SEG_G);
 6b4:	86 ef       	ldi	r24, 0xF6	; 246
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret
	switch (znak)
	{
		case 0:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
		case 1:
		return (SEG_B|SEG_C) ;
 6ba:	80 e6       	ldi	r24, 0x60	; 96
 6bc:	90 e0       	ldi	r25, 0x00	; 0
		
		default:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
	}
	
}
 6be:	08 95       	ret

000006c0 <wyswietl>:

void wyswietl(uint8_t segment, uint8_t cyfra)
{

	KATODY_PORT=0;
 6c0:	18 ba       	out	0x18, r1	; 24

	switch (segment)
 6c2:	82 30       	cpi	r24, 0x02	; 2
 6c4:	79 f0       	breq	.+30     	; 0x6e4 <wyswietl+0x24>
 6c6:	18 f4       	brcc	.+6      	; 0x6ce <wyswietl+0xe>
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <wyswietl+0x18>
 6cc:	08 95       	ret
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	81 f0       	breq	.+32     	; 0x6f2 <wyswietl+0x32>
 6d2:	84 30       	cpi	r24, 0x04	; 4
 6d4:	a1 f0       	breq	.+40     	; 0x6fe <wyswietl+0x3e>
 6d6:	08 95       	ret
	{
		case 1:
		
		SEGMENTY_PORT =	PodajZnak(cyfra) ;//(SEG_A|SEG_B|SEG_G|SEG_C|SEG_D);
 6d8:	86 2f       	mov	r24, r22
 6da:	cb df       	rcall	.-106    	; 0x672 <PodajZnak>
 6dc:	82 bb       	out	0x12, r24	; 18
		KATODY_PORT=KATODA_1;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	88 bb       	out	0x18, r24	; 24
		
		
		break;
 6e2:	08 95       	ret
		case 2:
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 6e4:	86 2f       	mov	r24, r22
 6e6:	c5 df       	rcall	.-118    	; 0x672 <PodajZnak>
 6e8:	82 bb       	out	0x12, r24	; 18
		obsluzKropke();
 6ea:	8b dd       	rcall	.-1258   	; 0x202 <obsluzKropke>
		KATODY_PORT=KATODA_2;
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	88 bb       	out	0x18, r24	; 24
		
		break;
 6f0:	08 95       	ret
		case 3:
		
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 6f2:	86 2f       	mov	r24, r22
 6f4:	be df       	rcall	.-132    	; 0x672 <PodajZnak>
 6f6:	82 bb       	out	0x12, r24	; 18
		KATODY_PORT=KATODA_3;
 6f8:	84 e0       	ldi	r24, 0x04	; 4
 6fa:	88 bb       	out	0x18, r24	; 24
		
		break;
 6fc:	08 95       	ret
		case 4:
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 6fe:	86 2f       	mov	r24, r22
 700:	b8 df       	rcall	.-144    	; 0x672 <PodajZnak>
 702:	82 bb       	out	0x12, r24	; 18
		KATODY_PORT=KATODA_4;
 704:	88 e0       	ldi	r24, 0x08	; 8
 706:	88 bb       	out	0x18, r24	; 24
 708:	08 95       	ret

0000070a <multipleks_init>:
		/* Your code here */
		break;
	}
}
void multipleks_init( void )	{
		SEGMENTY_DDR = 0xff;
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	81 bb       	out	0x11, r24	; 17
		SEGMENTY_PORT = 0xff;
 70e:	82 bb       	out	0x12, r24	; 18

		KATODY_DDR |= KATODA_1 | KATODA_2 | KATODA_3 | KATODA_4;
 710:	97 b3       	in	r25, 0x17	; 23
 712:	9f 60       	ori	r25, 0x0F	; 15
 714:	97 bb       	out	0x17, r25	; 23
		KATODY_PORT = 0x00;
 716:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 718:	2f ef       	ldi	r18, 0xFF	; 255
 71a:	39 e6       	ldi	r19, 0x69	; 105
 71c:	98 e1       	ldi	r25, 0x18	; 24
 71e:	21 50       	subi	r18, 0x01	; 1
 720:	30 40       	sbci	r19, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <multipleks_init+0x14>
 726:	00 c0       	rjmp	.+0      	; 0x728 <multipleks_init+0x1e>
 728:	00 00       	nop

		_delay_ms (1000);
		KATODY_PORT = 0xff;
 72a:	88 bb       	out	0x18, r24	; 24
 72c:	2f ef       	ldi	r18, 0xFF	; 255
 72e:	39 e6       	ldi	r19, 0x69	; 105
 730:	88 e1       	ldi	r24, 0x18	; 24
 732:	21 50       	subi	r18, 0x01	; 1
 734:	30 40       	sbci	r19, 0x00	; 0
 736:	80 40       	sbci	r24, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <multipleks_init+0x28>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <multipleks_init+0x32>
 73c:	00 00       	nop
		_delay_ms (1000);
		KATODY_PORT = 0x00;
 73e:	18 ba       	out	0x18, r1	; 24
 740:	9f ef       	ldi	r25, 0xFF	; 255
 742:	29 e6       	ldi	r18, 0x69	; 105
 744:	38 e1       	ldi	r19, 0x18	; 24
 746:	91 50       	subi	r25, 0x01	; 1
 748:	20 40       	sbci	r18, 0x00	; 0
 74a:	30 40       	sbci	r19, 0x00	; 0
 74c:	e1 f7       	brne	.-8      	; 0x746 <multipleks_init+0x3c>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <multipleks_init+0x46>
 750:	00 00       	nop
		_delay_ms (1000);
		SEGMENTY_PORT = 0;
 752:	12 ba       	out	0x12, r1	; 18

		TCCR2 |= (1<<WGM21);
 754:	85 b5       	in	r24, 0x25	; 37
 756:	88 60       	ori	r24, 0x08	; 8
 758:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= (1<<CS22)|(1<<CS21);
 75a:	85 b5       	in	r24, 0x25	; 37
 75c:	86 60       	ori	r24, 0x06	; 6
 75e:	85 bd       	out	0x25, r24	; 37
		OCR2 = 155;
 760:	8b e9       	ldi	r24, 0x9B	; 155
 762:	83 bd       	out	0x23, r24	; 35
		TIMSK |= (1<<OCIE2);
 764:	89 b7       	in	r24, 0x39	; 57
 766:	80 68       	ori	r24, 0x80	; 128
 768:	89 bf       	out	0x39, r24	; 57
 76a:	08 95       	ret

0000076c <__vector_3>:
}

ISR(	TIMER2_COMP_vect	) {
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	2f 93       	push	r18
 778:	3f 93       	push	r19
 77a:	4f 93       	push	r20
 77c:	5f 93       	push	r21
 77e:	6f 93       	push	r22
 780:	7f 93       	push	r23
 782:	8f 93       	push	r24
 784:	9f 93       	push	r25
 786:	af 93       	push	r26
 788:	bf 93       	push	r27
 78a:	ef 93       	push	r30
 78c:	ff 93       	push	r31

	//static uint8_t licznik;

switch (numerZnaku)
 78e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	79 f0       	breq	.+30     	; 0x7b4 <__vector_3+0x48>
 796:	18 f4       	brcc	.+6      	; 0x79e <__vector_3+0x32>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	31 f0       	breq	.+12     	; 0x7a8 <__vector_3+0x3c>
 79c:	1c c0       	rjmp	.+56     	; 0x7d6 <__vector_3+0x6a>
 79e:	83 30       	cpi	r24, 0x03	; 3
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <__vector_3+0x54>
 7a2:	84 30       	cpi	r24, 0x04	; 4
 7a4:	99 f0       	breq	.+38     	; 0x7cc <__vector_3+0x60>
 7a6:	17 c0       	rjmp	.+46     	; 0x7d6 <__vector_3+0x6a>
{
	case 1:
	wyswietl(numerZnaku,z1);
 7a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7ac:	60 91 e3 00 	lds	r22, 0x00E3	; 0x8000e3 <z1>
 7b0:	87 df       	rcall	.-242    	; 0x6c0 <wyswietl>
	break;
 7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <__vector_3+0x6a>
		case 2:
		wyswietl(numerZnaku,z2);
 7b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7b8:	60 91 e2 00 	lds	r22, 0x00E2	; 0x8000e2 <z2>
 7bc:	81 df       	rcall	.-254    	; 0x6c0 <wyswietl>
		break;
 7be:	0b c0       	rjmp	.+22     	; 0x7d6 <__vector_3+0x6a>
			case 3:
			wyswietl(numerZnaku,z3);
 7c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7c4:	60 91 e5 00 	lds	r22, 0x00E5	; 0x8000e5 <z3>
 7c8:	7b df       	rcall	.-266    	; 0x6c0 <wyswietl>
			break;
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <__vector_3+0x6a>
				case 4:
				wyswietl(numerZnaku,z4);
 7cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7d0:	60 91 e4 00 	lds	r22, 0x00E4	; 0x8000e4 <z4>
 7d4:	75 df       	rcall	.-278    	; 0x6c0 <wyswietl>
	/* Your code here */
	break;
}
	

	numerZnaku++;
 7d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7da:	8f 5f       	subi	r24, 0xFF	; 255
 7dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if( numerZnaku > 4 ) numerZnaku = 1;
 7e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7e4:	85 30       	cpi	r24, 0x05	; 5
 7e6:	18 f0       	brcs	.+6      	; 0x7ee <__vector_3+0x82>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
   


}
 7ee:	ff 91       	pop	r31
 7f0:	ef 91       	pop	r30
 7f2:	bf 91       	pop	r27
 7f4:	af 91       	pop	r26
 7f6:	9f 91       	pop	r25
 7f8:	8f 91       	pop	r24
 7fa:	7f 91       	pop	r23
 7fc:	6f 91       	pop	r22
 7fe:	5f 91       	pop	r21
 800:	4f 91       	pop	r20
 802:	3f 91       	pop	r19
 804:	2f 91       	pop	r18
 806:	0f 90       	pop	r0
 808:	0f be       	out	0x3f, r0	; 63
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <MinutnikPrzyciskRozpoczynajacyOdliczanie>:
uint16_t licznikMinutnikaStartowy = 0;
uint8_t flagaMinutnika = 0;

void MinutnikPrzyciskRozpoczynajacyOdliczanie()
{
	if(!(PINC & (1<<PINC3)))
 810:	9b 99       	sbic	0x13, 3	; 19
 812:	05 c0       	rjmp	.+10     	; 0x81e <MinutnikPrzyciskRozpoczynajacyOdliczanie+0xe>
	{
		while(!(PINC & (1<<PINC3))){}
 814:	9b 9b       	sbis	0x13, 3	; 19
 816:	fe cf       	rjmp	.-4      	; 0x814 <MinutnikPrzyciskRozpoczynajacyOdliczanie+0x4>
		flagaMinutnika=1;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flagaMinutnika>
 81e:	08 95       	ret

00000820 <MinutnikWyzerowanie>:
	}
}

void MinutnikWyzerowanie()
{
	if(!(PINB & (1<<PINB4)))
 820:	b4 99       	sbic	0x16, 4	; 22
 822:	0b c0       	rjmp	.+22     	; 0x83a <MinutnikWyzerowanie+0x1a>
	{
		while(!(PINB & (1<<PINB4))){}
 824:	b4 9b       	sbis	0x16, 4	; 22
 826:	fe cf       	rjmp	.-4      	; 0x824 <MinutnikWyzerowanie+0x4>
		licznikMinutnikaStartowy=licznikMinutnika;
 828:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <licznikMinutnika>
 82c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <licznikMinutnika+0x1>
 830:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <licznikMinutnikaStartowy+0x1>
 834:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <licznikMinutnikaStartowy>
		uruchomLicznikCzasu();
 838:	11 dd       	rcall	.-1502   	; 0x25c <uruchomLicznikCzasu>
 83a:	08 95       	ret

0000083c <MinutnikZmianaWartosciWGore>:
	}
}

void MinutnikZmianaWartosciWGore()
{
	if(!(PINB & (1<<PINB4)))
 83c:	b4 99       	sbic	0x16, 4	; 22
 83e:	14 c0       	rjmp	.+40     	; 0x868 <MinutnikZmianaWartosciWGore+0x2c>
 840:	2f ef       	ldi	r18, 0xFF	; 255
 842:	80 e7       	ldi	r24, 0x70	; 112
 844:	92 e0       	ldi	r25, 0x02	; 2
 846:	21 50       	subi	r18, 0x01	; 1
 848:	80 40       	sbci	r24, 0x00	; 0
 84a:	90 40       	sbci	r25, 0x00	; 0
 84c:	e1 f7       	brne	.-8      	; 0x846 <MinutnikZmianaWartosciWGore+0xa>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <MinutnikZmianaWartosciWGore+0x14>
 850:	00 00       	nop
	{
		_delay_ms(100);
		
		if(!(PINB & (1<<PINB4))) licznikMinutnika++;
 852:	b4 99       	sbic	0x16, 4	; 22
 854:	09 c0       	rjmp	.+18     	; 0x868 <MinutnikZmianaWartosciWGore+0x2c>
 856:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <licznikMinutnika>
 85a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <licznikMinutnika+0x1>
 85e:	01 96       	adiw	r24, 0x01	; 1
 860:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <licznikMinutnika+0x1>
 864:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <licznikMinutnika>
 868:	08 95       	ret

0000086a <P1_init>:
#include <avr/io.h>
#include "Przyciski.h"

void P1_init()
{
	P1_DDR&=~(1<<P1_PIN);
 86a:	87 b3       	in	r24, 0x17	; 23
 86c:	8f 7d       	andi	r24, 0xDF	; 223
 86e:	87 bb       	out	0x17, r24	; 23
	P1_PORT|=(1<<P1_PIN);
 870:	88 b3       	in	r24, 0x18	; 24
 872:	80 62       	ori	r24, 0x20	; 32
 874:	88 bb       	out	0x18, r24	; 24
 876:	08 95       	ret

00000878 <P2_init>:



void P2_init()
{
	P2_DDR&=~(1<<P2_PIN);
 878:	87 b3       	in	r24, 0x17	; 23
 87a:	8f 7e       	andi	r24, 0xEF	; 239
 87c:	87 bb       	out	0x17, r24	; 23
	P2_PORT|=(1<<P2_PIN);
 87e:	88 b3       	in	r24, 0x18	; 24
 880:	80 61       	ori	r24, 0x10	; 16
 882:	88 bb       	out	0x18, r24	; 24
 884:	08 95       	ret

00000886 <P3_init>:



void P3_init()
{
	P3_DDR&=~(1<<P3_PIN);
 886:	84 b3       	in	r24, 0x14	; 20
 888:	8b 7f       	andi	r24, 0xFB	; 251
 88a:	84 bb       	out	0x14, r24	; 20
	P3_PORT|=(1<<P3_PIN);
 88c:	85 b3       	in	r24, 0x15	; 21
 88e:	84 60       	ori	r24, 0x04	; 4
 890:	85 bb       	out	0x15, r24	; 21
 892:	08 95       	ret

00000894 <P4_init>:



void P4_init()
{
	P4_DDR&=~(1<<P4_PIN);
 894:	84 b3       	in	r24, 0x14	; 20
 896:	87 7f       	andi	r24, 0xF7	; 247
 898:	84 bb       	out	0x14, r24	; 20
	P4_PORT|=(1<<P4_PIN);
 89a:	85 b3       	in	r24, 0x15	; 21
 89c:	88 60       	ori	r24, 0x08	; 8
 89e:	85 bb       	out	0x15, r24	; 21
 8a0:	08 95       	ret

000008a2 <bcd2dec>:
		_tm.twelveHour = _tm.hour - 12;
		_tm.am = 0;
	}

	return &_tm;
}
 8a2:	98 2f       	mov	r25, r24
 8a4:	92 95       	swap	r25
 8a6:	9f 70       	andi	r25, 0x0F	; 15
 8a8:	99 0f       	add	r25, r25
 8aa:	29 2f       	mov	r18, r25
 8ac:	22 0f       	add	r18, r18
 8ae:	22 0f       	add	r18, r18
 8b0:	92 0f       	add	r25, r18
 8b2:	8f 70       	andi	r24, 0x0F	; 15
 8b4:	89 0f       	add	r24, r25
 8b6:	08 95       	ret

000008b8 <rtc_get_time_s>:

void rtc_get_time_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
{
 8b8:	8f 92       	push	r8
 8ba:	9f 92       	push	r9
 8bc:	af 92       	push	r10
 8be:	bf 92       	push	r11
 8c0:	cf 92       	push	r12
 8c2:	df 92       	push	r13
 8c4:	ef 92       	push	r14
 8c6:	ff 92       	push	r15
 8c8:	1f 93       	push	r17
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	29 97       	sbiw	r28, 0x09	; 9
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	6c 01       	movw	r12, r24
 8e0:	5b 01       	movw	r10, r22
 8e2:	4a 01       	movw	r8, r20
	uint8_t rtc[9];

	// read 7 bytes starting from register 0
	// sec, min, hour, day-of-week, date, month, year
	twi_begin_transmission(RTC_ADDR);
 8e4:	88 e6       	ldi	r24, 0x68	; 104
 8e6:	fa d1       	rcall	.+1012   	; 0xcdc <twi_begin_transmission>
	twi_send_byte(0x0);
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	11 d2       	rcall	.+1058   	; 0xd0e <twi_send_byte>
	twi_end_transmission();
 8ec:	01 d2       	rcall	.+1026   	; 0xcf0 <twi_end_transmission>
	
	twi_request_from(RTC_ADDR, 7);
 8ee:	67 e0       	ldi	r22, 0x07	; 7
 8f0:	88 e6       	ldi	r24, 0x68	; 104
 8f2:	e8 d1       	rcall	.+976    	; 0xcc4 <twi_request_from>
	
	for(uint8_t i=0; i<7; i++) {
 8f4:	10 e0       	ldi	r17, 0x00	; 0
 8f6:	0b c0       	rjmp	.+22     	; 0x90e <rtc_get_time_s+0x56>
		rtc[i] = twi_receive();
 8f8:	e1 2e       	mov	r14, r17
 8fa:	f1 2c       	mov	r15, r1
 8fc:	2c d2       	rcall	.+1112   	; 0xd56 <twi_receive>
 8fe:	e1 e0       	ldi	r30, 0x01	; 1
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	ec 0f       	add	r30, r28
 904:	fd 1f       	adc	r31, r29
 906:	ee 0d       	add	r30, r14
 908:	ff 1d       	adc	r31, r15
 90a:	80 83       	st	Z, r24
	twi_send_byte(0x0);
	twi_end_transmission();
	
	twi_request_from(RTC_ADDR, 7);
	
	for(uint8_t i=0; i<7; i++) {
 90c:	1f 5f       	subi	r17, 0xFF	; 255
 90e:	17 30       	cpi	r17, 0x07	; 7
 910:	98 f3       	brcs	.-26     	; 0x8f8 <rtc_get_time_s+0x40>
		rtc[i] = twi_receive();
	}
	
	twi_end_transmission();
 912:	ee d1       	rcall	.+988    	; 0xcf0 <twi_end_transmission>
	
	if (sec)  *sec =  bcd2dec(rtc[0]);
 914:	81 14       	cp	r8, r1
 916:	91 04       	cpc	r9, r1
 918:	21 f0       	breq	.+8      	; 0x922 <rtc_get_time_s+0x6a>
 91a:	89 81       	ldd	r24, Y+1	; 0x01
 91c:	c2 df       	rcall	.-124    	; 0x8a2 <bcd2dec>
 91e:	f4 01       	movw	r30, r8
 920:	80 83       	st	Z, r24
	if (min)  *min =  bcd2dec(rtc[1]);
 922:	a1 14       	cp	r10, r1
 924:	b1 04       	cpc	r11, r1
 926:	21 f0       	breq	.+8      	; 0x930 <rtc_get_time_s+0x78>
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	bb df       	rcall	.-138    	; 0x8a2 <bcd2dec>
 92c:	f5 01       	movw	r30, r10
 92e:	80 83       	st	Z, r24
	if (hour) *hour = bcd2dec(rtc[2]);
 930:	c1 14       	cp	r12, r1
 932:	d1 04       	cpc	r13, r1
 934:	21 f0       	breq	.+8      	; 0x93e <rtc_get_time_s+0x86>
 936:	8b 81       	ldd	r24, Y+3	; 0x03
 938:	b4 df       	rcall	.-152    	; 0x8a2 <bcd2dec>
 93a:	f6 01       	movw	r30, r12
 93c:	80 83       	st	Z, r24
}
 93e:	29 96       	adiw	r28, 0x09	; 9
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	ff 90       	pop	r15
 952:	ef 90       	pop	r14
 954:	df 90       	pop	r13
 956:	cf 90       	pop	r12
 958:	bf 90       	pop	r11
 95a:	af 90       	pop	r10
 95c:	9f 90       	pop	r9
 95e:	8f 90       	pop	r8
 960:	08 95       	ret

00000962 <twi_init>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
 962:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
 966:	82 b3       	in	r24, 0x12	; 18
 968:	81 60       	ori	r24, 0x01	; 1
 96a:	82 bb       	out	0x12, r24	; 18
 96c:	82 b3       	in	r24, 0x12	; 18
 96e:	82 60       	ori	r24, 0x02	; 2
 970:	82 bb       	out	0x12, r24	; 18
 972:	81 b1       	in	r24, 0x01	; 1
 974:	8e 7f       	andi	r24, 0xFE	; 254
 976:	81 b9       	out	0x01, r24	; 1
 978:	81 b1       	in	r24, 0x01	; 1
 97a:	8d 7f       	andi	r24, 0xFD	; 253
 97c:	81 b9       	out	0x01, r24	; 1
 97e:	84 e2       	ldi	r24, 0x24	; 36
 980:	80 b9       	out	0x00, r24	; 0
 982:	85 e4       	ldi	r24, 0x45	; 69
 984:	86 bf       	out	0x36, r24	; 54
 986:	08 95       	ret

00000988 <twi_readFrom>:
 988:	41 32       	cpi	r20, 0x21	; 33
 98a:	90 f5       	brcc	.+100    	; 0x9f0 <twi_readFrom+0x68>
 98c:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <twi_state>
 990:	91 11       	cpse	r25, r1
 992:	fc cf       	rjmp	.-8      	; 0x98c <twi_readFrom+0x4>
 994:	91 e0       	ldi	r25, 0x01	; 1
 996:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <twi_state>
 99a:	9f ef       	ldi	r25, 0xFF	; 255
 99c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <twi_error>
 9a0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <twi_masterBufferIndex>
 9a4:	94 0f       	add	r25, r20
 9a6:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <twi_masterBufferLength>
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	81 60       	ori	r24, 0x01	; 1
 9b2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <twi_slarw>
 9b6:	85 ee       	ldi	r24, 0xE5	; 229
 9b8:	86 bf       	out	0x36, r24	; 54
 9ba:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <twi_state>
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	e1 f3       	breq	.-8      	; 0x9ba <twi_readFrom+0x32>
 9c2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 9c6:	84 17       	cp	r24, r20
 9c8:	10 f4       	brcc	.+4      	; 0x9ce <twi_readFrom+0x46>
 9ca:	40 91 b3 00 	lds	r20, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <twi_readFrom+0x60>
 9d2:	29 2f       	mov	r18, r25
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	fb 01       	movw	r30, r22
 9d8:	e2 0f       	add	r30, r18
 9da:	f3 1f       	adc	r31, r19
 9dc:	d9 01       	movw	r26, r18
 9de:	ac 54       	subi	r26, 0x4C	; 76
 9e0:	bf 4f       	sbci	r27, 0xFF	; 255
 9e2:	2c 91       	ld	r18, X
 9e4:	20 83       	st	Z, r18
 9e6:	9f 5f       	subi	r25, 0xFF	; 255
 9e8:	94 17       	cp	r25, r20
 9ea:	98 f3       	brcs	.-26     	; 0x9d2 <twi_readFrom+0x4a>
 9ec:	84 2f       	mov	r24, r20
 9ee:	08 95       	ret
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	08 95       	ret

000009f4 <twi_writeTo>:
 9f4:	41 32       	cpi	r20, 0x21	; 33
 9f6:	b8 f5       	brcc	.+110    	; 0xa66 <twi_writeTo+0x72>
 9f8:	50 91 d9 00 	lds	r21, 0x00D9	; 0x8000d9 <twi_state>
 9fc:	51 11       	cpse	r21, r1
 9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <twi_writeTo+0x4>
 a00:	92 e0       	ldi	r25, 0x02	; 2
 a02:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <twi_state>
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <twi_error>
 a0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <twi_masterBufferIndex>
 a10:	40 93 b2 00 	sts	0x00B2, r20	; 0x8000b2 <twi_masterBufferLength>
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0a c0       	rjmp	.+20     	; 0xa2c <twi_writeTo+0x38>
 a18:	e9 2f       	mov	r30, r25
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	db 01       	movw	r26, r22
 a1e:	ae 0f       	add	r26, r30
 a20:	bf 1f       	adc	r27, r31
 a22:	3c 91       	ld	r19, X
 a24:	ec 54       	subi	r30, 0x4C	; 76
 a26:	ff 4f       	sbci	r31, 0xFF	; 255
 a28:	30 83       	st	Z, r19
 a2a:	9f 5f       	subi	r25, 0xFF	; 255
 a2c:	94 17       	cp	r25, r20
 a2e:	a0 f3       	brcs	.-24     	; 0xa18 <twi_writeTo+0x24>
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	88 0f       	add	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <twi_slarw>
 a3a:	85 ee       	ldi	r24, 0xE5	; 229
 a3c:	86 bf       	out	0x36, r24	; 54
 a3e:	22 23       	and	r18, r18
 a40:	21 f0       	breq	.+8      	; 0xa4a <twi_writeTo+0x56>
 a42:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <twi_state>
 a46:	82 30       	cpi	r24, 0x02	; 2
 a48:	d1 f3       	breq	.-12     	; 0xa3e <twi_writeTo+0x4a>
 a4a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <twi_error>
 a4e:	8f 3f       	cpi	r24, 0xFF	; 255
 a50:	79 f0       	breq	.+30     	; 0xa70 <twi_writeTo+0x7c>
 a52:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <twi_error>
 a56:	80 32       	cpi	r24, 0x20	; 32
 a58:	41 f0       	breq	.+16     	; 0xa6a <twi_writeTo+0x76>
 a5a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <twi_error>
 a5e:	80 33       	cpi	r24, 0x30	; 48
 a60:	31 f4       	brne	.+12     	; 0xa6e <twi_writeTo+0x7a>
 a62:	53 e0       	ldi	r21, 0x03	; 3
 a64:	05 c0       	rjmp	.+10     	; 0xa70 <twi_writeTo+0x7c>
 a66:	51 e0       	ldi	r21, 0x01	; 1
 a68:	03 c0       	rjmp	.+6      	; 0xa70 <twi_writeTo+0x7c>
 a6a:	52 e0       	ldi	r21, 0x02	; 2
 a6c:	01 c0       	rjmp	.+2      	; 0xa70 <twi_writeTo+0x7c>
 a6e:	54 e0       	ldi	r21, 0x04	; 4
 a70:	85 2f       	mov	r24, r21
 a72:	08 95       	ret

00000a74 <twi_transmit>:
 a74:	dc 01       	movw	r26, r24
 a76:	61 32       	cpi	r22, 0x21	; 33
 a78:	b8 f4       	brcc	.+46     	; 0xaa8 <twi_transmit+0x34>
 a7a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <twi_state>
 a7e:	84 30       	cpi	r24, 0x04	; 4
 a80:	a9 f4       	brne	.+42     	; 0xaac <twi_transmit+0x38>
 a82:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <twi_txBufferLength>
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0b c0       	rjmp	.+22     	; 0xaa0 <twi_transmit+0x2c>
 a8a:	29 2f       	mov	r18, r25
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	fd 01       	movw	r30, r26
 a90:	e2 0f       	add	r30, r18
 a92:	f3 1f       	adc	r31, r19
 a94:	40 81       	ld	r20, Z
 a96:	f9 01       	movw	r30, r18
 a98:	ee 56       	subi	r30, 0x6E	; 110
 a9a:	ff 4f       	sbci	r31, 0xFF	; 255
 a9c:	40 83       	st	Z, r20
 a9e:	9f 5f       	subi	r25, 0xFF	; 255
 aa0:	96 17       	cp	r25, r22
 aa2:	98 f3       	brcs	.-26     	; 0xa8a <twi_transmit+0x16>
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	08 95       	ret
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	08 95       	ret
 aac:	82 e0       	ldi	r24, 0x02	; 2
 aae:	08 95       	ret

00000ab0 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
 ab0:	88 23       	and	r24, r24
 ab2:	19 f0       	breq	.+6      	; 0xaba <twi_reply+0xa>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 ab4:	85 ec       	ldi	r24, 0xC5	; 197
 ab6:	86 bf       	out	0x36, r24	; 54
 ab8:	08 95       	ret
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 aba:	85 e8       	ldi	r24, 0x85	; 133
 abc:	86 bf       	out	0x36, r24	; 54
 abe:	08 95       	ret

00000ac0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 ac0:	85 ed       	ldi	r24, 0xD5	; 213
 ac2:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 ac4:	06 b6       	in	r0, 0x36	; 54
 ac6:	04 fc       	sbrc	r0, 4
 ac8:	fd cf       	rjmp	.-6      	; 0xac4 <twi_stop+0x4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 aca:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
 ace:	08 95       	ret

00000ad0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 ad0:	85 ec       	ldi	r24, 0xC5	; 197
 ad2:	86 bf       	out	0x36, r24	; 54

  // update twi state
  twi_state = TWI_READY;
 ad4:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
 ad8:	08 95       	ret

00000ada <__vector_17>:
}

SIGNAL(TWI_vect)
{
 ada:	1f 92       	push	r1
 adc:	0f 92       	push	r0
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	0f 92       	push	r0
 ae2:	11 24       	eor	r1, r1
 ae4:	2f 93       	push	r18
 ae6:	3f 93       	push	r19
 ae8:	4f 93       	push	r20
 aea:	5f 93       	push	r21
 aec:	6f 93       	push	r22
 aee:	7f 93       	push	r23
 af0:	8f 93       	push	r24
 af2:	9f 93       	push	r25
 af4:	af 93       	push	r26
 af6:	bf 93       	push	r27
 af8:	ef 93       	push	r30
 afa:	ff 93       	push	r31
  switch(TW_STATUS){
 afc:	81 b1       	in	r24, 0x01	; 1
 afe:	e8 2f       	mov	r30, r24
 b00:	e8 7f       	andi	r30, 0xF8	; 248
 b02:	8e 2f       	mov	r24, r30
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	89 3c       	cpi	r24, 0xC9	; 201
 b08:	91 05       	cpc	r25, r1
 b0a:	08 f0       	brcs	.+2      	; 0xb0e <__vector_17+0x34>
 b0c:	c0 c0       	rjmp	.+384    	; 0xc8e <__vector_17+0x1b4>
 b0e:	fc 01       	movw	r30, r24
 b10:	e4 5e       	subi	r30, 0xE4	; 228
 b12:	ff 4f       	sbci	r31, 0xFF	; 255
 b14:	09 94       	ijmp
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 b16:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <twi_slarw>
 b1a:	83 b9       	out	0x03, r24	; 3
      twi_reply(1);
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	c8 df       	rcall	.-112    	; 0xab0 <twi_reply>
      break;
 b20:	b6 c0       	rjmp	.+364    	; 0xc8e <__vector_17+0x1b4>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 b22:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 b26:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <twi_masterBufferLength>
 b2a:	98 17       	cp	r25, r24
 b2c:	70 f4       	brcc	.+28     	; 0xb4a <__vector_17+0x70>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 b2e:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	8e 0f       	add	r24, r30
 b36:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <twi_masterBufferIndex>
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	ec 54       	subi	r30, 0x4C	; 76
 b3e:	ff 4f       	sbci	r31, 0xFF	; 255
 b40:	80 81       	ld	r24, Z
 b42:	83 b9       	out	0x03, r24	; 3
        twi_reply(1);
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	b4 df       	rcall	.-152    	; 0xab0 <twi_reply>
 b48:	a2 c0       	rjmp	.+324    	; 0xc8e <__vector_17+0x1b4>
      }else{
        twi_stop();
 b4a:	ba df       	rcall	.-140    	; 0xac0 <twi_stop>
 b4c:	a0 c0       	rjmp	.+320    	; 0xc8e <__vector_17+0x1b4>
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 b4e:	80 e2       	ldi	r24, 0x20	; 32
 b50:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <twi_error>
      twi_stop();
 b54:	b5 df       	rcall	.-150    	; 0xac0 <twi_stop>
      break;
 b56:	9b c0       	rjmp	.+310    	; 0xc8e <__vector_17+0x1b4>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 b58:	80 e3       	ldi	r24, 0x30	; 48
 b5a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <twi_error>
      twi_stop();
 b5e:	b0 df       	rcall	.-160    	; 0xac0 <twi_stop>
      break;
 b60:	96 c0       	rjmp	.+300    	; 0xc8e <__vector_17+0x1b4>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 b62:	88 e3       	ldi	r24, 0x38	; 56
 b64:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <twi_error>
      twi_releaseBus();
 b68:	b3 df       	rcall	.-154    	; 0xad0 <twi_releaseBus>
      break;
 b6a:	91 c0       	rjmp	.+290    	; 0xc8e <__vector_17+0x1b4>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 b6c:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 b70:	81 e0       	ldi	r24, 0x01	; 1
 b72:	8e 0f       	add	r24, r30
 b74:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <twi_masterBufferIndex>
 b78:	f0 e0       	ldi	r31, 0x00	; 0
 b7a:	83 b1       	in	r24, 0x03	; 3
 b7c:	ec 54       	subi	r30, 0x4C	; 76
 b7e:	ff 4f       	sbci	r31, 0xFF	; 255
 b80:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 b82:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 b86:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <twi_masterBufferLength>
 b8a:	98 17       	cp	r25, r24
 b8c:	18 f4       	brcc	.+6      	; 0xb94 <__vector_17+0xba>
        twi_reply(1);
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	8f df       	rcall	.-226    	; 0xab0 <twi_reply>
 b92:	7d c0       	rjmp	.+250    	; 0xc8e <__vector_17+0x1b4>
      }else{
        twi_reply(0);
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	8c df       	rcall	.-232    	; 0xab0 <twi_reply>
 b98:	7a c0       	rjmp	.+244    	; 0xc8e <__vector_17+0x1b4>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 b9a:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <twi_masterBufferIndex>
 b9e:	81 e0       	ldi	r24, 0x01	; 1
 ba0:	8e 0f       	add	r24, r30
 ba2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <twi_masterBufferIndex>
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	83 b1       	in	r24, 0x03	; 3
 baa:	ec 54       	subi	r30, 0x4C	; 76
 bac:	ff 4f       	sbci	r31, 0xFF	; 255
 bae:	80 83       	st	Z, r24
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 bb0:	87 df       	rcall	.-242    	; 0xac0 <twi_stop>
      break;
 bb2:	6d c0       	rjmp	.+218    	; 0xc8e <__vector_17+0x1b4>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 bb4:	83 e0       	ldi	r24, 0x03	; 3
 bb6:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 bba:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <twi_rxBufferIndex>
      twi_reply(1);
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	77 df       	rcall	.-274    	; 0xab0 <twi_reply>
      break;
 bc2:	65 c0       	rjmp	.+202    	; 0xc8e <__vector_17+0x1b4>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 bc4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <twi_rxBufferIndex>
 bc8:	80 32       	cpi	r24, 0x20	; 32
 bca:	70 f4       	brcc	.+28     	; 0xbe8 <__vector_17+0x10e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 bcc:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <twi_rxBufferIndex>
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	8e 0f       	add	r24, r30
 bd4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <twi_rxBufferIndex>
 bd8:	f0 e0       	ldi	r31, 0x00	; 0
 bda:	83 b1       	in	r24, 0x03	; 3
 bdc:	e0 59       	subi	r30, 0x90	; 144
 bde:	ff 4f       	sbci	r31, 0xFF	; 255
 be0:	80 83       	st	Z, r24
        twi_reply(1);
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	65 df       	rcall	.-310    	; 0xab0 <twi_reply>
 be6:	53 c0       	rjmp	.+166    	; 0xc8e <__vector_17+0x1b4>
      }else{
        // otherwise nack
        twi_reply(0);
 be8:	80 e0       	ldi	r24, 0x00	; 0
 bea:	62 df       	rcall	.-316    	; 0xab0 <twi_reply>
 bec:	50 c0       	rjmp	.+160    	; 0xc8e <__vector_17+0x1b4>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 bee:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <twi_rxBufferIndex>
 bf2:	80 32       	cpi	r24, 0x20	; 32
 bf4:	30 f4       	brcc	.+12     	; 0xc02 <__vector_17+0x128>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 bf6:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <twi_rxBufferIndex>
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	e0 59       	subi	r30, 0x90	; 144
 bfe:	ff 4f       	sbci	r31, 0xFF	; 255
 c00:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
 c02:	5e df       	rcall	.-324    	; 0xac0 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 c04:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <twi_rxBufferIndex>
 c08:	70 e0       	ldi	r23, 0x00	; 0
 c0a:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <twi_onSlaveReceive>
 c0e:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <twi_onSlaveReceive+0x1>
 c12:	80 e7       	ldi	r24, 0x70	; 112
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 c18:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 c1c:	59 df       	rcall	.-334    	; 0xad0 <twi_releaseBus>
      break;
 c1e:	37 c0       	rjmp	.+110    	; 0xc8e <__vector_17+0x1b4>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
 c20:	80 e0       	ldi	r24, 0x00	; 0
 c22:	46 df       	rcall	.-372    	; 0xab0 <twi_reply>
      break;
 c24:	34 c0       	rjmp	.+104    	; 0xc8e <__vector_17+0x1b4>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 c26:	84 e0       	ldi	r24, 0x04	; 4
 c28:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 c2c:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 c30:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 c34:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <twi_onSlaveTransmit>
 c38:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <twi_onSlaveTransmit+0x1>
 c3c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 c3e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <twi_txBufferLength>
 c42:	81 11       	cpse	r24, r1
 c44:	05 c0       	rjmp	.+10     	; 0xc50 <__vector_17+0x176>
        twi_txBufferLength = 1;
 c46:	81 e0       	ldi	r24, 0x01	; 1
 c48:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 c4c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 c50:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <twi_txBufferIndex>
 c54:	81 e0       	ldi	r24, 0x01	; 1
 c56:	8e 0f       	add	r24, r30
 c58:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <twi_txBufferIndex>
 c5c:	f0 e0       	ldi	r31, 0x00	; 0
 c5e:	ee 56       	subi	r30, 0x6E	; 110
 c60:	ff 4f       	sbci	r31, 0xFF	; 255
 c62:	80 81       	ld	r24, Z
 c64:	83 b9       	out	0x03, r24	; 3
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 c66:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <twi_txBufferIndex>
 c6a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <twi_txBufferLength>
 c6e:	98 17       	cp	r25, r24
 c70:	18 f4       	brcc	.+6      	; 0xc78 <__vector_17+0x19e>
        twi_reply(1);
 c72:	81 e0       	ldi	r24, 0x01	; 1
 c74:	1d df       	rcall	.-454    	; 0xab0 <twi_reply>
 c76:	0b c0       	rjmp	.+22     	; 0xc8e <__vector_17+0x1b4>
      }else{
        twi_reply(0);
 c78:	80 e0       	ldi	r24, 0x00	; 0
 c7a:	1a df       	rcall	.-460    	; 0xab0 <twi_reply>
 c7c:	08 c0       	rjmp	.+16     	; 0xc8e <__vector_17+0x1b4>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	17 df       	rcall	.-466    	; 0xab0 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
 c82:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <twi_state>
      break;
 c86:	03 c0       	rjmp	.+6      	; 0xc8e <__vector_17+0x1b4>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 c88:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <twi_error>
      twi_stop();
 c8c:	19 df       	rcall	.-462    	; 0xac0 <twi_stop>
      break;
  }
}
 c8e:	ff 91       	pop	r31
 c90:	ef 91       	pop	r30
 c92:	bf 91       	pop	r27
 c94:	af 91       	pop	r26
 c96:	9f 91       	pop	r25
 c98:	8f 91       	pop	r24
 c9a:	7f 91       	pop	r23
 c9c:	6f 91       	pop	r22
 c9e:	5f 91       	pop	r21
 ca0:	4f 91       	pop	r20
 ca2:	3f 91       	pop	r19
 ca4:	2f 91       	pop	r18
 ca6:	0f 90       	pop	r0
 ca8:	0f be       	out	0x3f, r0	; 63
 caa:	0f 90       	pop	r0
 cac:	1f 90       	pop	r1
 cae:	18 95       	reti

00000cb0 <twi_init_master>:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t twi_available(void)
{
  return rxBufferLength - rxBufferIndex;
}
 cb0:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <rxBufferIndex>
 cb4:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <rxBufferLength>
 cb8:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txBufferIndex>
 cbc:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txBufferLength>
 cc0:	50 de       	rcall	.-864    	; 0x962 <twi_init>
 cc2:	08 95       	ret

00000cc4 <twi_request_from>:
 cc4:	46 2f       	mov	r20, r22
 cc6:	61 32       	cpi	r22, 0x21	; 33
 cc8:	08 f0       	brcs	.+2      	; 0xccc <twi_request_from+0x8>
 cca:	40 e2       	ldi	r20, 0x20	; 32
 ccc:	68 ee       	ldi	r22, 0xE8	; 232
 cce:	70 e0       	ldi	r23, 0x00	; 0
 cd0:	5b de       	rcall	.-842    	; 0x988 <twi_readFrom>
 cd2:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <rxBufferIndex>
 cd6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <rxBufferLength>
 cda:	08 95       	ret

00000cdc <twi_begin_transmission>:
 cdc:	91 e0       	ldi	r25, 0x01	; 1
 cde:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <transmitting>
 ce2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <txAddress>
 ce6:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txBufferIndex>
 cea:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txBufferLength>
 cee:	08 95       	ret

00000cf0 <twi_end_transmission>:
 cf0:	21 e0       	ldi	r18, 0x01	; 1
 cf2:	40 91 db 00 	lds	r20, 0x00DB	; 0x8000db <txBufferLength>
 cf6:	68 e0       	ldi	r22, 0x08	; 8
 cf8:	71 e0       	ldi	r23, 0x01	; 1
 cfa:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <txAddress>
 cfe:	7a de       	rcall	.-780    	; 0x9f4 <twi_writeTo>
 d00:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <txBufferIndex>
 d04:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <txBufferLength>
 d08:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <transmitting>
 d0c:	08 95       	ret

00000d0e <twi_send_byte>:
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	1f 92       	push	r1
 d14:	cd b7       	in	r28, 0x3d	; 61
 d16:	de b7       	in	r29, 0x3e	; 62
 d18:	89 83       	std	Y+1, r24	; 0x01
 d1a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <transmitting>
 d1e:	88 23       	and	r24, r24
 d20:	91 f0       	breq	.+36     	; 0xd46 <twi_send_byte+0x38>
 d22:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <txBufferLength>
 d26:	80 32       	cpi	r24, 0x20	; 32
 d28:	90 f4       	brcc	.+36     	; 0xd4e <twi_send_byte+0x40>
 d2a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <txBufferIndex>
 d2e:	e8 2f       	mov	r30, r24
 d30:	f0 e0       	ldi	r31, 0x00	; 0
 d32:	e8 5f       	subi	r30, 0xF8	; 248
 d34:	fe 4f       	sbci	r31, 0xFE	; 254
 d36:	99 81       	ldd	r25, Y+1	; 0x01
 d38:	90 83       	st	Z, r25
 d3a:	8f 5f       	subi	r24, 0xFF	; 255
 d3c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <txBufferIndex>
 d40:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <txBufferLength>
 d44:	04 c0       	rjmp	.+8      	; 0xd4e <twi_send_byte+0x40>
 d46:	61 e0       	ldi	r22, 0x01	; 1
 d48:	ce 01       	movw	r24, r28
 d4a:	01 96       	adiw	r24, 0x01	; 1
 d4c:	93 de       	rcall	.-730    	; 0xa74 <twi_transmit>
 d4e:	0f 90       	pop	r0
 d50:	df 91       	pop	r29
 d52:	cf 91       	pop	r28
 d54:	08 95       	ret

00000d56 <twi_receive>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 d56:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <rxBufferIndex>
 d5a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <rxBufferLength>
 d5e:	98 17       	cp	r25, r24
 d60:	48 f4       	brcc	.+18     	; 0xd74 <twi_receive+0x1e>
    value = rxBuffer[rxBufferIndex];
 d62:	e9 2f       	mov	r30, r25
 d64:	f0 e0       	ldi	r31, 0x00	; 0
 d66:	e8 51       	subi	r30, 0x18	; 24
 d68:	ff 4f       	sbci	r31, 0xFF	; 255
 d6a:	80 81       	ld	r24, Z
    ++rxBufferIndex;
 d6c:	9f 5f       	subi	r25, 0xFF	; 255
 d6e:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <rxBufferIndex>
 d72:	08 95       	ret
// or after requestFrom(address, numBytes)
uint8_t twi_receive(void)
{
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
 d74:	80 e0       	ldi	r24, 0x00	; 0
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
 d76:	08 95       	ret

00000d78 <__udivmodsi4>:
 d78:	a1 e2       	ldi	r26, 0x21	; 33
 d7a:	1a 2e       	mov	r1, r26
 d7c:	aa 1b       	sub	r26, r26
 d7e:	bb 1b       	sub	r27, r27
 d80:	fd 01       	movw	r30, r26
 d82:	0d c0       	rjmp	.+26     	; 0xd9e <__udivmodsi4_ep>

00000d84 <__udivmodsi4_loop>:
 d84:	aa 1f       	adc	r26, r26
 d86:	bb 1f       	adc	r27, r27
 d88:	ee 1f       	adc	r30, r30
 d8a:	ff 1f       	adc	r31, r31
 d8c:	a2 17       	cp	r26, r18
 d8e:	b3 07       	cpc	r27, r19
 d90:	e4 07       	cpc	r30, r20
 d92:	f5 07       	cpc	r31, r21
 d94:	20 f0       	brcs	.+8      	; 0xd9e <__udivmodsi4_ep>
 d96:	a2 1b       	sub	r26, r18
 d98:	b3 0b       	sbc	r27, r19
 d9a:	e4 0b       	sbc	r30, r20
 d9c:	f5 0b       	sbc	r31, r21

00000d9e <__udivmodsi4_ep>:
 d9e:	66 1f       	adc	r22, r22
 da0:	77 1f       	adc	r23, r23
 da2:	88 1f       	adc	r24, r24
 da4:	99 1f       	adc	r25, r25
 da6:	1a 94       	dec	r1
 da8:	69 f7       	brne	.-38     	; 0xd84 <__udivmodsi4_loop>
 daa:	60 95       	com	r22
 dac:	70 95       	com	r23
 dae:	80 95       	com	r24
 db0:	90 95       	com	r25
 db2:	9b 01       	movw	r18, r22
 db4:	ac 01       	movw	r20, r24
 db6:	bd 01       	movw	r22, r26
 db8:	cf 01       	movw	r24, r30
 dba:	08 95       	ret

00000dbc <__umulhisi3>:
 dbc:	a2 9f       	mul	r26, r18
 dbe:	b0 01       	movw	r22, r0
 dc0:	b3 9f       	mul	r27, r19
 dc2:	c0 01       	movw	r24, r0
 dc4:	a3 9f       	mul	r26, r19
 dc6:	01 d0       	rcall	.+2      	; 0xdca <__umulhisi3+0xe>
 dc8:	b2 9f       	mul	r27, r18
 dca:	70 0d       	add	r23, r0
 dcc:	81 1d       	adc	r24, r1
 dce:	11 24       	eor	r1, r1
 dd0:	91 1d       	adc	r25, r1
 dd2:	08 95       	ret

00000dd4 <_exit>:
 dd4:	f8 94       	cli

00000dd6 <__stop_program>:
 dd6:	ff cf       	rjmp	.-2      	; 0xdd6 <__stop_program>
