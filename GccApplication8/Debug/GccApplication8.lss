
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c1c  00000cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bc  00800062  00800062  00000cb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cf6  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd3  00000000  00000000  00003cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018bb  00000000  00000000  00004a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  00006344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a3  00000000  00000000  00006a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a95  00000000  00000000  00007423  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00008eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e4 c0       	rjmp	.+456    	; 0x1ca <__ctors_end>
   2:	fe c0       	rjmp	.+508    	; 0x200 <__bad_interrupt>
   4:	fd c0       	rjmp	.+506    	; 0x200 <__bad_interrupt>
   6:	3f c3       	rjmp	.+1662   	; 0x686 <__vector_3>
   8:	fb c0       	rjmp	.+502    	; 0x200 <__bad_interrupt>
   a:	fa c0       	rjmp	.+500    	; 0x200 <__bad_interrupt>
   c:	f9 c0       	rjmp	.+498    	; 0x200 <__bad_interrupt>
   e:	f8 c0       	rjmp	.+496    	; 0x200 <__bad_interrupt>
  10:	f7 c0       	rjmp	.+494    	; 0x200 <__bad_interrupt>
  12:	f6 c0       	rjmp	.+492    	; 0x200 <__bad_interrupt>
  14:	f5 c0       	rjmp	.+490    	; 0x200 <__bad_interrupt>
  16:	f4 c0       	rjmp	.+488    	; 0x200 <__bad_interrupt>
  18:	f3 c0       	rjmp	.+486    	; 0x200 <__bad_interrupt>
  1a:	f2 c0       	rjmp	.+484    	; 0x200 <__bad_interrupt>
  1c:	f1 c0       	rjmp	.+482    	; 0x200 <__bad_interrupt>
  1e:	f0 c0       	rjmp	.+480    	; 0x200 <__bad_interrupt>
  20:	ef c0       	rjmp	.+478    	; 0x200 <__bad_interrupt>
  22:	9f c4       	rjmp	.+2366   	; 0x962 <__vector_17>
  24:	ed c0       	rjmp	.+474    	; 0x200 <__bad_interrupt>
  26:	d6 c2       	rjmp	.+1452   	; 0x5d4 <PodajZnak+0x48>
  28:	bd c2       	rjmp	.+1402   	; 0x5a4 <PodajZnak+0x18>
  2a:	bf c2       	rjmp	.+1406   	; 0x5aa <PodajZnak+0x1e>
  2c:	c1 c2       	rjmp	.+1410   	; 0x5b0 <PodajZnak+0x24>
  2e:	c3 c2       	rjmp	.+1414   	; 0x5b6 <PodajZnak+0x2a>
  30:	c5 c2       	rjmp	.+1418   	; 0x5bc <PodajZnak+0x30>
  32:	c7 c2       	rjmp	.+1422   	; 0x5c2 <PodajZnak+0x36>
  34:	c9 c2       	rjmp	.+1426   	; 0x5c8 <PodajZnak+0x3c>
  36:	cb c2       	rjmp	.+1430   	; 0x5ce <PodajZnak+0x42>
  38:	6b c5       	rjmp	.+2774   	; 0xb10 <__vector_17+0x1ae>
  3a:	6d c5       	rjmp	.+2778   	; 0xb16 <__vector_17+0x1b4>
  3c:	6c c5       	rjmp	.+2776   	; 0xb16 <__vector_17+0x1b4>
  3e:	6b c5       	rjmp	.+2774   	; 0xb16 <__vector_17+0x1b4>
  40:	6a c5       	rjmp	.+2772   	; 0xb16 <__vector_17+0x1b4>
  42:	69 c5       	rjmp	.+2770   	; 0xb16 <__vector_17+0x1b4>
  44:	68 c5       	rjmp	.+2768   	; 0xb16 <__vector_17+0x1b4>
  46:	67 c5       	rjmp	.+2766   	; 0xb16 <__vector_17+0x1b4>
  48:	aa c4       	rjmp	.+2388   	; 0x99e <__vector_17+0x3c>
  4a:	65 c5       	rjmp	.+2762   	; 0xb16 <__vector_17+0x1b4>
  4c:	64 c5       	rjmp	.+2760   	; 0xb16 <__vector_17+0x1b4>
  4e:	63 c5       	rjmp	.+2758   	; 0xb16 <__vector_17+0x1b4>
  50:	62 c5       	rjmp	.+2756   	; 0xb16 <__vector_17+0x1b4>
  52:	61 c5       	rjmp	.+2754   	; 0xb16 <__vector_17+0x1b4>
  54:	60 c5       	rjmp	.+2752   	; 0xb16 <__vector_17+0x1b4>
  56:	5f c5       	rjmp	.+2750   	; 0xb16 <__vector_17+0x1b4>
  58:	a2 c4       	rjmp	.+2372   	; 0x99e <__vector_17+0x3c>
  5a:	5d c5       	rjmp	.+2746   	; 0xb16 <__vector_17+0x1b4>
  5c:	5c c5       	rjmp	.+2744   	; 0xb16 <__vector_17+0x1b4>
  5e:	5b c5       	rjmp	.+2742   	; 0xb16 <__vector_17+0x1b4>
  60:	5a c5       	rjmp	.+2740   	; 0xb16 <__vector_17+0x1b4>
  62:	59 c5       	rjmp	.+2738   	; 0xb16 <__vector_17+0x1b4>
  64:	58 c5       	rjmp	.+2736   	; 0xb16 <__vector_17+0x1b4>
  66:	57 c5       	rjmp	.+2734   	; 0xb16 <__vector_17+0x1b4>
  68:	a0 c4       	rjmp	.+2368   	; 0x9aa <__vector_17+0x48>
  6a:	55 c5       	rjmp	.+2730   	; 0xb16 <__vector_17+0x1b4>
  6c:	54 c5       	rjmp	.+2728   	; 0xb16 <__vector_17+0x1b4>
  6e:	53 c5       	rjmp	.+2726   	; 0xb16 <__vector_17+0x1b4>
  70:	52 c5       	rjmp	.+2724   	; 0xb16 <__vector_17+0x1b4>
  72:	51 c5       	rjmp	.+2722   	; 0xb16 <__vector_17+0x1b4>
  74:	50 c5       	rjmp	.+2720   	; 0xb16 <__vector_17+0x1b4>
  76:	4f c5       	rjmp	.+2718   	; 0xb16 <__vector_17+0x1b4>
  78:	ae c4       	rjmp	.+2396   	; 0x9d6 <__vector_17+0x74>
  7a:	4d c5       	rjmp	.+2714   	; 0xb16 <__vector_17+0x1b4>
  7c:	4c c5       	rjmp	.+2712   	; 0xb16 <__vector_17+0x1b4>
  7e:	4b c5       	rjmp	.+2710   	; 0xb16 <__vector_17+0x1b4>
  80:	4a c5       	rjmp	.+2708   	; 0xb16 <__vector_17+0x1b4>
  82:	49 c5       	rjmp	.+2706   	; 0xb16 <__vector_17+0x1b4>
  84:	48 c5       	rjmp	.+2704   	; 0xb16 <__vector_17+0x1b4>
  86:	47 c5       	rjmp	.+2702   	; 0xb16 <__vector_17+0x1b4>
  88:	90 c4       	rjmp	.+2336   	; 0x9aa <__vector_17+0x48>
  8a:	45 c5       	rjmp	.+2698   	; 0xb16 <__vector_17+0x1b4>
  8c:	44 c5       	rjmp	.+2696   	; 0xb16 <__vector_17+0x1b4>
  8e:	43 c5       	rjmp	.+2694   	; 0xb16 <__vector_17+0x1b4>
  90:	42 c5       	rjmp	.+2692   	; 0xb16 <__vector_17+0x1b4>
  92:	41 c5       	rjmp	.+2690   	; 0xb16 <__vector_17+0x1b4>
  94:	40 c5       	rjmp	.+2688   	; 0xb16 <__vector_17+0x1b4>
  96:	3f c5       	rjmp	.+2686   	; 0xb16 <__vector_17+0x1b4>
  98:	a3 c4       	rjmp	.+2374   	; 0x9e0 <__vector_17+0x7e>
  9a:	3d c5       	rjmp	.+2682   	; 0xb16 <__vector_17+0x1b4>
  9c:	3c c5       	rjmp	.+2680   	; 0xb16 <__vector_17+0x1b4>
  9e:	3b c5       	rjmp	.+2678   	; 0xb16 <__vector_17+0x1b4>
  a0:	3a c5       	rjmp	.+2676   	; 0xb16 <__vector_17+0x1b4>
  a2:	39 c5       	rjmp	.+2674   	; 0xb16 <__vector_17+0x1b4>
  a4:	38 c5       	rjmp	.+2672   	; 0xb16 <__vector_17+0x1b4>
  a6:	37 c5       	rjmp	.+2670   	; 0xb16 <__vector_17+0x1b4>
  a8:	a0 c4       	rjmp	.+2368   	; 0x9ea <__vector_17+0x88>
  aa:	35 c5       	rjmp	.+2666   	; 0xb16 <__vector_17+0x1b4>
  ac:	34 c5       	rjmp	.+2664   	; 0xb16 <__vector_17+0x1b4>
  ae:	33 c5       	rjmp	.+2662   	; 0xb16 <__vector_17+0x1b4>
  b0:	32 c5       	rjmp	.+2660   	; 0xb16 <__vector_17+0x1b4>
  b2:	31 c5       	rjmp	.+2658   	; 0xb16 <__vector_17+0x1b4>
  b4:	30 c5       	rjmp	.+2656   	; 0xb16 <__vector_17+0x1b4>
  b6:	2f c5       	rjmp	.+2654   	; 0xb16 <__vector_17+0x1b4>
  b8:	a8 c4       	rjmp	.+2384   	; 0xa0a <__vector_17+0xa8>
  ba:	2d c5       	rjmp	.+2650   	; 0xb16 <__vector_17+0x1b4>
  bc:	2c c5       	rjmp	.+2648   	; 0xb16 <__vector_17+0x1b4>
  be:	2b c5       	rjmp	.+2646   	; 0xb16 <__vector_17+0x1b4>
  c0:	2a c5       	rjmp	.+2644   	; 0xb16 <__vector_17+0x1b4>
  c2:	29 c5       	rjmp	.+2642   	; 0xb16 <__vector_17+0x1b4>
  c4:	28 c5       	rjmp	.+2640   	; 0xb16 <__vector_17+0x1b4>
  c6:	27 c5       	rjmp	.+2638   	; 0xb16 <__vector_17+0x1b4>
  c8:	b7 c4       	rjmp	.+2414   	; 0xa38 <__vector_17+0xd6>
  ca:	25 c5       	rjmp	.+2634   	; 0xb16 <__vector_17+0x1b4>
  cc:	24 c5       	rjmp	.+2632   	; 0xb16 <__vector_17+0x1b4>
  ce:	23 c5       	rjmp	.+2630   	; 0xb16 <__vector_17+0x1b4>
  d0:	22 c5       	rjmp	.+2628   	; 0xb16 <__vector_17+0x1b4>
  d2:	21 c5       	rjmp	.+2626   	; 0xb16 <__vector_17+0x1b4>
  d4:	20 c5       	rjmp	.+2624   	; 0xb16 <__vector_17+0x1b4>
  d6:	1f c5       	rjmp	.+2622   	; 0xb16 <__vector_17+0x1b4>
  d8:	8d c4       	rjmp	.+2330   	; 0x9f4 <__vector_17+0x92>
  da:	1d c5       	rjmp	.+2618   	; 0xb16 <__vector_17+0x1b4>
  dc:	1c c5       	rjmp	.+2616   	; 0xb16 <__vector_17+0x1b4>
  de:	1b c5       	rjmp	.+2614   	; 0xb16 <__vector_17+0x1b4>
  e0:	1a c5       	rjmp	.+2612   	; 0xb16 <__vector_17+0x1b4>
  e2:	19 c5       	rjmp	.+2610   	; 0xb16 <__vector_17+0x1b4>
  e4:	18 c5       	rjmp	.+2608   	; 0xb16 <__vector_17+0x1b4>
  e6:	17 c5       	rjmp	.+2606   	; 0xb16 <__vector_17+0x1b4>
  e8:	9c c4       	rjmp	.+2360   	; 0xa22 <__vector_17+0xc0>
  ea:	15 c5       	rjmp	.+2602   	; 0xb16 <__vector_17+0x1b4>
  ec:	14 c5       	rjmp	.+2600   	; 0xb16 <__vector_17+0x1b4>
  ee:	13 c5       	rjmp	.+2598   	; 0xb16 <__vector_17+0x1b4>
  f0:	12 c5       	rjmp	.+2596   	; 0xb16 <__vector_17+0x1b4>
  f2:	11 c5       	rjmp	.+2594   	; 0xb16 <__vector_17+0x1b4>
  f4:	10 c5       	rjmp	.+2592   	; 0xb16 <__vector_17+0x1b4>
  f6:	0f c5       	rjmp	.+2590   	; 0xb16 <__vector_17+0x1b4>
  f8:	a1 c4       	rjmp	.+2370   	; 0xa3c <__vector_17+0xda>
  fa:	0d c5       	rjmp	.+2586   	; 0xb16 <__vector_17+0x1b4>
  fc:	0c c5       	rjmp	.+2584   	; 0xb16 <__vector_17+0x1b4>
  fe:	0b c5       	rjmp	.+2582   	; 0xb16 <__vector_17+0x1b4>
 100:	0a c5       	rjmp	.+2580   	; 0xb16 <__vector_17+0x1b4>
 102:	09 c5       	rjmp	.+2578   	; 0xb16 <__vector_17+0x1b4>
 104:	08 c5       	rjmp	.+2576   	; 0xb16 <__vector_17+0x1b4>
 106:	07 c5       	rjmp	.+2574   	; 0xb16 <__vector_17+0x1b4>
 108:	99 c4       	rjmp	.+2354   	; 0xa3c <__vector_17+0xda>
 10a:	05 c5       	rjmp	.+2570   	; 0xb16 <__vector_17+0x1b4>
 10c:	04 c5       	rjmp	.+2568   	; 0xb16 <__vector_17+0x1b4>
 10e:	03 c5       	rjmp	.+2566   	; 0xb16 <__vector_17+0x1b4>
 110:	02 c5       	rjmp	.+2564   	; 0xb16 <__vector_17+0x1b4>
 112:	01 c5       	rjmp	.+2562   	; 0xb16 <__vector_17+0x1b4>
 114:	00 c5       	rjmp	.+2560   	; 0xb16 <__vector_17+0x1b4>
 116:	ff c4       	rjmp	.+2558   	; 0xb16 <__vector_17+0x1b4>
 118:	91 c4       	rjmp	.+2338   	; 0xa3c <__vector_17+0xda>
 11a:	fd c4       	rjmp	.+2554   	; 0xb16 <__vector_17+0x1b4>
 11c:	fc c4       	rjmp	.+2552   	; 0xb16 <__vector_17+0x1b4>
 11e:	fb c4       	rjmp	.+2550   	; 0xb16 <__vector_17+0x1b4>
 120:	fa c4       	rjmp	.+2548   	; 0xb16 <__vector_17+0x1b4>
 122:	f9 c4       	rjmp	.+2546   	; 0xb16 <__vector_17+0x1b4>
 124:	f8 c4       	rjmp	.+2544   	; 0xb16 <__vector_17+0x1b4>
 126:	f7 c4       	rjmp	.+2542   	; 0xb16 <__vector_17+0x1b4>
 128:	89 c4       	rjmp	.+2322   	; 0xa3c <__vector_17+0xda>
 12a:	f5 c4       	rjmp	.+2538   	; 0xb16 <__vector_17+0x1b4>
 12c:	f4 c4       	rjmp	.+2536   	; 0xb16 <__vector_17+0x1b4>
 12e:	f3 c4       	rjmp	.+2534   	; 0xb16 <__vector_17+0x1b4>
 130:	f2 c4       	rjmp	.+2532   	; 0xb16 <__vector_17+0x1b4>
 132:	f1 c4       	rjmp	.+2530   	; 0xb16 <__vector_17+0x1b4>
 134:	f0 c4       	rjmp	.+2528   	; 0xb16 <__vector_17+0x1b4>
 136:	ef c4       	rjmp	.+2526   	; 0xb16 <__vector_17+0x1b4>
 138:	89 c4       	rjmp	.+2322   	; 0xa4c <__vector_17+0xea>
 13a:	ed c4       	rjmp	.+2522   	; 0xb16 <__vector_17+0x1b4>
 13c:	ec c4       	rjmp	.+2520   	; 0xb16 <__vector_17+0x1b4>
 13e:	eb c4       	rjmp	.+2518   	; 0xb16 <__vector_17+0x1b4>
 140:	ea c4       	rjmp	.+2516   	; 0xb16 <__vector_17+0x1b4>
 142:	e9 c4       	rjmp	.+2514   	; 0xb16 <__vector_17+0x1b4>
 144:	e8 c4       	rjmp	.+2512   	; 0xb16 <__vector_17+0x1b4>
 146:	e7 c4       	rjmp	.+2510   	; 0xb16 <__vector_17+0x1b4>
 148:	af c4       	rjmp	.+2398   	; 0xaa8 <__vector_17+0x146>
 14a:	e5 c4       	rjmp	.+2506   	; 0xb16 <__vector_17+0x1b4>
 14c:	e4 c4       	rjmp	.+2504   	; 0xb16 <__vector_17+0x1b4>
 14e:	e3 c4       	rjmp	.+2502   	; 0xb16 <__vector_17+0x1b4>
 150:	e2 c4       	rjmp	.+2500   	; 0xb16 <__vector_17+0x1b4>
 152:	e1 c4       	rjmp	.+2498   	; 0xb16 <__vector_17+0x1b4>
 154:	e0 c4       	rjmp	.+2496   	; 0xb16 <__vector_17+0x1b4>
 156:	df c4       	rjmp	.+2494   	; 0xb16 <__vector_17+0x1b4>
 158:	79 c4       	rjmp	.+2290   	; 0xa4c <__vector_17+0xea>
 15a:	dd c4       	rjmp	.+2490   	; 0xb16 <__vector_17+0x1b4>
 15c:	dc c4       	rjmp	.+2488   	; 0xb16 <__vector_17+0x1b4>
 15e:	db c4       	rjmp	.+2486   	; 0xb16 <__vector_17+0x1b4>
 160:	da c4       	rjmp	.+2484   	; 0xb16 <__vector_17+0x1b4>
 162:	d9 c4       	rjmp	.+2482   	; 0xb16 <__vector_17+0x1b4>
 164:	d8 c4       	rjmp	.+2480   	; 0xb16 <__vector_17+0x1b4>
 166:	d7 c4       	rjmp	.+2478   	; 0xb16 <__vector_17+0x1b4>
 168:	9f c4       	rjmp	.+2366   	; 0xaa8 <__vector_17+0x146>
 16a:	d5 c4       	rjmp	.+2474   	; 0xb16 <__vector_17+0x1b4>
 16c:	d4 c4       	rjmp	.+2472   	; 0xb16 <__vector_17+0x1b4>
 16e:	d3 c4       	rjmp	.+2470   	; 0xb16 <__vector_17+0x1b4>
 170:	d2 c4       	rjmp	.+2468   	; 0xb16 <__vector_17+0x1b4>
 172:	d1 c4       	rjmp	.+2466   	; 0xb16 <__vector_17+0x1b4>
 174:	d0 c4       	rjmp	.+2464   	; 0xb16 <__vector_17+0x1b4>
 176:	cf c4       	rjmp	.+2462   	; 0xb16 <__vector_17+0x1b4>
 178:	7e c4       	rjmp	.+2300   	; 0xa76 <__vector_17+0x114>
 17a:	cd c4       	rjmp	.+2458   	; 0xb16 <__vector_17+0x1b4>
 17c:	cc c4       	rjmp	.+2456   	; 0xb16 <__vector_17+0x1b4>
 17e:	cb c4       	rjmp	.+2454   	; 0xb16 <__vector_17+0x1b4>
 180:	ca c4       	rjmp	.+2452   	; 0xb16 <__vector_17+0x1b4>
 182:	c9 c4       	rjmp	.+2450   	; 0xb16 <__vector_17+0x1b4>
 184:	c8 c4       	rjmp	.+2448   	; 0xb16 <__vector_17+0x1b4>
 186:	c7 c4       	rjmp	.+2446   	; 0xb16 <__vector_17+0x1b4>
 188:	92 c4       	rjmp	.+2340   	; 0xaae <__vector_17+0x14c>
 18a:	c5 c4       	rjmp	.+2442   	; 0xb16 <__vector_17+0x1b4>
 18c:	c4 c4       	rjmp	.+2440   	; 0xb16 <__vector_17+0x1b4>
 18e:	c3 c4       	rjmp	.+2438   	; 0xb16 <__vector_17+0x1b4>
 190:	c2 c4       	rjmp	.+2436   	; 0xb16 <__vector_17+0x1b4>
 192:	c1 c4       	rjmp	.+2434   	; 0xb16 <__vector_17+0x1b4>
 194:	c0 c4       	rjmp	.+2432   	; 0xb16 <__vector_17+0x1b4>
 196:	bf c4       	rjmp	.+2430   	; 0xb16 <__vector_17+0x1b4>
 198:	8a c4       	rjmp	.+2324   	; 0xaae <__vector_17+0x14c>
 19a:	bd c4       	rjmp	.+2426   	; 0xb16 <__vector_17+0x1b4>
 19c:	bc c4       	rjmp	.+2424   	; 0xb16 <__vector_17+0x1b4>
 19e:	bb c4       	rjmp	.+2422   	; 0xb16 <__vector_17+0x1b4>
 1a0:	ba c4       	rjmp	.+2420   	; 0xb16 <__vector_17+0x1b4>
 1a2:	b9 c4       	rjmp	.+2418   	; 0xb16 <__vector_17+0x1b4>
 1a4:	b8 c4       	rjmp	.+2416   	; 0xb16 <__vector_17+0x1b4>
 1a6:	b7 c4       	rjmp	.+2414   	; 0xb16 <__vector_17+0x1b4>
 1a8:	97 c4       	rjmp	.+2350   	; 0xad8 <__vector_17+0x176>
 1aa:	b5 c4       	rjmp	.+2410   	; 0xb16 <__vector_17+0x1b4>
 1ac:	b4 c4       	rjmp	.+2408   	; 0xb16 <__vector_17+0x1b4>
 1ae:	b3 c4       	rjmp	.+2406   	; 0xb16 <__vector_17+0x1b4>
 1b0:	b2 c4       	rjmp	.+2404   	; 0xb16 <__vector_17+0x1b4>
 1b2:	b1 c4       	rjmp	.+2402   	; 0xb16 <__vector_17+0x1b4>
 1b4:	b0 c4       	rjmp	.+2400   	; 0xb16 <__vector_17+0x1b4>
 1b6:	af c4       	rjmp	.+2398   	; 0xb16 <__vector_17+0x1b4>
 1b8:	a6 c4       	rjmp	.+2380   	; 0xb06 <__vector_17+0x1a4>
 1ba:	ad c4       	rjmp	.+2394   	; 0xb16 <__vector_17+0x1b4>
 1bc:	ac c4       	rjmp	.+2392   	; 0xb16 <__vector_17+0x1b4>
 1be:	ab c4       	rjmp	.+2390   	; 0xb16 <__vector_17+0x1b4>
 1c0:	aa c4       	rjmp	.+2388   	; 0xb16 <__vector_17+0x1b4>
 1c2:	a9 c4       	rjmp	.+2386   	; 0xb16 <__vector_17+0x1b4>
 1c4:	a8 c4       	rjmp	.+2384   	; 0xb16 <__vector_17+0x1b4>
 1c6:	a7 c4       	rjmp	.+2382   	; 0xb16 <__vector_17+0x1b4>
 1c8:	9e c4       	rjmp	.+2364   	; 0xb06 <__vector_17+0x1a4>

000001ca <__ctors_end>:
 1ca:	11 24       	eor	r1, r1
 1cc:	1f be       	out	0x3f, r1	; 63
 1ce:	cf e5       	ldi	r28, 0x5F	; 95
 1d0:	d4 e0       	ldi	r29, 0x04	; 4
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	a0 e6       	ldi	r26, 0x60	; 96
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	ec e1       	ldi	r30, 0x1C	; 28
 1de:	fc e0       	ldi	r31, 0x0C	; 12
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x10>
 1e2:	05 90       	lpm	r0, Z+
 1e4:	0d 92       	st	X+, r0
 1e6:	a2 36       	cpi	r26, 0x62	; 98
 1e8:	b1 07       	cpc	r27, r17
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0xc>

000001ec <__do_clear_bss>:
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	a2 e6       	ldi	r26, 0x62	; 98
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
 1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
 1f6:	ae 31       	cpi	r26, 0x1E	; 30
 1f8:	b2 07       	cpc	r27, r18
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>
 1fc:	60 d0       	rcall	.+192    	; 0x2be <main>
 1fe:	0c c5       	rjmp	.+2584   	; 0xc18 <_exit>

00000200 <__bad_interrupt>:
 200:	ff ce       	rjmp	.-514    	; 0x0 <__vectors>

00000202 <ustawLed>:
void read_rtc(void)
{
	
		uint8_t hour, min, sec;
		rtc_get_time_s(&hour, &min, &sec);
}
 202:	88 23       	and	r24, r24
 204:	21 f0       	breq	.+8      	; 0x20e <ustawLed+0xc>
 206:	85 b3       	in	r24, 0x15	; 21
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	85 bb       	out	0x15, r24	; 21
 20c:	08 95       	ret
 20e:	85 b3       	in	r24, 0x15	; 21
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	85 bb       	out	0x15, r24	; 21
 214:	08 95       	ret

00000216 <zmianaTrybuLed>:
 216:	85 b3       	in	r24, 0x15	; 21
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	85 bb       	out	0x15, r24	; 21
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	80 e7       	ldi	r24, 0x70	; 112
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <zmianaTrybuLed+0xc>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <zmianaTrybuLed+0x16>
 22c:	00 00       	nop
 22e:	85 b3       	in	r24, 0x15	; 21
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	85 bb       	out	0x15, r24	; 21
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	80 e7       	ldi	r24, 0x70	; 112
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <zmianaTrybuLed+0x24>
 242:	00 c0       	rjmp	.+0      	; 0x244 <zmianaTrybuLed+0x2e>
 244:	00 00       	nop
 246:	08 95       	ret

00000248 <ObsluzPrzycisk>:
 248:	9b 99       	sbic	0x13, 3	; 19
 24a:	25 c0       	rjmp	.+74     	; 0x296 <ObsluzPrzycisk+0x4e>
 24c:	fc 01       	movw	r30, r24
 24e:	20 81       	ld	r18, Z
 250:	21 11       	cpse	r18, r1
 252:	0e c0       	rjmp	.+28     	; 0x270 <ObsluzPrzycisk+0x28>
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	20 83       	st	Z, r18
 258:	fb 01       	movw	r30, r22
 25a:	20 83       	st	Z, r18
 25c:	ff ef       	ldi	r31, 0xFF	; 255
 25e:	20 e7       	ldi	r18, 0x70	; 112
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	f1 50       	subi	r31, 0x01	; 1
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <ObsluzPrzycisk+0x1a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <ObsluzPrzycisk+0x24>
 26c:	00 00       	nop
 26e:	08 95       	ret
 270:	21 30       	cpi	r18, 0x01	; 1
 272:	89 f4       	brne	.+34     	; 0x296 <ObsluzPrzycisk+0x4e>
 274:	fb 01       	movw	r30, r22
 276:	20 81       	ld	r18, Z
 278:	21 30       	cpi	r18, 0x01	; 1
 27a:	69 f4       	brne	.+26     	; 0x296 <ObsluzPrzycisk+0x4e>
 27c:	fc 01       	movw	r30, r24
 27e:	10 82       	st	Z, r1
 280:	fb 01       	movw	r30, r22
 282:	10 82       	st	Z, r1
 284:	ff ef       	ldi	r31, 0xFF	; 255
 286:	20 e7       	ldi	r18, 0x70	; 112
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	f1 50       	subi	r31, 0x01	; 1
 28c:	20 40       	sbci	r18, 0x00	; 0
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <ObsluzPrzycisk+0x42>
 292:	00 c0       	rjmp	.+0      	; 0x294 <ObsluzPrzycisk+0x4c>
 294:	00 00       	nop
 296:	08 95       	ret

00000298 <ObsluzPrzyciskZmianyTrybu>:
 298:	9a 99       	sbic	0x13, 2	; 19
 29a:	10 c0       	rjmp	.+32     	; 0x2bc <ObsluzPrzyciskZmianyTrybu+0x24>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	b1 df       	rcall	.-158    	; 0x202 <ustawLed>
 2a0:	ba df       	rcall	.-140    	; 0x216 <zmianaTrybuLed>
 2a2:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <tryb>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <tryb>
 2ac:	9a 9b       	sbis	0x13, 2	; 19
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <ObsluzPrzyciskZmianyTrybu+0x14>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <ObsluzPrzyciskZmianyTrybu+0x20>
 2b4:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <tryb>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	a3 df       	rcall	.-186    	; 0x202 <ustawLed>
 2bc:	08 95       	ret

000002be <main>:



int main(void){
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0x8>
 2c6:	1f 92       	push	r1
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62

	multipleks_init();
 2cc:	ab d1       	rcall	.+854    	; 0x624 <multipleks_init>
	twi_init_master();
 2ce:	34 d4       	rcall	.+2152   	; 0xb38 <twi_init_master>
	//cyfra[0] = 1;
	//cyfra[1] = 1;
	//cyfra[2] = 1;
	//cyfra[3] = 1;
	uint16_t licznik = 0;
	sei();
 2d0:	78 94       	sei
	z1=1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <z1>
	z2=2;
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <z2>
	z3=3;
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <z3>
	z4=4;
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <z4>

	DDRC&=~(1<<PINC3);
 2ea:	84 b3       	in	r24, 0x14	; 20
 2ec:	87 7f       	andi	r24, 0xF7	; 247
 2ee:	84 bb       	out	0x14, r24	; 20
	PORTC|=(1<<PINC3);
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	88 60       	ori	r24, 0x08	; 8
 2f4:	85 bb       	out	0x15, r24	; 21
	
	DDRC&=~(1<<PINC2);
 2f6:	84 b3       	in	r24, 0x14	; 20
 2f8:	8b 7f       	andi	r24, 0xFB	; 251
 2fa:	84 bb       	out	0x14, r24	; 20
	PORTC|=(1<<PINC2);
 2fc:	85 b3       	in	r24, 0x15	; 21
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	85 bb       	out	0x15, r24	; 21
	
	//DDRC&=~(1<<PINC1);
	//PORTC|=(1<<PINC1);
	
	DDRC|=(1<<PINC0);
 302:	84 b3       	in	r24, 0x14	; 20
 304:	81 60       	ori	r24, 0x01	; 1
 306:	84 bb       	out	0x14, r24	; 20
	
	DDRD|=(1<<PIND0);
 308:	81 b3       	in	r24, 0x11	; 17
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	81 bb       	out	0x11, r24	; 17


	uint8_t flagaPrzycisku=0;
 30e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t flagaZatrzymania=0;
 310:	1a 82       	std	Y+2, r1	; 0x02

		uint8_t zz1, zz2, zz3, zz4;
				
			uint8_t hour, min, sec;
			
			rtc_get_time_s(&hour, &min, &sec);
 312:	ae 01       	movw	r20, r28
 314:	4b 5f       	subi	r20, 0xFB	; 251
 316:	5f 4f       	sbci	r21, 0xFF	; 255
 318:	be 01       	movw	r22, r28
 31a:	6c 5f       	subi	r22, 0xFC	; 252
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	ce 01       	movw	r24, r28
 320:	03 96       	adiw	r24, 0x03	; 3
 322:	0e d2       	rcall	.+1052   	; 0x740 <rtc_get_time_s>

	//cyfra[0] = 1;
	//cyfra[1] = 1;
	//cyfra[2] = 1;
	//cyfra[3] = 1;
	uint16_t licznik = 0;
 324:	00 e0       	ldi	r16, 0x00	; 0
 326:	10 e0       	ldi	r17, 0x00	; 0
			
			uint8_t oldSec = sec;
	
	while(1) {
		
		ustawLed(false);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	6b df       	rcall	.-298    	; 0x202 <ustawLed>
		
		
			
			switch (tryb)
 32c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <tryb>
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	d9 f1       	breq	.+118    	; 0x3aa <main+0xec>
 334:	20 f0       	brcs	.+8      	; 0x33e <main+0x80>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	09 f4       	brne	.+2      	; 0x33c <main+0x7e>
 33a:	ab c0       	rjmp	.+342    	; 0x492 <__stack+0x33>
 33c:	19 c1       	rjmp	.+562    	; 0x570 <__stack+0x111>
			{
				case 0:
						
						
							rtc_get_time_s(&hour, &min, &sec);
 33e:	ae 01       	movw	r20, r28
 340:	4b 5f       	subi	r20, 0xFB	; 251
 342:	5f 4f       	sbci	r21, 0xFF	; 255
 344:	be 01       	movw	r22, r28
 346:	6c 5f       	subi	r22, 0xFC	; 252
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	ce 01       	movw	r24, r28
 34c:	03 96       	adiw	r24, 0x03	; 3
 34e:	f8 d1       	rcall	.+1008   	; 0x740 <rtc_get_time_s>
							if(sec % 2 )
 350:	8d 81       	ldd	r24, Y+5	; 0x05
 352:	80 ff       	sbrs	r24, 0
 354:	04 c0       	rjmp	.+8      	; 0x35e <main+0xa0>
							{
								kropka = 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <kropka>
 35c:	02 c0       	rjmp	.+4      	; 0x362 <main+0xa4>
								
								
							}
							else
							{
								kropka = 0;
 35e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <kropka>
							}
							//min
							z1 = hour/10;
 362:	2b 81       	ldd	r18, Y+3	; 0x03
 364:	8d ec       	ldi	r24, 0xCD	; 205
 366:	28 9f       	mul	r18, r24
 368:	91 2d       	mov	r25, r1
 36a:	11 24       	eor	r1, r1
 36c:	96 95       	lsr	r25
 36e:	96 95       	lsr	r25
 370:	96 95       	lsr	r25
 372:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <z1>
			
							z2 = (hour-(z1*10));
 376:	99 0f       	add	r25, r25
 378:	39 2f       	mov	r19, r25
 37a:	33 0f       	add	r19, r19
 37c:	33 0f       	add	r19, r19
 37e:	93 0f       	add	r25, r19
 380:	29 1b       	sub	r18, r25
 382:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <z2>

							z3 = min/10;
 386:	9c 81       	ldd	r25, Y+4	; 0x04
 388:	98 9f       	mul	r25, r24
 38a:	81 2d       	mov	r24, r1
 38c:	11 24       	eor	r1, r1
 38e:	86 95       	lsr	r24
 390:	86 95       	lsr	r24
 392:	86 95       	lsr	r24
 394:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <z3>
							
							z4 = (min-(z3*10));
 398:	88 0f       	add	r24, r24
 39a:	28 2f       	mov	r18, r24
 39c:	22 0f       	add	r18, r18
 39e:	22 0f       	add	r18, r18
 3a0:	82 0f       	add	r24, r18
 3a2:	98 1b       	sub	r25, r24
 3a4:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <z4>
	
							
				break;
 3a8:	e3 c0       	rjmp	.+454    	; 0x570 <__stack+0x111>
				case 1: //tryb 2
							
							ObsluzPrzycisk(&flagaPrzycisku, &flagaZatrzymania);
 3aa:	be 01       	movw	r22, r28
 3ac:	6e 5f       	subi	r22, 0xFE	; 254
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	ce 01       	movw	r24, r28
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	49 df       	rcall	.-366    	; 0x248 <ObsluzPrzycisk>


							if(licznik > 100)
 3b6:	05 36       	cpi	r16, 0x65	; 101
 3b8:	11 05       	cpc	r17, r1
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <main+0x106>
							{
								kropka = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <kropka>
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <main+0x10a>
							}
							else
							{
								kropka = 0;
 3c4:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <kropka>
							}

							z1 = licznik/1000;
 3c8:	98 01       	movw	r18, r16
 3ca:	36 95       	lsr	r19
 3cc:	27 95       	ror	r18
 3ce:	36 95       	lsr	r19
 3d0:	27 95       	ror	r18
 3d2:	36 95       	lsr	r19
 3d4:	27 95       	ror	r18
 3d6:	a5 ec       	ldi	r26, 0xC5	; 197
 3d8:	b0 e2       	ldi	r27, 0x20	; 32
 3da:	12 d4       	rcall	.+2084   	; 0xc00 <__umulhisi3>
 3dc:	7c 01       	movw	r14, r24
 3de:	f6 94       	lsr	r15
 3e0:	e7 94       	ror	r14
 3e2:	f6 94       	lsr	r15
 3e4:	e7 94       	ror	r14
 3e6:	f6 94       	lsr	r15
 3e8:	e7 94       	ror	r14
 3ea:	f6 94       	lsr	r15
 3ec:	e7 94       	ror	r14
 3ee:	e0 92 d7 00 	sts	0x00D7, r14	; 0x8000d7 <z1>

							z2 = (licznik-(z1*1000))/100;
 3f2:	88 e1       	ldi	r24, 0x18	; 24
 3f4:	9c ef       	ldi	r25, 0xFC	; 252
 3f6:	e8 9e       	mul	r14, r24
 3f8:	f0 01       	movw	r30, r0
 3fa:	e9 9e       	mul	r14, r25
 3fc:	f0 0d       	add	r31, r0
 3fe:	f8 9e       	mul	r15, r24
 400:	f0 0d       	add	r31, r0
 402:	11 24       	eor	r1, r1
 404:	98 01       	movw	r18, r16
 406:	2e 0f       	add	r18, r30
 408:	3f 1f       	adc	r19, r31
 40a:	36 95       	lsr	r19
 40c:	27 95       	ror	r18
 40e:	36 95       	lsr	r19
 410:	27 95       	ror	r18
 412:	ab e7       	ldi	r26, 0x7B	; 123
 414:	b4 e1       	ldi	r27, 0x14	; 20
 416:	f4 d3       	rcall	.+2024   	; 0xc00 <__umulhisi3>
 418:	6c 01       	movw	r12, r24
 41a:	d6 94       	lsr	r13
 41c:	c7 94       	ror	r12
 41e:	c0 92 d6 00 	sts	0x00D6, r12	; 0x8000d6 <z2>
	
							z3 = (licznik-(z1*1000)-(z2*100))/10;
 422:	4c e9       	ldi	r20, 0x9C	; 156
 424:	5c 2d       	mov	r21, r12
 426:	45 03       	mulsu	r20, r21
 428:	90 01       	movw	r18, r0
 42a:	11 24       	eor	r1, r1
 42c:	2e 0f       	add	r18, r30
 42e:	3f 1f       	adc	r19, r31
 430:	20 0f       	add	r18, r16
 432:	31 1f       	adc	r19, r17
 434:	ad ec       	ldi	r26, 0xCD	; 205
 436:	bc ec       	ldi	r27, 0xCC	; 204
 438:	e3 d3       	rcall	.+1990   	; 0xc00 <__umulhisi3>
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <z3>

							z4 = (licznik-(z1*1000)-(z2*100)-(z3*10));
 44a:	4c 9d       	mul	r20, r12
 44c:	40 2d       	mov	r20, r0
 44e:	11 24       	eor	r1, r1
 450:	28 e1       	ldi	r18, 0x18	; 24
 452:	e2 9e       	mul	r14, r18
 454:	40 0d       	add	r20, r0
 456:	11 24       	eor	r1, r1
 458:	40 0f       	add	r20, r16
 45a:	88 0f       	add	r24, r24
 45c:	98 2f       	mov	r25, r24
 45e:	99 0f       	add	r25, r25
 460:	99 0f       	add	r25, r25
 462:	89 0f       	add	r24, r25
 464:	48 1b       	sub	r20, r24
 466:	40 93 d8 00 	sts	0x00D8, r20	; 0x8000d8 <z4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46a:	5f e7       	ldi	r21, 0x7F	; 127
 46c:	88 e3       	ldi	r24, 0x38	; 56
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	51 50       	subi	r21, 0x01	; 1
 472:	80 40       	sbci	r24, 0x00	; 0
 474:	90 40       	sbci	r25, 0x00	; 0
 476:	e1 f7       	brne	.-8      	; 0x470 <__stack+0x11>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__stack+0x1b>
 47a:	00 00       	nop

							_delay_ms(50);

							if(flagaZatrzymania==0)
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	81 11       	cpse	r24, r1
 480:	02 c0       	rjmp	.+4      	; 0x486 <__stack+0x27>
							{
								licznik++;
 482:	0f 5f       	subi	r16, 0xFF	; 255
 484:	1f 4f       	sbci	r17, 0xFF	; 255
							}

							if(licznik == 9999) licznik = 0;
 486:	0f 30       	cpi	r16, 0x0F	; 15
 488:	27 e2       	ldi	r18, 0x27	; 39
 48a:	12 07       	cpc	r17, r18
 48c:	09 f0       	breq	.+2      	; 0x490 <__stack+0x31>
 48e:	70 c0       	rjmp	.+224    	; 0x570 <__stack+0x111>
 490:	6a c0       	rjmp	.+212    	; 0x566 <__stack+0x107>
				break;
				case 2:
							
							ObsluzPrzycisk(&flagaPrzycisku, &flagaZatrzymania);
 492:	be 01       	movw	r22, r28
 494:	6e 5f       	subi	r22, 0xFE	; 254
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	d5 de       	rcall	.-598    	; 0x248 <ObsluzPrzycisk>

							z1 = licznik/1000;
 49e:	98 01       	movw	r18, r16
 4a0:	36 95       	lsr	r19
 4a2:	27 95       	ror	r18
 4a4:	36 95       	lsr	r19
 4a6:	27 95       	ror	r18
 4a8:	36 95       	lsr	r19
 4aa:	27 95       	ror	r18
 4ac:	a5 ec       	ldi	r26, 0xC5	; 197
 4ae:	b0 e2       	ldi	r27, 0x20	; 32
 4b0:	a7 d3       	rcall	.+1870   	; 0xc00 <__umulhisi3>
 4b2:	7c 01       	movw	r14, r24
 4b4:	f6 94       	lsr	r15
 4b6:	e7 94       	ror	r14
 4b8:	f6 94       	lsr	r15
 4ba:	e7 94       	ror	r14
 4bc:	f6 94       	lsr	r15
 4be:	e7 94       	ror	r14
 4c0:	f6 94       	lsr	r15
 4c2:	e7 94       	ror	r14
 4c4:	e0 92 d7 00 	sts	0x00D7, r14	; 0x8000d7 <z1>

							z2 = (licznik-(z1*1000))/100;
 4c8:	88 e1       	ldi	r24, 0x18	; 24
 4ca:	9c ef       	ldi	r25, 0xFC	; 252
 4cc:	e8 9e       	mul	r14, r24
 4ce:	f0 01       	movw	r30, r0
 4d0:	e9 9e       	mul	r14, r25
 4d2:	f0 0d       	add	r31, r0
 4d4:	f8 9e       	mul	r15, r24
 4d6:	f0 0d       	add	r31, r0
 4d8:	11 24       	eor	r1, r1
 4da:	98 01       	movw	r18, r16
 4dc:	2e 0f       	add	r18, r30
 4de:	3f 1f       	adc	r19, r31
 4e0:	36 95       	lsr	r19
 4e2:	27 95       	ror	r18
 4e4:	36 95       	lsr	r19
 4e6:	27 95       	ror	r18
 4e8:	ab e7       	ldi	r26, 0x7B	; 123
 4ea:	b4 e1       	ldi	r27, 0x14	; 20
 4ec:	89 d3       	rcall	.+1810   	; 0xc00 <__umulhisi3>
 4ee:	6c 01       	movw	r12, r24
 4f0:	d6 94       	lsr	r13
 4f2:	c7 94       	ror	r12
 4f4:	c0 92 d6 00 	sts	0x00D6, r12	; 0x8000d6 <z2>
							
							z3 = (licznik-(z1*1000)-(z2*100))/10;
 4f8:	4c e9       	ldi	r20, 0x9C	; 156
 4fa:	5c 2d       	mov	r21, r12
 4fc:	45 03       	mulsu	r20, r21
 4fe:	90 01       	movw	r18, r0
 500:	11 24       	eor	r1, r1
 502:	2e 0f       	add	r18, r30
 504:	3f 1f       	adc	r19, r31
 506:	20 0f       	add	r18, r16
 508:	31 1f       	adc	r19, r17
 50a:	ad ec       	ldi	r26, 0xCD	; 205
 50c:	bc ec       	ldi	r27, 0xCC	; 204
 50e:	78 d3       	rcall	.+1776   	; 0xc00 <__umulhisi3>
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
 51c:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <z3>

							z4 = (licznik-(z1*1000)-(z2*100)-(z3*10));
 520:	4c 9d       	mul	r20, r12
 522:	40 2d       	mov	r20, r0
 524:	11 24       	eor	r1, r1
 526:	28 e1       	ldi	r18, 0x18	; 24
 528:	e2 9e       	mul	r14, r18
 52a:	40 0d       	add	r20, r0
 52c:	11 24       	eor	r1, r1
 52e:	40 0f       	add	r20, r16
 530:	88 0f       	add	r24, r24
 532:	98 2f       	mov	r25, r24
 534:	99 0f       	add	r25, r25
 536:	99 0f       	add	r25, r25
 538:	89 0f       	add	r24, r25
 53a:	48 1b       	sub	r20, r24
 53c:	40 93 d8 00 	sts	0x00D8, r20	; 0x8000d8 <z4>
 540:	5f e7       	ldi	r21, 0x7F	; 127
 542:	88 e3       	ldi	r24, 0x38	; 56
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	51 50       	subi	r21, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <__stack+0xe7>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__stack+0xf1>
 550:	00 00       	nop

							_delay_ms(50);

							if(flagaZatrzymania==0)
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	81 11       	cpse	r24, r1
 556:	02 c0       	rjmp	.+4      	; 0x55c <__stack+0xfd>
							{
								licznik--;
 558:	01 50       	subi	r16, 0x01	; 1
 55a:	11 09       	sbc	r17, r1
							}

							if(licznik == 9999) licznik = 0;
 55c:	0f 30       	cpi	r16, 0x0F	; 15
 55e:	27 e2       	ldi	r18, 0x27	; 39
 560:	12 07       	cpc	r17, r18
 562:	31 f4       	brne	.+12     	; 0x570 <__stack+0x111>
 564:	03 c0       	rjmp	.+6      	; 0x56c <__stack+0x10d>
							if(flagaZatrzymania==0)
							{
								licznik++;
							}

							if(licznik == 9999) licznik = 0;
 566:	00 e0       	ldi	r16, 0x00	; 0
 568:	10 e0       	ldi	r17, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <__stack+0x111>
							if(flagaZatrzymania==0)
							{
								licznik--;
							}

							if(licznik == 9999) licznik = 0;
 56c:	00 e0       	ldi	r16, 0x00	; 0
 56e:	10 e0       	ldi	r17, 0x00	; 0
				default:
				/* Your code here */
				break;
			}

	ObsluzPrzyciskZmianyTrybu();
 570:	93 de       	rcall	.-730    	; 0x298 <ObsluzPrzyciskZmianyTrybu>
	}
 572:	da ce       	rjmp	.-588    	; 0x328 <main+0x6a>

00000574 <obsluzKropke>:

volatile uint8_t katoda=0b00000001;

void obsluzKropke()
{
	if(kropka > 0)
 574:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <kropka>
 578:	88 23       	and	r24, r24
 57a:	21 f0       	breq	.+8      	; 0x584 <obsluzKropke+0x10>
	{
		PORTD |= (1<<PIND0);
 57c:	82 b3       	in	r24, 0x12	; 18
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	82 bb       	out	0x12, r24	; 18
 582:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1<<PIND0);
 584:	82 b3       	in	r24, 0x12	; 18
 586:	8e 7f       	andi	r24, 0xFE	; 254
 588:	82 bb       	out	0x12, r24	; 18
 58a:	08 95       	ret

0000058c <PodajZnak>:
}

unsigned int PodajZnak(uint8_t znak)
{

	switch (znak)
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	fc 01       	movw	r30, r24
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	e9 30       	cpi	r30, 0x09	; 9
 594:	f1 05       	cpc	r31, r1
 596:	18 f4       	brcc	.+6      	; 0x59e <PodajZnak+0x12>
 598:	ed 5e       	subi	r30, 0xED	; 237
 59a:	ff 4f       	sbci	r31, 0xFF	; 255
 59c:	09 94       	ijmp
	{
		case 0:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
 59e:	8c ef       	ldi	r24, 0xFC	; 252
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	08 95       	ret
		case 1:
		return (SEG_B|SEG_C) ;
		case 2:
		return (SEG_A|SEG_B|SEG_G|SEG_E|SEG_D);
 5a4:	8a ed       	ldi	r24, 0xDA	; 218
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	08 95       	ret
		case 3:
		return (SEG_A|SEG_B|SEG_G|SEG_C|SEG_D);
 5aa:	82 ef       	ldi	r24, 0xF2	; 242
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	08 95       	ret
		case 4:
		return (SEG_F|SEG_G|SEG_B|SEG_C);
 5b0:	86 e6       	ldi	r24, 0x66	; 102
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	08 95       	ret
		case 5:
		return(SEG_A|SEG_F|SEG_G|SEG_C|SEG_D);
 5b6:	86 eb       	ldi	r24, 0xB6	; 182
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	08 95       	ret
		case 6:
		return (SEG_A|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G);
 5bc:	8e eb       	ldi	r24, 0xBE	; 190
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	08 95       	ret
		case 7:
		return (SEG_A|SEG_B|SEG_C);
 5c2:	80 ee       	ldi	r24, 0xE0	; 224
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	08 95       	ret
		case 8:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G);
 5c8:	8e ef       	ldi	r24, 0xFE	; 254
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	08 95       	ret
		case 9:
		return(SEG_A|SEG_B|SEG_C|SEG_D|SEG_F|SEG_G);
 5ce:	86 ef       	ldi	r24, 0xF6	; 246
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	08 95       	ret
	switch (znak)
	{
		case 0:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
		case 1:
		return (SEG_B|SEG_C) ;
 5d4:	80 e6       	ldi	r24, 0x60	; 96
 5d6:	90 e0       	ldi	r25, 0x00	; 0
		
		default:
		return (SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F);
	}
	
}
 5d8:	08 95       	ret

000005da <wyswietl>:

void wyswietl(uint8_t segment, uint8_t cyfra)
{

	KATODY_PORT=0;
 5da:	18 ba       	out	0x18, r1	; 24

	switch (segment)
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	79 f0       	breq	.+30     	; 0x5fe <wyswietl+0x24>
 5e0:	18 f4       	brcc	.+6      	; 0x5e8 <wyswietl+0xe>
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <wyswietl+0x18>
 5e6:	08 95       	ret
 5e8:	83 30       	cpi	r24, 0x03	; 3
 5ea:	81 f0       	breq	.+32     	; 0x60c <wyswietl+0x32>
 5ec:	84 30       	cpi	r24, 0x04	; 4
 5ee:	a1 f0       	breq	.+40     	; 0x618 <wyswietl+0x3e>
 5f0:	08 95       	ret
	{
		case 1:
		
		SEGMENTY_PORT =	PodajZnak(cyfra) ;//(SEG_A|SEG_B|SEG_G|SEG_C|SEG_D);
 5f2:	86 2f       	mov	r24, r22
 5f4:	cb df       	rcall	.-106    	; 0x58c <PodajZnak>
 5f6:	82 bb       	out	0x12, r24	; 18
		KATODY_PORT=KATODA_1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	88 bb       	out	0x18, r24	; 24
		
		
		break;
 5fc:	08 95       	ret
		case 2:
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 5fe:	86 2f       	mov	r24, r22
 600:	c5 df       	rcall	.-118    	; 0x58c <PodajZnak>
 602:	82 bb       	out	0x12, r24	; 18
		obsluzKropke();
 604:	b7 df       	rcall	.-146    	; 0x574 <obsluzKropke>
		KATODY_PORT=KATODA_2;
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	88 bb       	out	0x18, r24	; 24
		
		break;
 60a:	08 95       	ret
		case 3:
		
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 60c:	86 2f       	mov	r24, r22
 60e:	be df       	rcall	.-132    	; 0x58c <PodajZnak>
 610:	82 bb       	out	0x12, r24	; 18
		KATODY_PORT=KATODA_3;
 612:	84 e0       	ldi	r24, 0x04	; 4
 614:	88 bb       	out	0x18, r24	; 24
		
		break;
 616:	08 95       	ret
		case 4:
		SEGMENTY_PORT=	PodajZnak(cyfra) ;
 618:	86 2f       	mov	r24, r22
 61a:	b8 df       	rcall	.-144    	; 0x58c <PodajZnak>
 61c:	82 bb       	out	0x12, r24	; 18
		KATODY_PORT=KATODA_4;
 61e:	88 e0       	ldi	r24, 0x08	; 8
 620:	88 bb       	out	0x18, r24	; 24
 622:	08 95       	ret

00000624 <multipleks_init>:
		/* Your code here */
		break;
	}
}
void multipleks_init( void )	{
		SEGMENTY_DDR = 0xff;
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	81 bb       	out	0x11, r24	; 17
		SEGMENTY_PORT = 0xff;
 628:	82 bb       	out	0x12, r24	; 18

		KATODY_DDR |= KATODA_1 | KATODA_2 | KATODA_3 | KATODA_4;
 62a:	97 b3       	in	r25, 0x17	; 23
 62c:	9f 60       	ori	r25, 0x0F	; 15
 62e:	97 bb       	out	0x17, r25	; 23
		KATODY_PORT = 0x00;
 630:	18 ba       	out	0x18, r1	; 24
 632:	2f ef       	ldi	r18, 0xFF	; 255
 634:	39 e6       	ldi	r19, 0x69	; 105
 636:	98 e1       	ldi	r25, 0x18	; 24
 638:	21 50       	subi	r18, 0x01	; 1
 63a:	30 40       	sbci	r19, 0x00	; 0
 63c:	90 40       	sbci	r25, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <multipleks_init+0x14>
 640:	00 c0       	rjmp	.+0      	; 0x642 <multipleks_init+0x1e>
 642:	00 00       	nop

		_delay_ms (1000);
		KATODY_PORT = 0xff;
 644:	88 bb       	out	0x18, r24	; 24
 646:	2f ef       	ldi	r18, 0xFF	; 255
 648:	39 e6       	ldi	r19, 0x69	; 105
 64a:	88 e1       	ldi	r24, 0x18	; 24
 64c:	21 50       	subi	r18, 0x01	; 1
 64e:	30 40       	sbci	r19, 0x00	; 0
 650:	80 40       	sbci	r24, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <multipleks_init+0x28>
 654:	00 c0       	rjmp	.+0      	; 0x656 <multipleks_init+0x32>
 656:	00 00       	nop
		_delay_ms (1000);
		KATODY_PORT = 0x00;
 658:	18 ba       	out	0x18, r1	; 24
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	29 e6       	ldi	r18, 0x69	; 105
 65e:	38 e1       	ldi	r19, 0x18	; 24
 660:	91 50       	subi	r25, 0x01	; 1
 662:	20 40       	sbci	r18, 0x00	; 0
 664:	30 40       	sbci	r19, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <multipleks_init+0x3c>
 668:	00 c0       	rjmp	.+0      	; 0x66a <multipleks_init+0x46>
 66a:	00 00       	nop
		_delay_ms (1000);
		SEGMENTY_PORT = 0;
 66c:	12 ba       	out	0x12, r1	; 18

		TCCR2 |= (1<<WGM21);
 66e:	85 b5       	in	r24, 0x25	; 37
 670:	88 60       	ori	r24, 0x08	; 8
 672:	85 bd       	out	0x25, r24	; 37
		TCCR2 |= (1<<CS22)|(1<<CS21);
 674:	85 b5       	in	r24, 0x25	; 37
 676:	86 60       	ori	r24, 0x06	; 6
 678:	85 bd       	out	0x25, r24	; 37
		OCR2 = 155;
 67a:	8b e9       	ldi	r24, 0x9B	; 155
 67c:	83 bd       	out	0x23, r24	; 35
		TIMSK |= (1<<OCIE2);
 67e:	89 b7       	in	r24, 0x39	; 57
 680:	80 68       	ori	r24, 0x80	; 128
 682:	89 bf       	out	0x39, r24	; 57
 684:	08 95       	ret

00000686 <__vector_3>:
}

ISR(	TIMER2_COMP_vect	) {
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	11 24       	eor	r1, r1
 690:	2f 93       	push	r18
 692:	3f 93       	push	r19
 694:	4f 93       	push	r20
 696:	5f 93       	push	r21
 698:	6f 93       	push	r22
 69a:	7f 93       	push	r23
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
 6a0:	af 93       	push	r26
 6a2:	bf 93       	push	r27
 6a4:	ef 93       	push	r30
 6a6:	ff 93       	push	r31

	//static uint8_t licznik;

switch (numerZnaku)
 6a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6ac:	82 30       	cpi	r24, 0x02	; 2
 6ae:	79 f0       	breq	.+30     	; 0x6ce <__vector_3+0x48>
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <__vector_3+0x32>
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	31 f0       	breq	.+12     	; 0x6c2 <__vector_3+0x3c>
 6b6:	1c c0       	rjmp	.+56     	; 0x6f0 <__vector_3+0x6a>
 6b8:	83 30       	cpi	r24, 0x03	; 3
 6ba:	79 f0       	breq	.+30     	; 0x6da <__vector_3+0x54>
 6bc:	84 30       	cpi	r24, 0x04	; 4
 6be:	99 f0       	breq	.+38     	; 0x6e6 <__vector_3+0x60>
 6c0:	17 c0       	rjmp	.+46     	; 0x6f0 <__vector_3+0x6a>
{
	case 1:
	wyswietl(numerZnaku,z1);
 6c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6c6:	60 91 d7 00 	lds	r22, 0x00D7	; 0x8000d7 <z1>
 6ca:	87 df       	rcall	.-242    	; 0x5da <wyswietl>
	break;
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <__vector_3+0x6a>
		case 2:
		wyswietl(numerZnaku,z2);
 6ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6d2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <z2>
 6d6:	81 df       	rcall	.-254    	; 0x5da <wyswietl>
		break;
 6d8:	0b c0       	rjmp	.+22     	; 0x6f0 <__vector_3+0x6a>
			case 3:
			wyswietl(numerZnaku,z3);
 6da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6de:	60 91 d9 00 	lds	r22, 0x00D9	; 0x8000d9 <z3>
 6e2:	7b df       	rcall	.-266    	; 0x5da <wyswietl>
			break;
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <__vector_3+0x6a>
				case 4:
				wyswietl(numerZnaku,z4);
 6e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6ea:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <z4>
 6ee:	75 df       	rcall	.-278    	; 0x5da <wyswietl>
	/* Your code here */
	break;
}
	

	numerZnaku++;
 6f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if( numerZnaku > 4 ) numerZnaku = 1;
 6fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6fe:	85 30       	cpi	r24, 0x05	; 5
 700:	18 f0       	brcs	.+6      	; 0x708 <__vector_3+0x82>
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
   


}
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	bf 91       	pop	r27
 70e:	af 91       	pop	r26
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	7f 91       	pop	r23
 716:	6f 91       	pop	r22
 718:	5f 91       	pop	r21
 71a:	4f 91       	pop	r20
 71c:	3f 91       	pop	r19
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0f be       	out	0x3f, r0	; 63
 724:	0f 90       	pop	r0
 726:	1f 90       	pop	r1
 728:	18 95       	reti

0000072a <bcd2dec>:
		_tm.twelveHour = _tm.hour - 12;
		_tm.am = 0;
	}

	return &_tm;
}
 72a:	98 2f       	mov	r25, r24
 72c:	92 95       	swap	r25
 72e:	9f 70       	andi	r25, 0x0F	; 15
 730:	99 0f       	add	r25, r25
 732:	29 2f       	mov	r18, r25
 734:	22 0f       	add	r18, r18
 736:	22 0f       	add	r18, r18
 738:	92 0f       	add	r25, r18
 73a:	8f 70       	andi	r24, 0x0F	; 15
 73c:	89 0f       	add	r24, r25
 73e:	08 95       	ret

00000740 <rtc_get_time_s>:

void rtc_get_time_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
{
 740:	8f 92       	push	r8
 742:	9f 92       	push	r9
 744:	af 92       	push	r10
 746:	bf 92       	push	r11
 748:	cf 92       	push	r12
 74a:	df 92       	push	r13
 74c:	ef 92       	push	r14
 74e:	ff 92       	push	r15
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
 75a:	29 97       	sbiw	r28, 0x09	; 9
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	6c 01       	movw	r12, r24
 768:	5b 01       	movw	r10, r22
 76a:	4a 01       	movw	r8, r20
	uint8_t rtc[9];

	// read 7 bytes starting from register 0
	// sec, min, hour, day-of-week, date, month, year
	twi_begin_transmission(RTC_ADDR);
 76c:	88 e6       	ldi	r24, 0x68	; 104
 76e:	fa d1       	rcall	.+1012   	; 0xb64 <twi_begin_transmission>
	twi_send_byte(0x0);
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	11 d2       	rcall	.+1058   	; 0xb96 <twi_send_byte>
	twi_end_transmission();
 774:	01 d2       	rcall	.+1026   	; 0xb78 <twi_end_transmission>
	
	twi_request_from(RTC_ADDR, 7);
 776:	67 e0       	ldi	r22, 0x07	; 7
 778:	88 e6       	ldi	r24, 0x68	; 104
 77a:	e8 d1       	rcall	.+976    	; 0xb4c <twi_request_from>
	
	for(uint8_t i=0; i<7; i++) {
 77c:	10 e0       	ldi	r17, 0x00	; 0
 77e:	0b c0       	rjmp	.+22     	; 0x796 <rtc_get_time_s+0x56>
		rtc[i] = twi_receive();
 780:	e1 2e       	mov	r14, r17
 782:	f1 2c       	mov	r15, r1
 784:	2c d2       	rcall	.+1112   	; 0xbde <twi_receive>
 786:	e1 e0       	ldi	r30, 0x01	; 1
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	ec 0f       	add	r30, r28
 78c:	fd 1f       	adc	r31, r29
 78e:	ee 0d       	add	r30, r14
 790:	ff 1d       	adc	r31, r15
 792:	80 83       	st	Z, r24
	twi_send_byte(0x0);
	twi_end_transmission();
	
	twi_request_from(RTC_ADDR, 7);
	
	for(uint8_t i=0; i<7; i++) {
 794:	1f 5f       	subi	r17, 0xFF	; 255
 796:	17 30       	cpi	r17, 0x07	; 7
 798:	98 f3       	brcs	.-26     	; 0x780 <rtc_get_time_s+0x40>
		rtc[i] = twi_receive();
	}
	
	twi_end_transmission();
 79a:	ee d1       	rcall	.+988    	; 0xb78 <twi_end_transmission>
	
	if (sec)  *sec =  bcd2dec(rtc[0]);
 79c:	81 14       	cp	r8, r1
 79e:	91 04       	cpc	r9, r1
 7a0:	21 f0       	breq	.+8      	; 0x7aa <rtc_get_time_s+0x6a>
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
 7a4:	c2 df       	rcall	.-124    	; 0x72a <bcd2dec>
 7a6:	f4 01       	movw	r30, r8
 7a8:	80 83       	st	Z, r24
	if (min)  *min =  bcd2dec(rtc[1]);
 7aa:	a1 14       	cp	r10, r1
 7ac:	b1 04       	cpc	r11, r1
 7ae:	21 f0       	breq	.+8      	; 0x7b8 <rtc_get_time_s+0x78>
 7b0:	8a 81       	ldd	r24, Y+2	; 0x02
 7b2:	bb df       	rcall	.-138    	; 0x72a <bcd2dec>
 7b4:	f5 01       	movw	r30, r10
 7b6:	80 83       	st	Z, r24
	if (hour) *hour = bcd2dec(rtc[2]);
 7b8:	c1 14       	cp	r12, r1
 7ba:	d1 04       	cpc	r13, r1
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <rtc_get_time_s+0x86>
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	b4 df       	rcall	.-152    	; 0x72a <bcd2dec>
 7c2:	f6 01       	movw	r30, r12
 7c4:	80 83       	st	Z, r24
}
 7c6:	29 96       	adiw	r28, 0x09	; 9
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	ff 90       	pop	r15
 7da:	ef 90       	pop	r14
 7dc:	df 90       	pop	r13
 7de:	cf 90       	pop	r12
 7e0:	bf 90       	pop	r11
 7e2:	af 90       	pop	r10
 7e4:	9f 90       	pop	r9
 7e6:	8f 90       	pop	r8
 7e8:	08 95       	ret

000007ea <twi_init>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
 7ea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <twi_state>
 7ee:	82 b3       	in	r24, 0x12	; 18
 7f0:	81 60       	ori	r24, 0x01	; 1
 7f2:	82 bb       	out	0x12, r24	; 18
 7f4:	82 b3       	in	r24, 0x12	; 18
 7f6:	82 60       	ori	r24, 0x02	; 2
 7f8:	82 bb       	out	0x12, r24	; 18
 7fa:	81 b1       	in	r24, 0x01	; 1
 7fc:	8e 7f       	andi	r24, 0xFE	; 254
 7fe:	81 b9       	out	0x01, r24	; 1
 800:	81 b1       	in	r24, 0x01	; 1
 802:	8d 7f       	andi	r24, 0xFD	; 253
 804:	81 b9       	out	0x01, r24	; 1
 806:	84 e2       	ldi	r24, 0x24	; 36
 808:	80 b9       	out	0x00, r24	; 0
 80a:	85 e4       	ldi	r24, 0x45	; 69
 80c:	86 bf       	out	0x36, r24	; 54
 80e:	08 95       	ret

00000810 <twi_readFrom>:
 810:	41 32       	cpi	r20, 0x21	; 33
 812:	90 f5       	brcc	.+100    	; 0x878 <twi_readFrom+0x68>
 814:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <twi_state>
 818:	91 11       	cpse	r25, r1
 81a:	fc cf       	rjmp	.-8      	; 0x814 <twi_readFrom+0x4>
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <twi_state>
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
 828:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <twi_masterBufferIndex>
 82c:	94 0f       	add	r25, r20
 82e:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <twi_masterBufferLength>
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <twi_slarw>
 83e:	85 ee       	ldi	r24, 0xE5	; 229
 840:	86 bf       	out	0x36, r24	; 54
 842:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <twi_state>
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	e1 f3       	breq	.-8      	; 0x842 <twi_readFrom+0x32>
 84a:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <twi_masterBufferIndex>
 84e:	84 17       	cp	r24, r20
 850:	10 f4       	brcc	.+4      	; 0x856 <twi_readFrom+0x46>
 852:	40 91 a7 00 	lds	r20, 0x00A7	; 0x8000a7 <twi_masterBufferIndex>
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0b c0       	rjmp	.+22     	; 0x870 <twi_readFrom+0x60>
 85a:	29 2f       	mov	r18, r25
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	fb 01       	movw	r30, r22
 860:	e2 0f       	add	r30, r18
 862:	f3 1f       	adc	r31, r19
 864:	d9 01       	movw	r26, r18
 866:	a8 55       	subi	r26, 0x58	; 88
 868:	bf 4f       	sbci	r27, 0xFF	; 255
 86a:	2c 91       	ld	r18, X
 86c:	20 83       	st	Z, r18
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	94 17       	cp	r25, r20
 872:	98 f3       	brcs	.-26     	; 0x85a <twi_readFrom+0x4a>
 874:	84 2f       	mov	r24, r20
 876:	08 95       	ret
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	08 95       	ret

0000087c <twi_writeTo>:
 87c:	41 32       	cpi	r20, 0x21	; 33
 87e:	b8 f5       	brcc	.+110    	; 0x8ee <twi_writeTo+0x72>
 880:	50 91 cd 00 	lds	r21, 0x00CD	; 0x8000cd <twi_state>
 884:	51 11       	cpse	r21, r1
 886:	fc cf       	rjmp	.-8      	; 0x880 <twi_writeTo+0x4>
 888:	92 e0       	ldi	r25, 0x02	; 2
 88a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <twi_state>
 88e:	9f ef       	ldi	r25, 0xFF	; 255
 890:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
 894:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <twi_masterBufferIndex>
 898:	40 93 a6 00 	sts	0x00A6, r20	; 0x8000a6 <twi_masterBufferLength>
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0a c0       	rjmp	.+20     	; 0x8b4 <twi_writeTo+0x38>
 8a0:	e9 2f       	mov	r30, r25
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	db 01       	movw	r26, r22
 8a6:	ae 0f       	add	r26, r30
 8a8:	bf 1f       	adc	r27, r31
 8aa:	3c 91       	ld	r19, X
 8ac:	e8 55       	subi	r30, 0x58	; 88
 8ae:	ff 4f       	sbci	r31, 0xFF	; 255
 8b0:	30 83       	st	Z, r19
 8b2:	9f 5f       	subi	r25, 0xFF	; 255
 8b4:	94 17       	cp	r25, r20
 8b6:	a0 f3       	brcs	.-24     	; 0x8a0 <twi_writeTo+0x24>
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <twi_slarw>
 8c2:	85 ee       	ldi	r24, 0xE5	; 229
 8c4:	86 bf       	out	0x36, r24	; 54
 8c6:	22 23       	and	r18, r18
 8c8:	21 f0       	breq	.+8      	; 0x8d2 <twi_writeTo+0x56>
 8ca:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <twi_state>
 8ce:	82 30       	cpi	r24, 0x02	; 2
 8d0:	d1 f3       	breq	.-12     	; 0x8c6 <twi_writeTo+0x4a>
 8d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 8d6:	8f 3f       	cpi	r24, 0xFF	; 255
 8d8:	79 f0       	breq	.+30     	; 0x8f8 <twi_writeTo+0x7c>
 8da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 8de:	80 32       	cpi	r24, 0x20	; 32
 8e0:	41 f0       	breq	.+16     	; 0x8f2 <twi_writeTo+0x76>
 8e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 8e6:	80 33       	cpi	r24, 0x30	; 48
 8e8:	31 f4       	brne	.+12     	; 0x8f6 <twi_writeTo+0x7a>
 8ea:	53 e0       	ldi	r21, 0x03	; 3
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <twi_writeTo+0x7c>
 8ee:	51 e0       	ldi	r21, 0x01	; 1
 8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <twi_writeTo+0x7c>
 8f2:	52 e0       	ldi	r21, 0x02	; 2
 8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <twi_writeTo+0x7c>
 8f6:	54 e0       	ldi	r21, 0x04	; 4
 8f8:	85 2f       	mov	r24, r21
 8fa:	08 95       	ret

000008fc <twi_transmit>:
 8fc:	dc 01       	movw	r26, r24
 8fe:	61 32       	cpi	r22, 0x21	; 33
 900:	b8 f4       	brcc	.+46     	; 0x930 <twi_transmit+0x34>
 902:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <twi_state>
 906:	84 30       	cpi	r24, 0x04	; 4
 908:	a9 f4       	brne	.+42     	; 0x934 <twi_transmit+0x38>
 90a:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <twi_txBufferLength>
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0b c0       	rjmp	.+22     	; 0x928 <twi_transmit+0x2c>
 912:	29 2f       	mov	r18, r25
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	fd 01       	movw	r30, r26
 918:	e2 0f       	add	r30, r18
 91a:	f3 1f       	adc	r31, r19
 91c:	40 81       	ld	r20, Z
 91e:	f9 01       	movw	r30, r18
 920:	ea 57       	subi	r30, 0x7A	; 122
 922:	ff 4f       	sbci	r31, 0xFF	; 255
 924:	40 83       	st	Z, r20
 926:	9f 5f       	subi	r25, 0xFF	; 255
 928:	96 17       	cp	r25, r22
 92a:	98 f3       	brcs	.-26     	; 0x912 <twi_transmit+0x16>
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	08 95       	ret
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	08 95       	ret
 934:	82 e0       	ldi	r24, 0x02	; 2
 936:	08 95       	ret

00000938 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
 938:	88 23       	and	r24, r24
 93a:	19 f0       	breq	.+6      	; 0x942 <twi_reply+0xa>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 93c:	85 ec       	ldi	r24, 0xC5	; 197
 93e:	86 bf       	out	0x36, r24	; 54
 940:	08 95       	ret
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 942:	85 e8       	ldi	r24, 0x85	; 133
 944:	86 bf       	out	0x36, r24	; 54
 946:	08 95       	ret

00000948 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 948:	85 ed       	ldi	r24, 0xD5	; 213
 94a:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 94c:	06 b6       	in	r0, 0x36	; 54
 94e:	04 fc       	sbrc	r0, 4
 950:	fd cf       	rjmp	.-6      	; 0x94c <twi_stop+0x4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 952:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <twi_state>
 956:	08 95       	ret

00000958 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 958:	85 ec       	ldi	r24, 0xC5	; 197
 95a:	86 bf       	out	0x36, r24	; 54

  // update twi state
  twi_state = TWI_READY;
 95c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <twi_state>
 960:	08 95       	ret

00000962 <__vector_17>:
}

SIGNAL(TWI_vect)
{
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	2f 93       	push	r18
 96e:	3f 93       	push	r19
 970:	4f 93       	push	r20
 972:	5f 93       	push	r21
 974:	6f 93       	push	r22
 976:	7f 93       	push	r23
 978:	8f 93       	push	r24
 97a:	9f 93       	push	r25
 97c:	af 93       	push	r26
 97e:	bf 93       	push	r27
 980:	ef 93       	push	r30
 982:	ff 93       	push	r31
  switch(TW_STATUS){
 984:	81 b1       	in	r24, 0x01	; 1
 986:	e8 2f       	mov	r30, r24
 988:	e8 7f       	andi	r30, 0xF8	; 248
 98a:	8e 2f       	mov	r24, r30
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	89 3c       	cpi	r24, 0xC9	; 201
 990:	91 05       	cpc	r25, r1
 992:	08 f0       	brcs	.+2      	; 0x996 <__vector_17+0x34>
 994:	c0 c0       	rjmp	.+384    	; 0xb16 <__vector_17+0x1b4>
 996:	fc 01       	movw	r30, r24
 998:	e4 5e       	subi	r30, 0xE4	; 228
 99a:	ff 4f       	sbci	r31, 0xFF	; 255
 99c:	09 94       	ijmp
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 99e:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <twi_slarw>
 9a2:	83 b9       	out	0x03, r24	; 3
      twi_reply(1);
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	c8 df       	rcall	.-112    	; 0x938 <twi_reply>
      break;
 9a8:	b6 c0       	rjmp	.+364    	; 0xb16 <__vector_17+0x1b4>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 9aa:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <twi_masterBufferIndex>
 9ae:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <twi_masterBufferLength>
 9b2:	98 17       	cp	r25, r24
 9b4:	70 f4       	brcc	.+28     	; 0x9d2 <__vector_17+0x70>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 9b6:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <twi_masterBufferIndex>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	8e 0f       	add	r24, r30
 9be:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <twi_masterBufferIndex>
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	e8 55       	subi	r30, 0x58	; 88
 9c6:	ff 4f       	sbci	r31, 0xFF	; 255
 9c8:	80 81       	ld	r24, Z
 9ca:	83 b9       	out	0x03, r24	; 3
        twi_reply(1);
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	b4 df       	rcall	.-152    	; 0x938 <twi_reply>
 9d0:	a2 c0       	rjmp	.+324    	; 0xb16 <__vector_17+0x1b4>
      }else{
        twi_stop();
 9d2:	ba df       	rcall	.-140    	; 0x948 <twi_stop>
 9d4:	a0 c0       	rjmp	.+320    	; 0xb16 <__vector_17+0x1b4>
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 9d6:	80 e2       	ldi	r24, 0x20	; 32
 9d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
      twi_stop();
 9dc:	b5 df       	rcall	.-150    	; 0x948 <twi_stop>
      break;
 9de:	9b c0       	rjmp	.+310    	; 0xb16 <__vector_17+0x1b4>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 9e0:	80 e3       	ldi	r24, 0x30	; 48
 9e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
      twi_stop();
 9e6:	b0 df       	rcall	.-160    	; 0x948 <twi_stop>
      break;
 9e8:	96 c0       	rjmp	.+300    	; 0xb16 <__vector_17+0x1b4>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 9ea:	88 e3       	ldi	r24, 0x38	; 56
 9ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
      twi_releaseBus();
 9f0:	b3 df       	rcall	.-154    	; 0x958 <twi_releaseBus>
      break;
 9f2:	91 c0       	rjmp	.+290    	; 0xb16 <__vector_17+0x1b4>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 9f4:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <twi_masterBufferIndex>
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	8e 0f       	add	r24, r30
 9fc:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <twi_masterBufferIndex>
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	83 b1       	in	r24, 0x03	; 3
 a04:	e8 55       	subi	r30, 0x58	; 88
 a06:	ff 4f       	sbci	r31, 0xFF	; 255
 a08:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 a0a:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <twi_masterBufferIndex>
 a0e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <twi_masterBufferLength>
 a12:	98 17       	cp	r25, r24
 a14:	18 f4       	brcc	.+6      	; 0xa1c <__vector_17+0xba>
        twi_reply(1);
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	8f df       	rcall	.-226    	; 0x938 <twi_reply>
 a1a:	7d c0       	rjmp	.+250    	; 0xb16 <__vector_17+0x1b4>
      }else{
        twi_reply(0);
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	8c df       	rcall	.-232    	; 0x938 <twi_reply>
 a20:	7a c0       	rjmp	.+244    	; 0xb16 <__vector_17+0x1b4>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 a22:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <twi_masterBufferIndex>
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	8e 0f       	add	r24, r30
 a2a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <twi_masterBufferIndex>
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	83 b1       	in	r24, 0x03	; 3
 a32:	e8 55       	subi	r30, 0x58	; 88
 a34:	ff 4f       	sbci	r31, 0xFF	; 255
 a36:	80 83       	st	Z, r24
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 a38:	87 df       	rcall	.-242    	; 0x948 <twi_stop>
      break;
 a3a:	6d c0       	rjmp	.+218    	; 0xb16 <__vector_17+0x1b4>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 a3c:	83 e0       	ldi	r24, 0x03	; 3
 a3e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 a42:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <twi_rxBufferIndex>
      twi_reply(1);
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	77 df       	rcall	.-274    	; 0x938 <twi_reply>
      break;
 a4a:	65 c0       	rjmp	.+202    	; 0xb16 <__vector_17+0x1b4>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 a4c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <twi_rxBufferIndex>
 a50:	80 32       	cpi	r24, 0x20	; 32
 a52:	70 f4       	brcc	.+28     	; 0xa70 <__vector_17+0x10e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 a54:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <twi_rxBufferIndex>
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	8e 0f       	add	r24, r30
 a5c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <twi_rxBufferIndex>
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	83 b1       	in	r24, 0x03	; 3
 a64:	ec 59       	subi	r30, 0x9C	; 156
 a66:	ff 4f       	sbci	r31, 0xFF	; 255
 a68:	80 83       	st	Z, r24
        twi_reply(1);
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	65 df       	rcall	.-310    	; 0x938 <twi_reply>
 a6e:	53 c0       	rjmp	.+166    	; 0xb16 <__vector_17+0x1b4>
      }else{
        // otherwise nack
        twi_reply(0);
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	62 df       	rcall	.-316    	; 0x938 <twi_reply>
 a74:	50 c0       	rjmp	.+160    	; 0xb16 <__vector_17+0x1b4>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 a76:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <twi_rxBufferIndex>
 a7a:	80 32       	cpi	r24, 0x20	; 32
 a7c:	30 f4       	brcc	.+12     	; 0xa8a <__vector_17+0x128>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 a7e:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <twi_rxBufferIndex>
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	ec 59       	subi	r30, 0x9C	; 156
 a86:	ff 4f       	sbci	r31, 0xFF	; 255
 a88:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
 a8a:	5e df       	rcall	.-324    	; 0x948 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 a8c:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <twi_rxBufferIndex>
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <twi_onSlaveReceive>
 a96:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <twi_onSlaveReceive+0x1>
 a9a:	84 e6       	ldi	r24, 0x64	; 100
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 aa0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 aa4:	59 df       	rcall	.-334    	; 0x958 <twi_releaseBus>
      break;
 aa6:	37 c0       	rjmp	.+110    	; 0xb16 <__vector_17+0x1b4>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	46 df       	rcall	.-372    	; 0x938 <twi_reply>
      break;
 aac:	34 c0       	rjmp	.+104    	; 0xb16 <__vector_17+0x1b4>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 aae:	84 e0       	ldi	r24, 0x04	; 4
 ab0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 ab4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 ab8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 abc:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <twi_onSlaveTransmit>
 ac0:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <twi_onSlaveTransmit+0x1>
 ac4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 ac6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <twi_txBufferLength>
 aca:	81 11       	cpse	r24, r1
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <__vector_17+0x176>
        twi_txBufferLength = 1;
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 ad4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 ad8:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <twi_txBufferIndex>
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	8e 0f       	add	r24, r30
 ae0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <twi_txBufferIndex>
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	ea 57       	subi	r30, 0x7A	; 122
 ae8:	ff 4f       	sbci	r31, 0xFF	; 255
 aea:	80 81       	ld	r24, Z
 aec:	83 b9       	out	0x03, r24	; 3
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 aee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <twi_txBufferIndex>
 af2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <twi_txBufferLength>
 af6:	98 17       	cp	r25, r24
 af8:	18 f4       	brcc	.+6      	; 0xb00 <__vector_17+0x19e>
        twi_reply(1);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	1d df       	rcall	.-454    	; 0x938 <twi_reply>
 afe:	0b c0       	rjmp	.+22     	; 0xb16 <__vector_17+0x1b4>
      }else{
        twi_reply(0);
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	1a df       	rcall	.-460    	; 0x938 <twi_reply>
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <__vector_17+0x1b4>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
 b06:	81 e0       	ldi	r24, 0x01	; 1
 b08:	17 df       	rcall	.-466    	; 0x938 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
 b0a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <twi_state>
      break;
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <__vector_17+0x1b4>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 b10:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
      twi_stop();
 b14:	19 df       	rcall	.-462    	; 0x948 <twi_stop>
      break;
  }
}
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	bf 91       	pop	r27
 b1c:	af 91       	pop	r26
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	7f 91       	pop	r23
 b24:	6f 91       	pop	r22
 b26:	5f 91       	pop	r21
 b28:	4f 91       	pop	r20
 b2a:	3f 91       	pop	r19
 b2c:	2f 91       	pop	r18
 b2e:	0f 90       	pop	r0
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	0f 90       	pop	r0
 b34:	1f 90       	pop	r1
 b36:	18 95       	reti

00000b38 <twi_init_master>:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t twi_available(void)
{
  return rxBufferLength - rxBufferIndex;
}
 b38:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <rxBufferIndex>
 b3c:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <rxBufferLength>
 b40:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <txBufferIndex>
 b44:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <txBufferLength>
 b48:	50 de       	rcall	.-864    	; 0x7ea <twi_init>
 b4a:	08 95       	ret

00000b4c <twi_request_from>:
 b4c:	46 2f       	mov	r20, r22
 b4e:	61 32       	cpi	r22, 0x21	; 33
 b50:	08 f0       	brcs	.+2      	; 0xb54 <twi_request_from+0x8>
 b52:	40 e2       	ldi	r20, 0x20	; 32
 b54:	6c ed       	ldi	r22, 0xDC	; 220
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	5b de       	rcall	.-842    	; 0x810 <twi_readFrom>
 b5a:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <rxBufferIndex>
 b5e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxBufferLength>
 b62:	08 95       	ret

00000b64 <twi_begin_transmission>:
 b64:	91 e0       	ldi	r25, 0x01	; 1
 b66:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <transmitting>
 b6a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <txAddress>
 b6e:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <txBufferIndex>
 b72:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <txBufferLength>
 b76:	08 95       	ret

00000b78 <twi_end_transmission>:
 b78:	21 e0       	ldi	r18, 0x01	; 1
 b7a:	40 91 cf 00 	lds	r20, 0x00CF	; 0x8000cf <txBufferLength>
 b7e:	6c ef       	ldi	r22, 0xFC	; 252
 b80:	70 e0       	ldi	r23, 0x00	; 0
 b82:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <txAddress>
 b86:	7a de       	rcall	.-780    	; 0x87c <twi_writeTo>
 b88:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <txBufferIndex>
 b8c:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <txBufferLength>
 b90:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <transmitting>
 b94:	08 95       	ret

00000b96 <twi_send_byte>:
 b96:	cf 93       	push	r28
 b98:	df 93       	push	r29
 b9a:	1f 92       	push	r1
 b9c:	cd b7       	in	r28, 0x3d	; 61
 b9e:	de b7       	in	r29, 0x3e	; 62
 ba0:	89 83       	std	Y+1, r24	; 0x01
 ba2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <transmitting>
 ba6:	88 23       	and	r24, r24
 ba8:	91 f0       	breq	.+36     	; 0xbce <twi_send_byte+0x38>
 baa:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <txBufferLength>
 bae:	80 32       	cpi	r24, 0x20	; 32
 bb0:	90 f4       	brcc	.+36     	; 0xbd6 <twi_send_byte+0x40>
 bb2:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <txBufferIndex>
 bb6:	e8 2f       	mov	r30, r24
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	e4 50       	subi	r30, 0x04	; 4
 bbc:	ff 4f       	sbci	r31, 0xFF	; 255
 bbe:	99 81       	ldd	r25, Y+1	; 0x01
 bc0:	90 83       	st	Z, r25
 bc2:	8f 5f       	subi	r24, 0xFF	; 255
 bc4:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <txBufferIndex>
 bc8:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <txBufferLength>
 bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <twi_send_byte+0x40>
 bce:	61 e0       	ldi	r22, 0x01	; 1
 bd0:	ce 01       	movw	r24, r28
 bd2:	01 96       	adiw	r24, 0x01	; 1
 bd4:	93 de       	rcall	.-730    	; 0x8fc <twi_transmit>
 bd6:	0f 90       	pop	r0
 bd8:	df 91       	pop	r29
 bda:	cf 91       	pop	r28
 bdc:	08 95       	ret

00000bde <twi_receive>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 bde:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <rxBufferIndex>
 be2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxBufferLength>
 be6:	98 17       	cp	r25, r24
 be8:	48 f4       	brcc	.+18     	; 0xbfc <twi_receive+0x1e>
    value = rxBuffer[rxBufferIndex];
 bea:	e9 2f       	mov	r30, r25
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	e4 52       	subi	r30, 0x24	; 36
 bf0:	ff 4f       	sbci	r31, 0xFF	; 255
 bf2:	80 81       	ld	r24, Z
    ++rxBufferIndex;
 bf4:	9f 5f       	subi	r25, 0xFF	; 255
 bf6:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <rxBufferIndex>
 bfa:	08 95       	ret
// or after requestFrom(address, numBytes)
uint8_t twi_receive(void)
{
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
 bfc:	80 e0       	ldi	r24, 0x00	; 0
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
 bfe:	08 95       	ret

00000c00 <__umulhisi3>:
 c00:	a2 9f       	mul	r26, r18
 c02:	b0 01       	movw	r22, r0
 c04:	b3 9f       	mul	r27, r19
 c06:	c0 01       	movw	r24, r0
 c08:	a3 9f       	mul	r26, r19
 c0a:	01 d0       	rcall	.+2      	; 0xc0e <__umulhisi3+0xe>
 c0c:	b2 9f       	mul	r27, r18
 c0e:	70 0d       	add	r23, r0
 c10:	81 1d       	adc	r24, r1
 c12:	11 24       	eor	r1, r1
 c14:	91 1d       	adc	r25, r1
 c16:	08 95       	ret

00000c18 <_exit>:
 c18:	f8 94       	cli

00000c1a <__stop_program>:
 c1a:	ff cf       	rjmp	.-2      	; 0xc1a <__stop_program>
